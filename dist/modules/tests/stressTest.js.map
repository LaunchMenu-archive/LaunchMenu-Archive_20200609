{"version":3,"sources":["../../../src/modules/tests/stressTest.js"],"names":["StressTest","Module","constructor","request","$test","modules","promises","count","i","module","TestModule2","__register","push","__onRegister","global","encode","decode","all","then","console","time","forEach","requestHandle","type","channel","timeEnd","sendTest","n","IPC","send","isMain","on","event"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;AAAA;AAAA;AAAA;;;;;;;;AAGe,MAAMA,UAAN,SAAyBC,kBAAzB,CAAgC;AAC3CC,gBAAYC,OAAZ,EAAqB;AACjB,cAAMA,OAAN,EAAe,IAAf;AACH;AACDC,YAAQ;AACJ,YAAI,IAAJ,EAAU;AACN,kBAAMC,UAAU,EAAhB;AACA,kBAAMC,WAAW,EAAjB;AACA,gBAAIC,QAAQ,GAAZ;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,KAApB,EAA2BC,GAA3B,EAAgC;AAC5B,sBAAMC,SAAS,IAAIC,gBAAJ,EAAf;AACAD,uBAAOE,UAAP;AACAL,yBAASM,IAAT,CAAcH,OAAOI,YAAP,EAAd;AACAR,wBAAQO,IAAR,CAAaH,MAAb;AACH;;AAEDK,mBAAOC,MAAP,GAAgB,CAAhB;AACAD,mBAAOE,MAAP,GAAgB,CAAhB;;AAEA;AACA,8BAAQC,GAAR,CAAYX,QAAZ,EAAsBY,IAAtB,CAA2B,MAAM;AAC7BC,wBAAQC,IAAR,CAAa,MAAb;AACAf,wBAAQgB,OAAR,CAAgBZ,UAAU;AACtBA,2BACKa,aADL,CACmB;AACXC,8BAAM;AADK,qBADnB,EAIKL,IAJL,CAIUM,WAAW;AACb,4BAAI,EAAEjB,KAAF,IAAW,CAAf,EAAkB;AACdY,oCAAQM,OAAR,CAAgB,MAAhB;AACH;AACD;AACA;AACA;AACH,qBAXL;AAYA;AACH,iBAdD;AAeA;AACH,aAlBD;AAmBH,SAlCD,MAkCO;AACH,kBAAMC,WAAWC,KACbC,QAAIC,IAAJ,CAAS,aAAT,EAAwB,EAAxB,EAA4B,CAA5B,EAA+BX,IAA/B,CAAoC,MAAM;AACtC,oBAAIS,IAAI,CAAJ,GAAQ,CAAZ,EAAe,OAAOD,SAASC,IAAI,CAAb,CAAP,CAAf,KACKR,QAAQM,OAAR,CAAgB,OAAhB;AACR,aAHD,CADJ;;AAMAN,oBAAQC,IAAR,CAAa,OAAb;AACA;AACH;AACJ;AAjD0C;;kBAA1BpB,U;AAoDrB,IAAI8B,UAAJ,EAAY;AACRF,YAAIG,EAAJ,CAAO,aAAP,EAAsBC,SAAS;AAC3B,eAAO,MAAP;AACH,KAFD;AAGH","file":"stressTest.js","sourcesContent":["import {IPC, isMain} from \"LM\";\r\nimport TestModule2 from \"LM:test2\";\r\nimport Module from \"LM:Module\";\r\n\r\nexport default class StressTest extends Module {\r\n    constructor(request) {\r\n        super(request, true);\r\n    }\r\n    $test() {\r\n        if (true) {\r\n            const modules = [];\r\n            const promises = [];\r\n            let count = 100;\r\n            for (var i = 0; i < count; i++) {\r\n                const module = new TestModule2();\r\n                module.__register();\r\n                promises.push(module.__onRegister());\r\n                modules.push(module);\r\n            }\r\n\r\n            global.encode = 0;\r\n            global.decode = 0;\r\n\r\n            // Load the first instance and window\r\n            Promise.all(promises).then(() => {\r\n                console.time(\"Done\");\r\n                modules.forEach(module => {\r\n                    module\r\n                        .requestHandle({\r\n                            type: \"alert\",\r\n                        })\r\n                        .then(channel => {\r\n                            if (--count == 0) {\r\n                                console.timeEnd(\"Done\");\r\n                            }\r\n                            // channel.$alert(\"single alert\").then(() => {\r\n                            //     return channel.close();\r\n                            // });\r\n                        });\r\n                    // LM.Registry.requestModule({type: \"test2\"});\r\n                });\r\n                // console.timeEnd(\"Done\");\r\n            });\r\n        } else {\r\n            const sendTest = n =>\r\n                IPC.send(\"Stress.test\", \"\", 0).then(() => {\r\n                    if (n - 1 > 0) return sendTest(n - 1);\r\n                    else console.timeEnd(\"start\");\r\n                });\r\n\r\n            console.time(\"start\");\r\n            // sendTest(100).then(;\r\n        }\r\n    }\r\n}\r\n\r\nif (isMain) {\r\n    IPC.on(\"Stress.test\", event => {\r\n        return \"test\";\r\n    });\r\n}\r\n"]}