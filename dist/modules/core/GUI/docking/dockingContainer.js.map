{"version":3,"sources":["../../../../../src/modules/core/GUI/docking/dockingContainer.js"],"names":["DockingContainer","GUIModule","constructor","request","arguments","sections","data","__init","promises","map","sectionID","section","ID","requestHandle","type","embedGUI","all","$openModule","event","modulePath","module","Registry","_getModuleInstance","console","log","render"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAEe,MAAMA,gBAAN,SAA+BC,qBAA/B,CAAyC;AACpDC,gBAAYC,OAAZ,EAAqB;AACjB,cAAM,GAAGC,SAAT;AACA,cAAMC,WAAWF,QAAQG,IAAzB;;AAEA;AACA,aAAKC,MAAL,CAAY,YAAY;AACpB;AACA,gBAAIC,WAAW,oBAAYH,QAAZ,EAAsBI,GAAtB,CAA0BC,aAAa;AAClD;AACA,oBAAIC,UAAUN,SAASK,SAAT,CAAd;AACAC,wBAAQC,EAAR,GAAaF,SAAb;;AAEA;AACA,uBAAO,KAAKG,aAAL,CAAmB;AACtBC,0BAAM,gBADgB;AAEtBR,0BAAMK,OAFgB;AAGtBI,8BAAU;AAHY,iBAAnB,CAAP;AAKH,aAXc,CAAf;;AAaA;AACA,iBAAKV,QAAL,GAAgB,MAAM,kBAAQW,GAAR,CAAYR,QAAZ,CAAtB;AACH,SAjBD;AAkBH;AACDS,gBAAYC,KAAZ,EAAmBC,UAAnB,EAA+BT,SAA/B,EAA0C;AACtC,cAAMU,SAASC,aAASC,kBAAT,CAA4BH,UAA5B,CAAf;AACAI,gBAAQC,GAAR,CAAYJ,MAAZ,EAAoBhB,SAApB;AACH;AACDqB,aAAS;AACL,eAAO;AAAA;AAAA;AAAO,iBAAKpB;AAAZ,SAAP;AACH;AA/BmD;kBAAnCL,gB","file":"dockingContainer.js","sourcesContent":["import {Registry} from \"LM\";\r\nimport GUIModule from \"LM:GUIModule\";\r\n\r\nexport default class DockingContainer extends GUIModule {\r\n    constructor(request) {\r\n        super(...arguments);\r\n        const sections = request.data;\r\n\r\n        // Get docking elements to put in this container\r\n        this.__init(async () => {\r\n            // Go through all sections\r\n            var promises = Object.keys(sections).map(sectionID => {\r\n                // Get the section, and attach its ID\r\n                var section = sections[sectionID];\r\n                section.ID = sectionID;\r\n\r\n                // Request an element for this section\r\n                return this.requestHandle({\r\n                    type: \"DockingElement\",\r\n                    data: section,\r\n                    embedGUI: true,\r\n                });\r\n            });\r\n\r\n            // Wait for all modules to return\r\n            this.sections = await Promise.all(promises);\r\n        });\r\n    }\r\n    $openModule(event, modulePath, sectionID) {\r\n        const module = Registry._getModuleInstance(modulePath);\r\n        console.log(module, arguments);\r\n    }\r\n    render() {\r\n        return <span>{this.sections}</span>;\r\n    }\r\n}\r\n"]}