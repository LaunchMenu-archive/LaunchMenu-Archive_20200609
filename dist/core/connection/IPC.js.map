{"version":3,"sources":["../../../src/core/connection/IPC.js"],"names":["IPC","send","type","data","dest","_isRenderer","ipcRenderer","on","handler","once","off","_setup","windows","ipcMain","event","arg","_getWindows","_registerWindow","window","push","__encodeData"],"mappings":";;;;;;;;AAAA;;AACA,MAAMA,GAAN,CAAS;AACL;;;;;;;AAOA,WAAOC,IAAP,CAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,OAAO,GAA/B,EAAmC;AAC/B,YAAG,KAAKC,WAAL,EAAH,EAAsB;AAClBC,kCAAYL,IAAZ,CAAiB,aAAjB,EAAgC,EAACG,MAAKA,IAAN,EAAYD,MAAKA,IAAjB,EAAhC;AACH,SAFD,MAEK,CAEJ;AACJ;AACD,WAAOI,EAAP,CAAUL,IAAV,EAAgBM,OAAhB,EAAwB,CAEvB;AACD,WAAOC,IAAP,CAAYP,IAAZ,EAAkBM,OAAlB,EAA0B,CAEzB;AACD,WAAOE,GAAP,CAAWR,IAAX,EAAiBM,OAAjB,EAAyB,CAExB;;AAED;AACA,WAAOG,MAAP,GAAe;AACX,aAAKC,OAAL,GAAe,EAAf;;AAEA,YAAG,KAAKP,WAAL,EAAH,EAAsB,CAErB,CAFD,MAEK;AAAE;AACHQ,8BAAQN,EAAR,CAAW,aAAX,EAA0B,CAACO,KAAD,EAAQC,GAAR,KAAgB,CAEzC,CAFD;AAGH;AACJ;AACD,WAAOC,WAAP,GAAoB;AAChB,eAAO,KAAKJ,OAAZ;AACH;AACD,WAAOK,eAAP,CAAuBC,MAAvB,EAA8B;AAC1B,aAAKN,OAAL,CAAaO,IAAb,CAAkBD,MAAlB;AACH;AACD,WAAOb,WAAP,GAAoB;AAChB,eAAO,CAAC,CAACC,qBAAT;AACH;;AAED;AACA,WAAOc,YAAP,GAAqB,CAEpB;AAlDI;AAoDTpB,IAAIW,MAAJ;kBACeX,G","file":"IPC.js","sourcesContent":["import {ipcMain, ipcRenderer} from \"electron\";\r\nclass IPC{\r\n    /**\r\n     * Send data to another window or the main script\r\n     * @param  {String} type The event type to send (preferbly prefixed with some module ID)\r\n     * @param  {Object} data The data to send\r\n     * @param  {String|[String, ...]} [dest=\"*\"] The window ID(s) to send this data to\r\n     * @return {Undefined} The method returns no useful information\r\n     */\r\n    static send(type, data, dest = \"*\"){\r\n        if(this._isRenderer()){\r\n            ipcRenderer.send(\"IPC.forward\", {dest:dest, data:data});\r\n        }else{\r\n\r\n        }\r\n    }\r\n    static on(type, handler){\r\n\r\n    }\r\n    static once(type, handler){\r\n\r\n    }\r\n    static off(type, handler){\r\n\r\n    }\r\n\r\n    //protected methods\r\n    static _setup(){\r\n        this.windows = [];\r\n\r\n        if(this._isRenderer()){\r\n\r\n        }else{ //means it runs in a renderer\r\n            ipcMain.on(\"IPC.forward\", (event, arg) => {\r\n\r\n            });\r\n        }\r\n    }\r\n    static _getWindows(){\r\n        return this.windows;\r\n    }\r\n    static _registerWindow(window){\r\n        this.windows.push(window);\r\n    }\r\n    static _isRenderer(){\r\n        return !!ipcRenderer;\r\n    }\r\n\r\n    //private methods\r\n    static __encodeData(){\r\n\r\n    }\r\n}\r\nIPC._setup();\r\nexport default IPC;\r\n"]}