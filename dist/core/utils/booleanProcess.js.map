{"version":3,"sources":["../../../src/core/utils/booleanProcess.js"],"names":["State","constructor","state","true","setState","false","turningTrue","turningFalse","trueOrTurningTrue","falseOrTurningFalse"],"mappings":";;;;;;;;AAAe,MAAMA,KAAN,CAAY;AACvB;;;;;;AAMAC,gBAAYC,KAAZ,EAAmB;AACf,aAAKA,KAAL,GAAaA,SAAS,CAAtB;AACH;;AAED;;;;;;AAMAC,SAAKC,QAAL,EAAe;AACX,YAAIA,QAAJ,EAAc,KAAKF,KAAL,GAAa,CAAb;AACd,eAAO,KAAKA,KAAL,IAAc,CAArB;AACH;;AAED;;;;;;AAMAG,UAAMD,QAAN,EAAgB;AACZ,YAAIA,QAAJ,EAAc,KAAKF,KAAL,GAAa,CAAb;AACd,eAAO,KAAKA,KAAL,IAAc,CAArB;AACH;;AAED;;;;;;AAMAI,gBAAYF,QAAZ,EAAsB;AAClB,YAAIA,QAAJ,EAAc,KAAKF,KAAL,GAAa,CAAb;AACd,eAAO,KAAKA,KAAL,IAAc,CAArB;AACH;;AAED;;;;;;AAMAK,iBAAaH,QAAb,EAAuB;AACnB,YAAIA,QAAJ,EAAc,KAAKF,KAAL,GAAa,CAAb;AACd,eAAO,KAAKA,KAAL,IAAc,CAArB;AACH;;AAED;;;;;AAKAM,wBAAoB;AAChB,eAAO,KAAKN,KAAL,IAAc,CAAd,IAAmB,KAAKA,KAAL,IAAc,CAAxC;AACH;;AAED;;;;;AAKAO,0BAAsB;AAClB,eAAO,KAAKP,KAAL,IAAc,CAAd,IAAmB,KAAKA,KAAL,IAAc,CAAxC;AACH;AAvEsB;kBAANF,K","file":"booleanProcess.js","sourcesContent":["export default class State {\r\n    /**\r\n     * Create a new State object to track an async boolean state\r\n     * @param {('0'|'1'|'2'|'3')} [state] - The initial state\r\n     * @constructs State\r\n     * @public\r\n     */\r\n    constructor(state) {\r\n        this.state = state || 0;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is true, or turn it to true\r\n     * @param {boolean} [setState] - Whether to turn the state to true\r\n     * @returns {boolean} If the state is true\r\n     * @public\r\n     */\r\n    true(setState) {\r\n        if (setState) this.state = 2;\r\n        return this.state == 2;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is false, or turn it to false\r\n     * @param {boolean} [setState] - Whether to turn the state to false\r\n     * @returns {boolean} If the state is false\r\n     * @public\r\n     */\r\n    false(setState) {\r\n        if (setState) this.state = 0;\r\n        return this.state == 0;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is turning true, or turn it to turning true\r\n     * @param {boolean} [setState] - Whether to turn the state to turning true\r\n     * @returns {boolean} If the state is turning true\r\n     * @public\r\n     */\r\n    turningTrue(setState) {\r\n        if (setState) this.state = 1;\r\n        return this.state == 1;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is turning false, or turn it to turning false\r\n     * @param {boolean} [setState] - Whether to turn the state to turning false\r\n     * @returns {boolean} If the state is turning false\r\n     * @public\r\n     */\r\n    turningFalse(setState) {\r\n        if (setState) this.state = 3;\r\n        return this.state == 3;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is true ot turning true\r\n     * @returns {boolean} If the state is true orturning true\r\n     * @public\r\n     */\r\n    trueOrTurningTrue() {\r\n        return this.state == 1 || this.state == 2;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is false ot turning false\r\n     * @returns {boolean} If the state is false orturning false\r\n     * @public\r\n     */\r\n    falseOrTurningFalse() {\r\n        return this.state == 0 || this.state == 3;\r\n    }\r\n}\r\n"]}