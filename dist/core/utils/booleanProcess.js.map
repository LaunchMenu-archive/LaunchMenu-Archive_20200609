{"version":3,"sources":["../../../src/core/utils/booleanProcess.js"],"names":["State","constructor","state","listeners","true","setState","__setState","false","turningTrue","turningFalse","trueOrTurningTrue","falseOrTurningFalse","addListener","listener","indexOf","push","removeListener","index","splice","oldState","forEach","call"],"mappings":";;;;;;;;AAAe,MAAMA,KAAN,CAAY;AACvB;;;;;;AAMAC,gBAAYC,KAAZ,EAAmB;AACf,aAAKA,KAAL,GAAaA,SAAS,CAAtB;;AAEA;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACH;;AAED;;;;;;AAMAC,SAAKC,QAAL,EAAe;AACX,YAAIA,QAAJ,EAAc,KAAKC,UAAL,CAAgB,CAAhB;AACd,eAAO,KAAKJ,KAAL,IAAc,CAArB;AACH;;AAED;;;;;;AAMAK,UAAMF,QAAN,EAAgB;AACZ,YAAIA,QAAJ,EAAc,KAAKC,UAAL,CAAgB,CAAhB;AACd,eAAO,KAAKJ,KAAL,IAAc,CAArB;AACH;;AAED;;;;;;AAMAM,gBAAYH,QAAZ,EAAsB;AAClB,YAAIA,QAAJ,EAAc,KAAKC,UAAL,CAAgB,CAAhB;AACd,eAAO,KAAKJ,KAAL,IAAc,CAArB;AACH;;AAED;;;;;;AAMAO,iBAAaJ,QAAb,EAAuB;AACnB,YAAIA,QAAJ,EAAc,KAAKC,UAAL,CAAgB,CAAhB;AACd,eAAO,KAAKJ,KAAL,IAAc,CAArB;AACH;;AAED;;;;;AAKAQ,wBAAoB;AAChB,eAAO,KAAKR,KAAL,IAAc,CAAd,IAAmB,KAAKA,KAAL,IAAc,CAAxC;AACH;;AAED;;;;;AAKAS,0BAAsB;AAClB,eAAO,KAAKT,KAAL,IAAc,CAAd,IAAmB,KAAKA,KAAL,IAAc,CAAxC;AACH;;AAED;AACA;;;;;;AAMAU,gBAAYC,QAAZ,EAAsB;AAClB;AACA,YAAI,KAAKV,SAAL,CAAeW,OAAf,CAAuBD,QAAvB,KAAoC,CAAC,CAAzC;AACI;AACA,iBAAKV,SAAL,CAAeY,IAAf,CAAoBF,QAApB;AACP;;AAED;;;;;;AAMAG,mBAAeH,QAAf,EAAyB;AACrB;AACA,cAAMI,QAAQ,KAAKd,SAAL,CAAeW,OAAf,CAAuBD,QAAvB,CAAd;;AAEA;AACA,YAAII,SAAS,CAAC,CAAd;AACI;AACA,iBAAKd,SAAL,CAAee,MAAf,CAAsBD,KAAtB,EAA6B,CAA7B;AACP;;AAED;;;;;;AAMAX,eAAWJ,KAAX,EAAkB;AACd;AACA,cAAMiB,WAAW,KAAKjB,KAAtB;;AAEA;AACA,aAAKA,KAAL,GAAaA,KAAb;;AAEA;AACA,aAAKC,SAAL,CAAeiB,OAAf,CAAuBP,YAAY;AAC/BA,qBAASQ,IAAT,CAAc,IAAd,EAAoB,KAAKnB,KAAzB,EAAgCiB,QAAhC;AACH,SAFD;AAGH;AA3HsB;kBAANnB,K","file":"booleanProcess.js","sourcesContent":["export default class State {\r\n    /**\r\n     * Create a new State object to track an async boolean state\r\n     * @param {('0'|'1'|'2'|'3')} [state] - The initial state\r\n     * @constructs State\r\n     * @public\r\n     */\r\n    constructor(state) {\r\n        this.state = state || 0;\r\n\r\n        // Listeners that check for state changes\r\n        this.listeners = [];\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is true, or turn it to true\r\n     * @param {boolean} [setState] - Whether to turn the state to true\r\n     * @returns {boolean} If the state is true\r\n     * @public\r\n     */\r\n    true(setState) {\r\n        if (setState) this.__setState(2);\r\n        return this.state == 2;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is false, or turn it to false\r\n     * @param {boolean} [setState] - Whether to turn the state to false\r\n     * @returns {boolean} If the state is false\r\n     * @public\r\n     */\r\n    false(setState) {\r\n        if (setState) this.__setState(0);\r\n        return this.state == 0;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is turning true, or turn it to turning true\r\n     * @param {boolean} [setState] - Whether to turn the state to turning true\r\n     * @returns {boolean} If the state is turning true\r\n     * @public\r\n     */\r\n    turningTrue(setState) {\r\n        if (setState) this.__setState(1);\r\n        return this.state == 1;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is turning false, or turn it to turning false\r\n     * @param {boolean} [setState] - Whether to turn the state to turning false\r\n     * @returns {boolean} If the state is turning false\r\n     * @public\r\n     */\r\n    turningFalse(setState) {\r\n        if (setState) this.__setState(3);\r\n        return this.state == 3;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is true ot turning true\r\n     * @returns {boolean} If the state is true orturning true\r\n     * @public\r\n     */\r\n    trueOrTurningTrue() {\r\n        return this.state == 1 || this.state == 2;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is false ot turning false\r\n     * @returns {boolean} If the state is false orturning false\r\n     * @public\r\n     */\r\n    falseOrTurningFalse() {\r\n        return this.state == 0 || this.state == 3;\r\n    }\r\n\r\n    // Listener related methods\r\n    /**\r\n     * Adds a listener to check for changes\r\n     * @param {function} listener - The listener to be called when the state is changed\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    addListener(listener) {\r\n        // Check if the listener isn't already in the list\r\n        if (this.listeners.indexOf(listener) == -1)\r\n            // Add the listener\r\n            this.listeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Adds a listener to check for changes\r\n     * @param {function} listener - The listener to be called when the state is changed\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    removeListener(listener) {\r\n        // Get the index of the listener\r\n        const index = this.listeners.indexOf(listener);\r\n\r\n        // Check if the listener is in the list\r\n        if (index != -1)\r\n            // Remove the listener\r\n            this.listeners.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Changes the state and calls all listeners\r\n     * @param {('0'|'1'|'2'|'3')} newState - The new state we should have\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __setState(state) {\r\n        // Store the old state\r\n        const oldState = this.state;\r\n\r\n        // Set the new state\r\n        this.state = state;\r\n\r\n        // Go through all listeners and call them\r\n        this.listeners.forEach(listener => {\r\n            listener.call(this, this.state, oldState);\r\n        });\r\n    }\r\n}\r\n"]}