{"version":3,"sources":["../../../../../src/core/communication/data/settings/settingsHandler.js"],"names":["escapePath","path","replace","dataDir","Path","resolve","__dirname","prefix","SettingsHandler","create","module","defaultData","getPath","toString","ID","_create","fileName","data","IPC","send","settings","Settings","_setData","__getFile","FS","existsSync","JSON","parse","readFileSync","e","console","error","__setFile","writeFileSync","__getPath","join","_getModuleFile","requestPath","__setup","isMain","on","event","instance","GlobalDataHandler","globalDataInstances","forEach","field","undefined","_changeField"],"mappings":"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","file":"settingsHandler.js","sourcesContent":["import GlobalDataHandler from \"../globalData/globalDataHandler\";\r\nimport Settings from \"./settings\";\r\nimport isMain from \"../../../isMain\";\r\nimport IPC from \"../../IPC\";\r\nimport Path from \"path\";\r\nimport FS from \"fs\";\r\n\r\nfunction escapePath(path) {\r\n    return path\r\n        .replace(/\\>/g, \"\")\r\n        .replace(/[\\\\\\/]/g, \"_\")\r\n        .replace(/\\..*$/, \"\");\r\n}\r\nconst dataDir = Path.resolve(__dirname, \"../../../../../data/settings\");\r\nconst prefix = \"Settings:\";\r\n\r\n/**\r\n * @classdesc A static class that allows you to create settings which will be synchronised between modules and can be saved in files\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class SettingsHandler {\r\n    /**\r\n     * Creates a new settings instance\r\n     * @param {string} ID - The identifier of the settings (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the settings should contain if no file exists yet\r\n     * @returns {Settings} The settings instance\r\n     * @async\r\n     * @public\r\n     */\r\n    static create(module, defaultData) {\r\n        // Use the module class path as the filename by default\r\n        const path = module.getPath().toString();\r\n\r\n        // Use the path with a settings prefix as the data ID\r\n        const ID = prefix + path;\r\n\r\n        // Create the settings\r\n        return this._create(ID, defaultData, path);\r\n    }\r\n\r\n    /**\r\n     * Creates a new settings instance\r\n     * @param {string} ID - The identifier of the settings (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the settings should contain if no file exists yet\r\n     * @param {string} fileName - The name of the file to store the settings in\r\n     * @returns {Settings} The settings instance\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _create(ID, defaultData, fileName) {\r\n        if (!fileName) fileName = ID;\r\n        // Get the currently stored data for this ID from main, will be set to default if absent\r\n        const data = (await IPC.send(\r\n            \"Settings.retrieve\",\r\n            {\r\n                ID: ID,\r\n                fileName: fileName,\r\n                defaultData: defaultData,\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Createa a new settings instance\r\n        const settings = new Settings(ID, prefix);\r\n\r\n        // Add the data retrieved from main to this instance\r\n        settings._setData(data);\r\n\r\n        // Return the instance\r\n        return settings;\r\n    }\r\n\r\n    // Some file manipulation methods\r\n    /**\r\n     * Gets the contents of the file at the speciifed path\r\n     * @param {string} path - The path to get the data from\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @private\r\n     */\r\n    static __getFile(path) {\r\n        // Check if a file exists at this path\r\n        if (FS.existsSync(path)) {\r\n            try {\r\n                // If it exists, read the contents and parse it to json\r\n                const data = JSON.parse(FS.readFileSync(path));\r\n\r\n                // Return the data\r\n                return data;\r\n            } catch (e) {\r\n                // If anything goes wrong, just log an error. TODO: Properly handle these errors\r\n                console.error(\r\n                    `Something went wrong while retrieving ${path}:`,\r\n                    e\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes contents in the file at the speciifed path\r\n     * @param {string} path - The path to write the data to\r\n     * @param {Object} data - The data to write to the file\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setFile(path, data) {\r\n        // Turn the data to json and write at the path\r\n        return FS.writeFileSync(path, JSON.stringify(data, null, 4));\r\n    }\r\n    /**\r\n     * Gets the correct fle path based on the file name (without extension)\r\n     * @param {string} fileName - The name of the file\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @private\r\n     */\r\n    static __getPath(fileName) {\r\n        // Combine the escaped file with the settings path and add th json extension\r\n        return Path.join(dataDir, escapePath(fileName)) + \".json\";\r\n    }\r\n    /**\r\n     * Gets the contents of a file corresponding to a specific requestPath\r\n     * @param {RequestPath} requestPath - The path for which to get a file\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @protected\r\n     */\r\n    static _getModuleFile(requestPath) {\r\n        // Get the data from the combined escaped request path and the settings path\r\n        return this.__getFile(\r\n            Path.join(dataDir, escapePath(requestPath.toString())) + \".json\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        if (isMain) {\r\n            // Listen for settings save events\r\n            IPC.on(\"Settings.save\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                // Retrieve the data to save\r\n                const instance = GlobalDataHandler.globalDataInstances[ID];\r\n                if (instance) {\r\n                    // Save the data in the correct file\r\n                    return this.__setFile(this.__getPath(fileName), instance);\r\n                }\r\n\r\n                // Return false if there was no data to save\r\n                return false;\r\n            });\r\n\r\n            // Listen for settings reload events\r\n            IPC.on(\"Settings.reload\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                // Retrieve both the saved and currently loaded data\r\n                const instance = GlobalDataHandler.globalDataInstances[ID];\r\n                const data = this.__getFile(this.__getPath(fileName));\r\n\r\n                // Check if both are present\r\n                if (instance && data) {\r\n                    // Set undefined fields literally to undefined such that they will be deleted\r\n                    Object.keys(instance).forEach(field => {\r\n                        if (data[field] === undefined) data[field] = undefined;\r\n                    });\r\n\r\n                    // Change all the data\r\n                    GlobalDataHandler._changeField(ID, instance, data, \"\");\r\n                    return data;\r\n                }\r\n\r\n                // If either the current data or saved data is absent, return false\r\n                return false;\r\n            });\r\n\r\n            // Add dedicated retrieve method that checks if data is stored in a file first\r\n            IPC.on(\"Settings.retrieve\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                //  Check if global data for these settings is already loaded\r\n                if (!GlobalDataHandler.globalDataInstances[ID]) {\r\n                    // If it isn't already loaded, try to retrieve it from the file\r\n                    const data = this.__getFile(this.__getPath(fileName));\r\n                    if (data) {\r\n                        // If the file contained data, load this data\r\n                        GlobalDataHandler.globalDataInstances[ID] = data;\r\n                    } else {\r\n                        // If the file contained no data, load the default data\r\n                        GlobalDataHandler.globalDataInstances[ID] =\r\n                            event.data.defaultData;\r\n                    }\r\n                }\r\n\r\n                // Return the stored data for these settings\r\n                return GlobalDataHandler.globalDataInstances[ID];\r\n            });\r\n        }\r\n    }\r\n}\r\nSettingsHandler.__setup();\r\n"]}