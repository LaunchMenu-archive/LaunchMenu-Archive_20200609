{"version":3,"sources":["../../../../../src/core/communication/data/settings/settingsHandler.js"],"names":["dataDir","Path","resolve","__dirname","prefix","SettingsHandler","create","module","defaultData","path","getPath","toString","ID","_create","fileName","isModuleFile","data","IPC","send","settings","Settings","_setData","__generateUUID","alphabet","format","replace","Math","floor","length","random","__getPathPatternUUID","requestPathPattern","isMain","RequestPathPattern","modulePath","getModuleID","patterns","pathPatternUUIDs","UUID","__setPathPatternUUID","__loadPathPatternUUIDS","__getFile","__getPath","__storePathPatternUUIDS","__setFile","FS","existsSync","JSON","parse","readFileSync","e","console","error","writeFileSync","__deleteFile","unlinkSync","join","__getPatternPath","__getUUIDpath","_getModuleLocation","requestPath","RequestPath","patternsData","filter","pattern","test","sort","a","b","comparePriority","pop","GlobalDataHandler","_getData","location","window","section","__setup","on","event","instance","undefined","forEach","field","_changeField"],"mappings":"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","file":"settingsHandler.js","sourcesContent":["import Path from \"path\";\r\nimport FS from \"fs\";\r\n\r\nimport GlobalDataHandler from \"../globalData/globalDataHandler\";\r\nimport Settings from \"./settings\";\r\nimport RequestPath from \"../../../registry/requestPath/requestPath\";\r\nimport RequestPathPattern from \"../../../registry/requestPath/requestPathPattern\";\r\nimport isMain from \"../../../isMain\";\r\nimport IPC from \"../../IPC\";\r\n\r\nconst dataDir = Path.resolve(__dirname, \"../../../../../data/settings\");\r\nconst prefix = \"Settings:\";\r\n\r\n/**\r\n * @classdesc A static class that allows you to create settings which will be synchronised between modules and can be saved in files. Takes care of both the settings and moduleSettings data handling needs.\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class SettingsHandler {\r\n    /**\r\n     * Creates a new settings instance\r\n     * @param {string} ID - The identifier of the settings (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the settings should contain if no file exists yet\r\n     * @returns {Settings} The settings instance\r\n     * @async\r\n     * @public\r\n     */\r\n    static create(module, defaultData) {\r\n        // Use the module class path as the filename by default\r\n        const path = module.getPath().toString();\r\n\r\n        // Use the path with a settings prefix as the data ID\r\n        const ID = prefix + path;\r\n\r\n        // Create the settings\r\n        return this._create(ID, defaultData, path);\r\n    }\r\n\r\n    /**\r\n     * Creates a new settings instance\r\n     * @param {string} ID - The identifier of the settings (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the settings should contain if no file exists yet\r\n     * @param {string} fileName - The name of the file to store the settings in\r\n     * @param {boolean} isModuleFile - Whether or not the settings are for a module\r\n     * @returns {Settings} The settings instance\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _create(ID, defaultData, fileName, isModuleFile) {\r\n        if (!fileName) fileName = ID;\r\n        // Get the currently stored data for this ID from main, will be set to default if absent\r\n        const data = (await IPC.send(\r\n            \"Settings.retrieve\",\r\n            {\r\n                ID: ID,\r\n                fileName: fileName,\r\n                defaultData: defaultData,\r\n                isModuleFile: isModuleFile,\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Createa a new settings instance\r\n        const settings = new Settings(ID, fileName, isModuleFile);\r\n\r\n        // Add the data retrieved from main to this instance\r\n        settings._setData(data);\r\n\r\n        // Return the instance\r\n        return settings;\r\n    }\r\n\r\n    //UUID related methods\r\n    /**\r\n     * Generates a UUID\r\n     * @returns {string} The UUID\r\n     * @private\r\n     */\r\n    static __generateUUID() {\r\n        const alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r\n        const format = \"xxxx-xxxx-xxxx-xxxx-xxxx\";\r\n        return format.replace(\r\n            /x/g,\r\n            () => alphabet[Math.floor(alphabet.length * Math.random())]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the UUID, used for the filename, that belongs to a specific request path pattern (only accessible in main)\r\n     * @param {(RequestPathPattern|string)} requestPathPattern - The request path to get the UUID for\r\n     * @returns {string} The file name of the file with this pattern\r\n     * @private\r\n     */\r\n    static __getPathPatternUUID(requestPathPattern) {\r\n        if (isMain) {\r\n            // Normalize the requestPathPattern\r\n            if (typeof requestPathPattern == \"string\")\r\n                requestPathPattern = new RequestPathPattern(requestPathPattern);\r\n\r\n            // Get the module that this path would lead to\r\n            const modulePath = requestPathPattern.getModuleID().module;\r\n\r\n            // Check if there already are UUIDs for this end point\r\n            const patterns = this.pathPatternUUIDs[modulePath];\r\n            if (!patterns) return;\r\n\r\n            // Check if there is a UUID for this specific pattern\r\n            const UUID = patterns[requestPathPattern.toString()];\r\n            if (!UUID) return;\r\n\r\n            // Return the UUID\r\n            return UUID;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the UUID, used for the filename, that belongs to the given request path pattern (only accessible in main)\r\n     * @param {RequestPath~pattern} requestPathPattern - The request path to set the UUID for\r\n     * @param {string} UUID - The UUID to set\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setPathPatternUUID(requestPathPattern, UUID) {\r\n        if (isMain) {\r\n            // Normalize the requestPathPattern\r\n            if (typeof requestPathPattern == \"string\")\r\n                requestPathPattern = new RequestPathPattern(requestPathPattern);\r\n\r\n            // Get the module that this path would lead to\r\n            const modulePath = requestPathPattern.getModuleID().module;\r\n\r\n            // Get the map of UUIDs for this endpoint\r\n            let patterns = this.pathPatternUUIDs[modulePath];\r\n\r\n            // If no such map exists yet, create it\r\n            if (!patterns) patterns = this.pathPatternUUIDs[modulePath] = {};\r\n\r\n            // Add this request path pattern to the map\r\n            patterns[requestPathPattern] = UUID;\r\n\r\n            // If the new UUID isn't defined, delete the field completely\r\n            if (!UUID) delete patterns[requestPathPattern];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the UUID data out of the text file (only accessible in main)\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __loadPathPatternUUIDS() {\r\n        if (isMain)\r\n            this.pathPatternUUIDs =\r\n                this.__getFile(this.__getPath(\"moduleSettingPaths\")) || {};\r\n    }\r\n\r\n    /**\r\n     * Saves the UUID data to the text file (only accessible in main)\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __storePathPatternUUIDS() {\r\n        if (isMain)\r\n            this.__setFile(\r\n                this.__getPath(\"moduleSettingPaths\"),\r\n                this.pathPatternUUIDs\r\n            );\r\n    }\r\n\r\n    // Some file manipulation methods\r\n    /**\r\n     * Gets the contents of the file at the speciifed path\r\n     * @param {string} path - The path to get the data from\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @private\r\n     */\r\n    static __getFile(path) {\r\n        // Check if a file exists at this path\r\n        if (FS.existsSync(path)) {\r\n            try {\r\n                // If it exists, read the contents and parse it to json\r\n                const data = JSON.parse(FS.readFileSync(path));\r\n\r\n                // Return the data\r\n                return data;\r\n            } catch (e) {\r\n                // If anything goes wrong, just log an error. TODO: Properly handle these errors\r\n                console.error(\r\n                    `Something went wrong while retrieving ${path}:`,\r\n                    e\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes contents in the file at the speciifed path\r\n     * @param {string} path - The path to write the data to\r\n     * @param {Object} data - The data to write to the file\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setFile(path, data) {\r\n        // Turn the data to json and write at the path\r\n        return FS.writeFileSync(path, JSON.stringify(data, null, 4));\r\n    }\r\n\r\n    /**\r\n     * Deletes the file at the speciifed path\r\n     * @param {string} path - The path to write the data to\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __deleteFile(path) {\r\n        return FS.unlinkSync(path);\r\n    }\r\n\r\n    /**\r\n     * Gets the correct fle path based on the file name (without extension)\r\n     * @param {string} fileName - The name of the file\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @private\r\n     */\r\n    static __getPath(fileName) {\r\n        // Combine the escaped file with the settings path and add th json extension\r\n        return Path.join(dataDir, fileName) + \".json\";\r\n    }\r\n\r\n    /**\r\n     * Gets the path for the specified pattern (only accessible in main)\r\n     * @param {(requestPathPattern|string)} requestPathPattern - The pattern to get the path for\r\n     * @returns {string} The file path for the settings of the pattern\r\n     * @private\r\n     */\r\n    static __getPatternPath(requestPathPattern) {\r\n        if (isMain) {\r\n            // Get the file UUID\r\n            const UUID = this.__getPathPatternUUID(requestPathPattern);\r\n\r\n            // Get the path to the file with this UUID\r\n            return this.__getUUIDpath(UUID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the path for the specified UUID\r\n     * @param {string} UUID - The UUID that you want to get the file for\r\n     * @returns {string} The file path for the settings of the UUID\r\n     * @private\r\n     */\r\n    static __getUUIDpath(UUID) {\r\n        return this.__getPath(Path.join(\"moduleSettings\", UUID));\r\n    }\r\n\r\n    // /**\r\n    //  * Gets the contents of a file corresponding to a specific requestPath\r\n    //  * @param {RequestPath} requestPath - The path for which to get a file\r\n    //  * @returns {Object} The data that was retrieved from the file\r\n    //  * @protected\r\n    //  */\r\n    // static _getModuleFile(requestPath) {\r\n    //     // Get the data from the combined escaped request path and the settings path\r\n    //     return this.__getFile(\r\n    //         Path.join(dataDir, escapePath(requestPath.toString())) + \".json\"\r\n    //     );\r\n    // }\r\n\r\n    // Methods for interfacing with the settings\r\n    /**\r\n     * Gets the location from the settings for a module with the specified path (only accessible in main)\r\n     * @param {(RequestPath|string)} requestPath - The path to find the location for\r\n     * @returns {object} The location of the module\r\n     * @protected\r\n     */\r\n    static _getModuleLocation(requestPath) {\r\n        if (isMain) {\r\n            // Normalize the requestPathPattern\r\n            if (typeof requestPath == \"string\")\r\n                requestPath = new RequestPath(requestPath);\r\n\r\n            // Get the module that this path would lead to\r\n            const modulePath = requestPath.getModuleID().module;\r\n\r\n            // Check if there are UUIDs for this end point\r\n            const patternsData = this.pathPatternUUIDs[modulePath];\r\n            if (patternsData) {\r\n                // Check what patterns match this path\r\n                const patterns = Object.keys(patternsData).filter(pattern =>\r\n                    new RequestPathPattern(pattern).test(requestPath)\r\n                );\r\n\r\n                // Sort the patterns on priority\r\n                patterns.sort((a, b) => a.comparePriority(b));\r\n\r\n                // Go through the patterns in order of priority untill a lcoatin could be found\r\n                while (patterns.length > 0) {\r\n                    const pattern = patterns.pop();\r\n\r\n                    // Check if the data is already loaded\r\n                    let data = GlobalDataHandler._getData(\r\n                        prefix + pattern.toString()\r\n                    );\r\n\r\n                    // If the data isn't yet loaded, load it locally\r\n                    if (!data)\r\n                        data = this.__getFile(this.__getPatternPath(pattern));\r\n\r\n                    // Check if the data contains a location, if so, return it\r\n                    if (data && data.location) return data.location;\r\n                }\r\n            }\r\n\r\n            // If no data could be found return some default\r\n            return {\r\n                window: 1,\r\n                section: 1,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        if (isMain) {\r\n            // Listen for settings save events\r\n            IPC.on(\"Settings.save\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n                const isModuleFile = event.data.isModuleFile;\r\n\r\n                // Retrieve the data to save\r\n                const instance = GlobalDataHandler._getData(ID);\r\n                if (instance) {\r\n                    // Check if this data should be saved as module data\r\n                    if (isModuleFile) {\r\n                        let UUID = this.__getPathPatternUUID(fileName);\r\n\r\n                        // Check if the settings coontain information\r\n                        if (Object.keys(instance).length > 0) {\r\n                            // If there is no UUID yet, store one\r\n                            if (!UUID) {\r\n                                UUID = this.__generateUUID();\r\n                                this.__setPathPatternUUID(fileName, UUID);\r\n\r\n                                // Store the updated patterns\r\n                                this.__storePathPatternUUIDS();\r\n                            }\r\n\r\n                            // Store the data\r\n                            this.__setFile(this.__getUUIDpath(UUID), instance);\r\n                        } else if (UUID) {\r\n                            // Make sure the UUID is removed from the files\r\n                            this.__setPathPatternUUID(fileName, undefined);\r\n\r\n                            // Delete the file at the current UUID\r\n                            this.__deleteFile(this.__getUUIDpath(UUID));\r\n\r\n                            // Store the updated patterns\r\n                            this.__storePathPatternUUIDS();\r\n                        }\r\n                    } else {\r\n                        // Save the data in the correct file\r\n                        return this.__setFile(\r\n                            this.__getPath(fileName),\r\n                            instance\r\n                        );\r\n                    }\r\n                }\r\n\r\n                // Return false if there was no data to save\r\n                return false;\r\n            });\r\n\r\n            // Listen for settings reload events\r\n            IPC.on(\"Settings.reload\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                // Retrieve both the saved and currently loaded data\r\n                const instance = GlobalDataHandler._getData(ID);\r\n                const data = this.__getFile(this.__getPath(fileName));\r\n\r\n                // Check if both are present\r\n                if (instance && data) {\r\n                    // Set undefined fields literally to undefined such that they will be deleted\r\n                    Object.keys(instance).forEach(field => {\r\n                        if (data[field] === undefined) data[field] = undefined;\r\n                    });\r\n\r\n                    // Change all the data\r\n                    GlobalDataHandler._changeField(ID, instance, data, \"\");\r\n                    return data;\r\n                }\r\n\r\n                // If either the current data or saved data is absent, return false\r\n                return false;\r\n            });\r\n\r\n            // Add dedicated retrieve method that checks if data is stored in a file first\r\n            IPC.on(\"Settings.retrieve\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n                const isModuleFile = event.data.isModuleFile;\r\n\r\n                //  Check if global data for these settings is already loaded\r\n                if (!GlobalDataHandler._getData(ID)) {\r\n                    // Check if there is any saved data\r\n                    let data;\r\n                    if (isModuleFile) {\r\n                        // Get the data from a module file\r\n                        const UUID = this.__getPathPatternUUID(fileName);\r\n                        if (UUID)\r\n                            data = this.__getFile(this.__getUUIDpath(UUID));\r\n                    } else {\r\n                        // Get the data from a general settings file\r\n                        data = this.__getFile(this.__getPath(fileName));\r\n                    }\r\n\r\n                    // If it isn't already loaded, try to retrieve it from the file\r\n                    if (data) {\r\n                        // If the file contained data, load this data\r\n                        GlobalDataHandler._setData(ID, data);\r\n                    } else {\r\n                        // If the file contained no data, load the default data\r\n                        GlobalDataHandler._setData(ID, event.data.defaultData);\r\n                    }\r\n                }\r\n\r\n                // Return the stored data for these settings\r\n                return GlobalDataHandler._getData(ID);\r\n            });\r\n\r\n            // Load initial UUIDs\r\n            this.__loadPathPatternUUIDS();\r\n        }\r\n    }\r\n}\r\nSettingsHandler.__setup();\r\n\r\n// TODO: remove, just for testing\r\ntry {\r\n    window.SettingsHandler = SettingsHandler;\r\n} catch (e) {}\r\n"]}