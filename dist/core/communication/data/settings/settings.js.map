{"version":3,"sources":["../../../../../src/core/communication/data/settings/settings.js"],"names":["Settings","GlobalData","constructor","ID","fileName","dispose","dontSave","save","IPC","send","reload"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAEe,MAAMA,QAAN,SAAuBC,oBAAvB,CAAkC;AAC7C;;;;;;;;AAQAC,gBAAYC,EAAZ,EAAgBC,QAAhB,EAA0B;AACtB,cAAMD,EAAN;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAED;;;;;;AAMAC,YAAQC,QAAR,EAAkB;AACd;AACA,YAAI,CAACA,QAAL,EAAe,KAAKC,IAAL;;AAEf,eAAO,MAAMF,OAAN,EAAP;AACH;;AAED;;;;;;AAMAE,WAAO;AACH;AACA,eAAOC,cAAIC,IAAJ,CAAS,eAAT,EAA0B;AAC7BN,gBAAI,KAAKA,EADoB;AAE7BC,sBAAU,KAAKA;AAFc,SAA1B,CAAP;AAIH;;AAED;;;;;;AAMAM,aAAS;AACL;AACA,eAAOF,cAAIC,IAAJ,CAAS,iBAAT,EAA4B;AAC/BN,gBAAI,KAAKA,EADsB;AAE/BC,sBAAU,KAAKA;AAFgB,SAA5B,CAAP;AAIH;AArD4C;kBAA5BJ,Q","file":"settings.js","sourcesContent":["import IPC from \"../../IPC\";\r\nimport GlobalData from \"../globalData/globalData\";\r\n\r\nexport default class Settings extends GlobalData {\r\n    /**\r\n     * Create a new globalData object allowing you to share data between different modules\r\n     * @constructs Settings\r\n     * @hideconstructor\r\n     * @param {string} ID - The ID of the settings to synchronise with\r\n     * @param {string} fileName - The file name in which to save the settings\r\n     * @extends GlobalData\r\n     */\r\n    constructor(ID, fileName) {\r\n        super(ID);\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    /**\r\n     * Gets rid of all connected data such that the object is safely removed and saves the data in the file\r\n     * @param {boolean} dontSave - Whether to not save the file when disposing\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    dispose(dontSave) {\r\n        // By default save the data on exit\r\n        if (!dontSave) this.save();\r\n\r\n        return super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Saves the data in the specified file\r\n     * @returns {undefined}\r\n     * @async\r\n     * @public\r\n     */\r\n    save() {\r\n        // Send a request to the Settings Handler to save this data\r\n        return IPC.send(\"Settings.save\", {\r\n            ID: this.ID,\r\n            fileName: this.fileName,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reloads the data from the specified file\r\n     * @returns {undefined}\r\n     * @async\r\n     * @public\r\n     */\r\n    reload() {\r\n        // Send a request to the Settings Handler to reload this data\r\n        return IPC.send(\"Settings.reload\", {\r\n            ID: this.ID,\r\n            fileName: this.fileName,\r\n        });\r\n    }\r\n}\r\n"]}