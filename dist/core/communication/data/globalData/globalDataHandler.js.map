{"version":3,"sources":["../../../../../src/core/communication/data/globalData/globalDataHandler.js"],"names":["GlobalDataHandler","create","ID","defaultData","data","IPC","send","globalData","GlobalData","_setData","globalDataInstances","_getData","_changeField","currentData","newData","path","__proto__","Object","prototype","key","newValue","undefined","length","type","value","__setup","isMain","on","event","instance"],"mappings":"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","file":"globalDataHandler.js","sourcesContent":["import isMain from \"../../../isMain\";\r\nimport IPC from \"../../IPC\";\r\nimport GlobalData from \"./globalData\";\r\n\r\n/**\r\n * @classdesc A static class that allows you to create global data which will be synchronised between modules\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class GlobalDataHandler {\r\n    /**\r\n     * Creates a new globalData instance\r\n     * @param {string} ID - The identifier of the globalData (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the globalData should contain if it hasn't been initialised yet\r\n     * @returns {GlobalData} The globalData instance\r\n     * @async\r\n     * @public\r\n     */\r\n    static async create(ID, defaultData) {\r\n        // Get the currently stored data for this ID from main, will be set to default if absent\r\n        const data = (await IPC.send(\r\n            \"GlobalData.retrieve\",\r\n            {\r\n                ID: ID,\r\n                defaultData: defaultData,\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Create a new global data instance\r\n        const globalData = new GlobalData(ID);\r\n\r\n        // Add the data retrieved from main to this instance\r\n        globalData._setData(data);\r\n\r\n        // Return the instance\r\n        return globalData;\r\n    }\r\n\r\n    /**\r\n     * Sets the data of a instance with a specific ID, without informing the channels\r\n     * @param {string} ID - The identifier of the globalData that this data belongs to\r\n     * @param {Object} data - The data to store\r\n     * @returns {undefined}\r\n     * @protected\r\n     */\r\n    static _setData(ID, data) {\r\n        if (this.globalDataInstances) this.globalDataInstances[ID] = data;\r\n    }\r\n\r\n    /**\r\n     * Gets the data of a instance with a specific ID\r\n     * @param {string} ID - The identifier of the globalData that this data belongs to\r\n     * @returns {Object} The data stored for a specific instance\r\n     * @protected\r\n     */\r\n    static _getData(ID) {\r\n        return this.globalDataInstances && this.globalDataInstances[ID];\r\n    }\r\n\r\n    /**\r\n     * Changes a field of for all instances of a specific globalData object\r\n     * @param {string} ID - The identifier of the globalData that this data belongs to\r\n     * @param {*} currentData - The data that is currently located at this path\r\n     * @param {*} newData - The data that we want to assign to this path\r\n     * @param {string} path - The path to assign the data to\r\n     * @returns {Object} The newly set data\r\n     * @protected\r\n     */\r\n    static _changeField(ID, currentData, newData, path) {\r\n        // Check if the old data is a plain js object\r\n        if (currentData && currentData.__proto__ == Object.prototype) {\r\n            // Check if the new data is a plain js object\r\n            if (newData && newData.__proto__ == Object.prototype) {\r\n                // If both old and new data are objects, go through the fields in the new data to replace the old data with\r\n                for (let key in newData) {\r\n                    // Retrieve what the new value should be\r\n                    const newValue = this._changeField(\r\n                        ID,\r\n                        currentData[key], // Get the field of the old data\r\n                        newData[key], // get the field of the new data\r\n                        path ? path + \".\" + key : key // Append the field to the path\r\n                    );\r\n\r\n                    // Check if the new value is undefined, if so, it should be deleted. Otherwise it should simply be stored\r\n                    if (newValue === undefined) {\r\n                        delete currentData[key];\r\n                    } else {\r\n                        currentData[key] = newValue;\r\n                    }\r\n                }\r\n\r\n                // Check whether the new object is empty\r\n                if (Object.keys(currentData).length == 0) {\r\n                    // If it is empty, it should be deleted\r\n                    IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                        type: \"delete\",\r\n                        path: path,\r\n                    });\r\n\r\n                    // Return undefined to indicate this object no longer exists\r\n                    return undefined;\r\n                }\r\n\r\n                // Return the now altered data\r\n                return currentData;\r\n            } else {\r\n                // If the new data is not an object, check if it is defined at all\r\n                if (newData === undefined) {\r\n                    // If it isn't defined, that means the object got deleted, no new value should be stored\r\n                    IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                        type: \"delete\",\r\n                        path: path,\r\n                    });\r\n                } else {\r\n                    // If it is defined, the object just got replaced by another value type, so broardcast the change\r\n                    IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                        type: \"change\",\r\n                        path: path,\r\n                        value: newData,\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            // check if the new data is defined at all\r\n            if (newData === undefined) {\r\n                // If not, that means the object got deleted, no new value should be stored\r\n                IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                    type: \"delete\",\r\n                    path: path,\r\n                });\r\n\r\n                // Check if the new data is a plain js object\r\n            } else if (newData && newData.__proto__ == Object.prototype) {\r\n                // If the new data is an object, send out an event indicating that the new value should be a plain js object\r\n                // Either give it a create event type if there was no previous value, or change type if there was\r\n                IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                    type: currentData ? \"change\" : \"create\",\r\n                    path: path,\r\n                    value: {},\r\n                });\r\n\r\n                // Go through all the fields in the new data and send events for each\r\n                for (let key in newData)\r\n                    this._changeField(\r\n                        ID,\r\n                        undefined,\r\n                        newData[key],\r\n                        path ? path + \".\" + key : key\r\n                    );\r\n            } else {\r\n                // If the new data is just a regular value, send out an event indicating what the new value should be\r\n                // Either give it a create event type if there was no previous value, or change type if there was\r\n                IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                    type: currentData ? \"change\" : \"create\",\r\n                    path: path,\r\n                    value: newData,\r\n                });\r\n            }\r\n        }\r\n\r\n        // By default return the new data to be stored\r\n        return newData;\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        if (isMain) {\r\n            // Store all the correct global data in a single place in main:\r\n            this.globalDataInstances = {};\r\n\r\n            // Listen for data change events\r\n            IPC.on(\"GlobalData.change\", event => {\r\n                // Retrieve the globalData currently stored\r\n                const data = event.data;\r\n                const instance = this.globalDataInstances[data.ID];\r\n\r\n                // If there is any, change the root 'field' to the new data\r\n                if (instance)\r\n                    return this._changeField(data.ID, instance, data.data, \"\");\r\n\r\n                // Return false if there was no current data\r\n                return false;\r\n            });\r\n\r\n            // Listen for global data being requested\r\n            IPC.on(\"GlobalData.retrieve\", event => {\r\n                // Check if an instance of this global data already exists, if not created it\r\n                if (!this._getData(event.data.ID))\r\n                    this._setData(event.data.ID, event.data.defaultData);\r\n\r\n                // Return the instance of this global data\r\n                return this._getData(event.data.ID);\r\n            });\r\n        }\r\n    }\r\n}\r\nGlobalDataHandler.__setup();\r\n"]}