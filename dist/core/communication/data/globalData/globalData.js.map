{"version":3,"sources":["../../../../../src/core/communication/data/globalData/globalData.js"],"names":["GlobalData","constructor","ID","dataListener","event","data","__setField","path","value","type","IPC","on","listeners","getID","change","send","get","pathParts","split","field","shift","length","listener","index","indexOf","push","off","splice","dispose","_setData","pop","join","curValue","__emitEvent","previousValue","fullPath","allData","subPath","forEach","call"],"mappings":"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","file":"globalData.js","sourcesContent":["import IPC from \"../../IPC\";\r\nexport default class GlobalData {\r\n    /**\r\n     * Create a new globalData object allowing you to share data between different modules\r\n     * @constructs GlobalData\r\n     * @hideconstructor\r\n     * @param {string} ID - The ID of the global data to synchronise with\r\n     */\r\n    constructor(ID) {\r\n        this.ID = ID;\r\n\r\n        // The IPC listener that checks data change evens\r\n        this.dataListener = event => {\r\n            const data = event.data;\r\n            this.__setField(data.path, data.value, data.type);\r\n        };\r\n        IPC.on(\"GlobalData.notifyChange.\" + ID, this.dataListener);\r\n\r\n        // The outside event listeners that will be called when data changes\r\n        this.listeners = {};\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the data\r\n     * @returns {string} The ID of the data\r\n     * @public\r\n     */\r\n    getID() {\r\n        return this.ID;\r\n    }\r\n\r\n    /**\r\n     * Changes the data by providing an object with the field you want to alter,\r\n     * The value 'undefined' can be used to delete a field\r\n     * @param {Object} data - The object with the altered fields\r\n     * @returns {Object} The currently saved data after the alteration\r\n     * @async\r\n     * @public\r\n     */\r\n    change(data) {\r\n        // Send data to main and spread it around from there\r\n        return IPC.send(\"GlobalData.change\", {\r\n            ID: this.ID,\r\n            data: data,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a specific property by specifying the path to said property\r\n     * @param {string} [path=\"\"] - The path to the property\r\n     * @returns {*} The data saved under the specified path\r\n     * @public\r\n     */\r\n    get(path = \"\") {\r\n        // Get field list from the path\r\n        let pathParts = path.split(\".\");\r\n\r\n        // Define some variables to use in the loop\r\n        let data = this.data;\r\n        let field;\r\n\r\n        // Get the next field as long as there is a next field\r\n        while ((field = pathParts.shift()) && data && field.length > 0)\r\n            data = data[field];\r\n\r\n        // Return the retrieved data\r\n        return data;\r\n    }\r\n\r\n    //TODO: specify the callback once VScode works prooperly with @callback\r\n    /**\r\n     * Adds a listener to the object which will get invoked when data changes\r\n     * @param {('update'|'delete'|'create'|'change')} type - The event type to listen to (may be prefexid by path E.G. 'field.subField.update')\r\n     * @param {function} listener - The function to call once a property has been changed\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    on(type, listener) {\r\n        // Get the listeners list for this event type, or create if non-existent\r\n        let listeners = this.listeners[type];\r\n        if (!listeners) listeners = this.listeners[type] = [];\r\n\r\n        // Check if the listener is already added, and add it if it isn't\r\n        const index = listeners.indexOf(listener);\r\n        if (index == -1) listeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Removes a listener from the object which would have gotten invoked when data changes\r\n     * @param {('update'|'delete'|'create'|'change')} type - The event type that was listened to (may be prefexid by path E.G. 'field.subField.update')\r\n     * @param {function} listener - The function that was listening to said event type\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    off(type, listener) {\r\n        // Get the listeners list for this event type\r\n        const listeners = this.listeners[type];\r\n        if (listeners) {\r\n            // Check at what index this listener is stored, and remove said index\r\n            const index = listeners.indexOf(listener);\r\n            if (index != -1) listeners.splice(index, 1);\r\n\r\n            // If no more listeners exist, remove the list\r\n            if (listeners.length == 0) delete this.listeners[type];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets rid of all connected data such that the object is safely removed\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    dispose() {\r\n        // Remove the IPC listener\r\n        IPC.off(\"GlobalData.notifyChange.\" + ID, this.dataListener);\r\n    }\r\n\r\n    /**\r\n     * Sets the initial data of the object, without sending events to other instances\r\n     * @param {Object} data - The data to store in the instance\r\n     * @returns {undefined}\r\n     * @protected\r\n     */\r\n    _setData(data) {\r\n        this.data = data;\r\n    }\r\n\r\n    /**\r\n     * Alters a local field and sends out an event to all listeners\r\n     * @param {string} path - The path to the field to change\r\n     * @param {*} value - The new value to store in the field\r\n     * @param {('delete'|'create'|'change')} type - The event type to execute\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __setField(path, value, type) {\r\n        // Extract the field that was altered from the path\r\n        const pathParts = path.split(\".\");\r\n        const field = pathParts.pop();\r\n\r\n        // Get the object that contains the field\r\n        const data = this.get(pathParts.join(\".\"));\r\n        if (data) {\r\n            // Get the previous value\r\n            const curValue = data[field];\r\n\r\n            // Check if the event type was a deletion\r\n            if (type == \"delete\") {\r\n                // Delete the attribute\r\n                delete data[field];\r\n\r\n                // Send event to delete and update listeners\r\n                this.__emitEvent(type, path, {\r\n                    previousValue: curValue,\r\n                });\r\n                this.__emitEvent(\"update\", path, {\r\n                    type: \"delete\",\r\n                    previousValue: curValue,\r\n                });\r\n            } else {\r\n                // Set the field to the new value\r\n                data[field] = value;\r\n\r\n                // Send event to (change or create) and update listeners\r\n                this.__emitEvent(type, path, {\r\n                    value: value,\r\n                    previousValue: curValue,\r\n                });\r\n                this.__emitEvent(\"update\", path, {\r\n                    type: type,\r\n                    value: value,\r\n                    previousValue: curValue,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an event to the correct listeners with the correct data\r\n     * @param {('update'|'delete'|'create'|'change')} type - The type of event to emit\r\n     * @param {string} path - The path to the field for which to emit the event\r\n     * @param {Object} [event] - The event to emit\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __emitEvent(type, path, event) {\r\n        // Create the event object if left out\r\n        if (!event) event = {};\r\n\r\n        // Add the full path, allData and type to the event\r\n        event.fullPath = path;\r\n        if (!event.type) event.type = type;\r\n        event.allData = this.data;\r\n\r\n        // Get all fields of the path\r\n        const pathParts = path.split(\".\");\r\n        let subPath = \"\"; // The path that we are currently at\r\n\r\n        // Go through all fields\r\n        while (true) {\r\n            // Get the listeners for the event type and check if they exist\r\n            let listeners = this.listeners[subPath + type];\r\n            if (listeners) {\r\n                // Set the path of the event relative from the current location\r\n                event.path = pathParts.join(\".\");\r\n\r\n                // Send the event to all listeners\r\n                listeners.forEach(listener => {\r\n                    listener.call(this, Object.assign({}, event));\r\n                });\r\n            }\r\n\r\n            // Check if the path has any fields left, if not break the loop\r\n            if (pathParts.length == 0) break;\r\n\r\n            // Go to the next field\r\n            subPath += pathParts.shift() + \".\";\r\n        }\r\n    }\r\n}\r\n"]}