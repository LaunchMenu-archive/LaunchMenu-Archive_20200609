{"version":3,"sources":["../../../src/core/communication/extendedJSON.js"],"names":["pathSymbol","cleanSymbol","serializeSymbol","deserializeSymbol","ExtendedJSON","encode","object","encodeValue","path","Object","type","value","subType","__proto__","prototype","Array","key","ret","Module","module","getClass","modulePath","data","undefined","cleanupObject","encodedObject","decode","writeDecodedValue","parent","obj","split","shift","fieldKey","m","match","val","root","parse","string","JSON","stringify"],"mappings":"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","file":"extendedJSON.js","sourcesContent":["import Module from \"../registry/module\";\r\nvar pathSymbol = Symbol(\"path\");\r\nvar cleanSymbol = Symbol(\"clean\");\r\nvar serializeSymbol = Symbol(\"serialize\");\r\nvar deserializeSymbol = Symbol(\"deserialize\");\r\nexport default class ExtendedJSON{\r\n    /**\r\n     * Encode more complicated data into a serializable object\r\n     * @param  {Object} object The data you want to map\r\n     * @return {Object}        The object that represents your data as as serializable string\r\n     */\r\n    static encode(object){\r\n        /*\r\n            TODO:\r\n            -map recursive structures to none recursive structures\r\n            -map primitive values to strings\r\n            -map modules to their paths\r\n         */\r\n        var encodeValue = function(object, path){\r\n            if(object instanceof Object){ // Encode an object of data into the extended format\r\n                // If object is null, return null object in the extended format\r\n                if(!object)\r\n                    return {\r\n                        type: \"object\",\r\n                        value: null\r\n                    };\r\n\r\n                // If object has already been encoded, return a path instead (handles recursive structures)\r\n                if(object[pathSymbol]!=null)\r\n                    return {\r\n                        type: \"object\",\r\n                        subType: \"path\",\r\n                        value: object[pathSymbol]\r\n                    };\r\n\r\n                // If object is an array or plain js object, recurse on this object\r\n                if(object.__proto__==Object.prototype || object.__proto__==Array.prototype){\r\n                    // Indicate that this object is currently being handled, and prevent recusion\r\n                    object[pathSymbol] = path;\r\n\r\n                    // Go through all children and append their values to this value\r\n                    var value = {};\r\n                    for(var key in object)\r\n                        value[key] = encodeValue(object[key], path+\".\"+key);\r\n\r\n                    // Return either a plain js object type, or an array type\r\n                    var ret = {\r\n                        type: \"object\",\r\n                        value: value\r\n                    };\r\n                    if(object instanceof Array) ret.subType = \"array\";\r\n                    return ret;\r\n                }\r\n\r\n                // If object is a module and serializable, serialize it\r\n                if(object instanceof Module && object[serializeSymbol] && object[deserializeSymbol]){\r\n                    var module = object.getClass().modulePath;\r\n                    var data = object[serializeSymbol]();\r\n                    return {\r\n                        type: \"object\",\r\n                        subType: \"moduleInstance:\"+module,\r\n                        value: data\r\n                    };\r\n                }\r\n\r\n                // If object is a module class, return the path of the class\r\n                if(typeof(object)==\"function\" && object.modulePath)\r\n                    return {\r\n                        type: \"object\",\r\n                        subType: \"module:\"+object.modulePath,\r\n                        value: undefined\r\n                    };\r\n\r\n                // If none of the previous conditions apply, there is nothing left but ignore this value\r\n                return {\r\n                    type: \"undefined\",\r\n                    value: undefined\r\n                };\r\n            }else{ // Encode a primitive value in the extended format\r\n                var type = typeof(object);\r\n                return {\r\n                    type:type,\r\n                    value:object\r\n                };\r\n            }\r\n        }\r\n        var cleanupObject = function(object){\r\n            // Only clean the object if it really is an object, if it isn't already cleaned and if there is still something to clean\r\n            if(object instanceof Object && !object[cleanSymbol] && object[pathSymbol]!=null){\r\n                // Prevent recursion while cleaning the object\r\n                object[cleanSymbol] = true;\r\n\r\n                // Remove the path if it is present\r\n                if(object[pathSymbol]!=null)\r\n                    delete object[pathSymbol];\r\n\r\n                // If no path is present, recurse on its children\r\n                for(var key in object)\r\n                    cleanupObject(object[key]);\r\n\r\n                // Remove the cleanSymbol which prevent recursion\r\n                delete object[cleanSymbol];\r\n            }\r\n        };\r\n\r\n        // Encode data\r\n        var encodedObject = encodeValue(object, \"\");\r\n        // Remove data added to the original object during the process\r\n        cleanupObject(object);\r\n\r\n        // Return the encoded data\r\n        return encodedObject;\r\n    }\r\n    /**\r\n     * Decode the more complicated data that was encoded into a serializable object\r\n     * @param  {Object} object The data you want return into its source data\r\n     * @return {Object}        The source data in its format before encoding was applied\r\n     */\r\n    static decode(object){\r\n        /*\r\n            TODO:\r\n            -map none recursive structure representations to their recursive structures\r\n            -map primitive value strings representations to their value\r\n            -map module paths to their module\r\n         */\r\n        /*\r\n            TODO implement module decoding, properly comment everything\r\n         */\r\n        var writeDecodedValue = function(parent, key, value, obj){\r\n            if(value.type==\"object\"){\r\n                if(value.subType){\r\n                    if(value.subType==\"path\"){\r\n                        var path = value.value.split(\".\");\r\n                        path.shift();\r\n\r\n                        var fieldKey;\r\n                        while((fieldKey = path.shift()) && obj)\r\n                            obj = obj[fieldKey];\r\n\r\n                        parent[key] = obj;\r\n                        return;\r\n                    }\r\n\r\n                    var m;\r\n                    if(m = value.subType.match(/module\\:(.*)/)){\r\n\r\n                    }\r\n                    if(m = value.subType.match(/moduleInstance\\:(.*)/)){\r\n\r\n                    }\r\n                }\r\n\r\n                if(value.value==null){\r\n                    parent[key] = null;\r\n                    return;\r\n                }\r\n\r\n                var val = value.subType==\"array\"?[]:{};\r\n                parent[key] = val;\r\n                for(var fieldKey in value.value)\r\n                    writeDecodedValue(val, fieldKey, value.value[fieldKey], obj||val);\r\n                return;\r\n            }else{\r\n                parent[key] = value.value;\r\n                return;\r\n            }\r\n        };\r\n\r\n        var obj = {};\r\n        writeDecodedValue(obj, \"root\", object);\r\n        return obj.root;\r\n    }\r\n\r\n    /**\r\n     * Use ExtendedJSON to turn a string into an object just like JSON would\r\n     * @param  {String} string The string to translate back into an object\r\n     * @return {Object}        The source object that the string was made from\r\n     */\r\n    static parse(string){\r\n        return this.decode(JSON.parse(string));\r\n    }\r\n    /**\r\n     * Use ExtendedJSON to turn an object into a string just like JSON would\r\n     * @param  {Object} object The source object to turn into a string\r\n     * @return {String}        The string that the object was translated into\r\n     */\r\n    static stringify(object){\r\n        return JSON.stringify(this.encode(object));\r\n    }\r\n\r\n    /**\r\n     * Get the serializeSymbol to use as a function name in your own class, allowing said class to be serialized by ExtendedJSON\r\n     * @type {Symbol}\r\n     */\r\n    static get serializeSymbol(){\r\n        return serializeSymbol;\r\n    }\r\n    /**\r\n     * Get the deserializeSymbol to use as a function name in your own class, allowing said class to be deserialized by ExtendedJSON\r\n     * @type {[type]}\r\n     */\r\n    static get deserializeSymbol(){\r\n        return deserializeSymbol;\r\n    }\r\n}\r\n"]}