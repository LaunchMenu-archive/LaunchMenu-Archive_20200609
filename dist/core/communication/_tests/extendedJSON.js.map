{"version":3,"sources":["../../../../src/core/communication/_tests/extendedJSON.js"],"names":["process","sync","isWindow","IPC","on","event","send","data","expect","toBe","res","rej","setTimeout"],"mappings":";;;;;;;;;;;;AAAA;;;;AA+CA;;;;;;kBAEe,OAAMA,OAAN,EAAeC,IAAf,KAAsB;AACjC,QAAGC,QAAH,EAAY;AAAE;AACVC,sBAAIC,EAAJ,CAAO,SAAP,EAAkBC,SAAO;AACrBF,0BAAIG,IAAJ,CAAS,cAAT;AACH,SAFD;AAGH;AACD,QAAG,CAACJ,QAAJ,EAAa;AAAE;AACXC,sBAAIC,EAAJ,CAAO,cAAP,EAAuBC,SAAO;AAC1BF,0BAAIG,IAAJ,CAAS,eAAT,EAA0B,WAA1B;AACH,SAFD;AAGH;AACD,QAAGJ,QAAH,EAAY;AACRC,sBAAIC,EAAJ,CAAO,eAAP,EAAwBC,SAAO;AAC3BF,0BAAIG,IAAJ,CAAS,mBAAT,EAA8BD,MAAME,IAApC;AACH,SAFD;AAGH;AACD,QAAG,CAACL,QAAJ,EAAa;AACTC,sBAAIC,EAAJ,CAAO,mBAAP,EAA4BC,SAAO;AAC/BG,mBAAOH,MAAME,IAAb,EAAmBE,IAAnB,CAAwB,WAAxB;AACH,SAFD;AAGH;;AAED,UAAMR,MAAN;;AAEA,QAAG,CAACC,QAAJ,EAAa;AACT;AACAC,sBAAIG,IAAJ,CAAS,SAAT;AACH;;AAED,UAAM,sBAAY,CAACI,GAAD,EAAMC,GAAN,KAAY;AAC1BC,mBAAWF,GAAX,EAAgB,IAAhB;AACH,KAFK,CAAN;AAGH,C;;AA/ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"extendedJSON.js","sourcesContent":["import ExtendedJSON from \"../extendedJSON\";\r\n\r\n// // Test if recursive structures are properly turned into strings and back\r\n// describe(\"ExtendedJSON: \", ()=>{\r\n//     describe(\"Recursive structures\", ()=>{\r\n//         // Create an object to test with\r\n//         const srcObject = {\r\n//             f: \"field\",\r\n//             obj1: {\r\n//                 f: \"field\",\r\n//                 obj2: {\r\n//                     obj3: {\r\n//                         obj2copy: null // Will be copied afterwards\r\n//                     }\r\n//                 }\r\n//             },\r\n//             obj2copy: null // Will be copied afterards\r\n//         }\r\n//         srcObject.obj1.obj2.obj3.obj2copy = srcObject.obj1.obj2;\r\n//         srcObject.obj2copy = srcObject.obj1.obj2;\r\n//\r\n//         // Stringify the object\r\n//         const stringObject = ExtendedJSON.stringify(srcObject);\r\n//\r\n//         it(\"should be serializable to data to a string\", ()=>{\r\n//             expect(typeof(stringObject)).toBe(\"number\");\r\n//         });\r\n//         // t.true(typeof(stringObject)==\"string\", \"ExtendedJSON stringify didn't output a string\");\r\n//\r\n//         // Turn the string back into an object\r\n//         const destObject = ExtendedJSON.parse(stringObject);\r\n//\r\n//         // Test if the data copies are in tact\r\n//         it(\"should retain object references\", ()=>{\r\n//             expect(destObject.obj1.obj2.obj3.obj2copy==destObject.obj1.obj2).toBe(true);\r\n//             expect(destObject.obj2copy==destObject.obj1.obj2).toBe(true);\r\n//         });\r\n//         // t.true(destObject.obj1.obj2.obj3.obj2copy==destObject.obj1.obj2, \"ExtendedJSON didn't retain the circular structure\");\r\n//         // t.true(destObject.obj2copy==destObject.obj1.obj2, \"ExtendedJSON didn't retain the copied object\");\r\n//\r\n//         // Test if the destObject and srcObject are identical\r\n//         it(\"should be serializable and reverseable\", ()=>{\r\n//             expect(srcObject).toEqual(destObject);\r\n//         });\r\n//         // t.deepEqual(srcObject, destObject, \"ExtendedJSON didn't successfully convert object to string and back\");\r\n//     });\r\n// });\r\nimport IPC from \"../IPC\";\r\n\r\nexport default async(process, sync)=>{\r\n    if(isWindow){ // Client side\r\n        IPC.on(\"message\", event=>{\r\n            IPC.send(\"message back\");\r\n        });\r\n    }\r\n    if(!isWindow){ // Server side\r\n        IPC.on(\"message back\", event=>{\r\n            IPC.send(\"some callback\", \"some data\");\r\n        });\r\n    }\r\n    if(isWindow){\r\n        IPC.on(\"some callback\", event=>{\r\n            IPC.send(\"callback response\", event.data);\r\n        });\r\n    }\r\n    if(!isWindow){\r\n        IPC.on(\"callback response\", event=>{\r\n            expect(event.data).toBe(\"some data\");\r\n        });\r\n    }\r\n\r\n    await sync();\r\n\r\n    if(!isWindow){\r\n        // Invoke first client side listener\r\n        IPC.send(\"message\");\r\n    }\r\n\r\n    await new Promise((res, rej)=>{\r\n        setTimeout(res, 5000);\r\n    });\r\n}\r\n"]}