{"version":3,"sources":["../../../../src/core/communication/channel/channelHandler.js"],"names":["ChannelHandler","createSender","ID","subChannelID","senderID","ChannelSender","_setupMethods","createReceiver","listeners","resolve","ChannelReceiver"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;;AAKe,MAAMA,cAAN,CAAqB;AAChC;;;;;;;;;AASA,SAAOC,YAAP,CAAoBC,EAApB,EAAwBC,YAAxB,EAAsCC,QAAtC,EAAgD;AAC5C,WAAO,IAAIC,uBAAJ,CAAkBH,EAAlB,EAAsBC,YAAtB,EAAoCC,QAApC,EAA8CE,aAA9C,EAAP;AACH;AACD;;;;;;;;AAQA,SAAOC,cAAP,CAAsBL,EAAtB,EAA0BM,SAA1B,EAAqC;AACjC,WAAO,kBAAQC,OAAR,CAAgB,IAAIC,yBAAJ,CAAoBR,EAApB,EAAwBM,SAAxB,CAAhB,CAAP;AACH;AAvB+B;kBAAfR,c","file":"channelHandler.js","sourcesContent":["import ChannelReceiver from \"./ChannelReceiver\";\r\nimport ChannelSender from \"./ChannelSender\";\r\n\r\n/**\r\n * @classdesc The public class to create channel senders and recievers, as the creation of a channel sender is asynchronous\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class ChannelHandler {\r\n    /**\r\n     * Create a new channel sender, allowing to send messages to the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {string} subChannelID - The subChannelID that will be used to access special subchannel methods\r\n     * @param {string} senderID - An ID that the reciever of this channel can respond to (can be left out)\r\n     * @returns {Promise<ChannelSender>} An instance of the ChannelSender class\r\n     * @public\r\n     * @async\r\n     */\r\n    static createSender(ID, subChannelID, senderID) {\r\n        return new ChannelSender(ID, subChannelID, senderID)._setupMethods();\r\n    }\r\n    /**\r\n     * Create a new channel reciever, allowing to recieve messages from the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @returns {Promise<ChannelReceiver>} An instance of the ChannelReceiver class\r\n     * @public\r\n     * @async\r\n     */\r\n    static createReceiver(ID, listeners) {\r\n        return Promise.resolve(new ChannelReceiver(ID, listeners));\r\n    }\r\n}\r\n"]}