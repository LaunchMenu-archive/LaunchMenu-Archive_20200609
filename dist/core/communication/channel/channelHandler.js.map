{"version":3,"sources":["../../../../src/core/communication/channel/channelHandler.js"],"names":["ChannelHandler","createSender","ID","subChannelID","senderID","sender","ChannelSender","_setupMethods","createReceiver","listeners","resolve","ChannelReceiver"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;;;;;;AAOA;;;;;AAKe,MAAMA,cAAN,CAAqB;AAChC;;;;;;;;;AASA,WAAOC,YAAP,CAAoBC,EAApB,EAAwBC,YAAxB,EAAsCC,QAAtC,EAAgD;AAC5C,YAAIC,MAAJ;;AAEA;AACA,YAAIH,GAAGA,EAAP,EAAW;AACP;AACAG,qBAAS,IAAIC,uBAAJ,CAAkBJ,GAAGA,EAArB,EAAyBA,GAAGC,YAA5B,EAA0CD,GAAGE,QAA7C,CAAT;AACH,SAHD,MAGO;AACH;AACAC,qBAAS,IAAIC,uBAAJ,CAAkBJ,EAAlB,EAAsBC,YAAtB,EAAoCC,QAApC,CAAT;AACH;;AAED;AACA,eAAOC,OAAOE,aAAP,EAAP;AACH;;AAED;;;;;;;;AAQA,WAAOC,cAAP,CAAsBN,EAAtB,EAA0BO,SAA1B,EAAqC;AACjC,eAAO,kBAAQC,OAAR,CAAgB,IAAIC,yBAAJ,CAAoBT,EAApB,EAAwBO,SAAxB,CAAhB,CAAP;AACH;AApC+B;kBAAfT,c","file":"channelHandler.js","sourcesContent":["import ChannelReceiver from \"./ChannelReceiver\";\r\nimport ChannelSender from \"./ChannelSender\";\r\n\r\n/**\r\n * @typedef {Object} ChannelHander~ChannelIdentifier\r\n * @property {string} ID - The unique identifier for the channel, or all the 3 channel fields in 1 object\r\n * @property {string} subChannelID - The subChannelID that will be used to access special subchannel methods\r\n * @property {string} [senderID] - An ID that the reciever of this channel can respond to\r\n */\r\n\r\n/**\r\n * @classdesc The public class to create channel senders and recievers, as the creation of a channel sender is asynchronous\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class ChannelHandler {\r\n    /**\r\n     * Create a new channel sender, allowing to send messages to the channel\r\n     * @param {(string|ChannelHander~ChannelIdentifier)} ID - The unique identifier for the channel, or all data at once\r\n     * @param {string} subChannelID - The subChannelID that will be used to access special subchannel methods\r\n     * @param {string} [senderID] - An ID that the reciever of this channel can respond to\r\n     * @returns {Promise<ChannelSender>} An instance of the ChannelSender class\r\n     * @public\r\n     * @async\r\n     */\r\n    static createSender(ID, subChannelID, senderID) {\r\n        let sender;\r\n\r\n        // Check if 'ID' is really ChannelIdentifier\r\n        if (ID.ID) {\r\n            // If so use the paramaters of it\r\n            sender = new ChannelSender(ID.ID, ID.subChannelID, ID.senderID);\r\n        } else {\r\n            // Otherwise just use the 3 parameters as fields\r\n            sender = new ChannelSender(ID, subChannelID, senderID);\r\n        }\r\n\r\n        // Return the result of the method setup\r\n        return sender._setupMethods();\r\n    }\r\n\r\n    /**\r\n     * Create a new channel reciever, allowing to recieve messages from the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @returns {Promise<ChannelReceiver>} An instance of the ChannelReceiver class\r\n     * @public\r\n     * @async\r\n     */\r\n    static createReceiver(ID, listeners) {\r\n        return Promise.resolve(new ChannelReceiver(ID, listeners));\r\n    }\r\n}\r\n"]}