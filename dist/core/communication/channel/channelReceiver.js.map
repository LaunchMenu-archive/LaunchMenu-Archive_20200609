{"version":3,"sources":["../../../../src/core/communication/channel/channelReceiver.js"],"names":["ChannelReceiver","constructor","ID","listeners","globalListeners","subChannelListeners","IPClisteners","message","event","data","sender","senderID","subChannelID","__emitEvent","requestMessageTypes","__broadCastMessageTypes","sourceID","IPC","on","createSubChannel","deleteSubChannel","subChannel","getID","close","off","listener","call","processes","messageTypes","key","send"],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAEA;;;;;;AAMe,MAAMA,eAAN,CAAsB;AACjC;;;;;;;AAOAC,gBAAYC,EAAZ,EAAgBC,SAAhB,EAA2B;AACvB,aAAKD,EAAL,GAAUA,EAAV;;AAEA;AACA,aAAKE,eAAL,GAAuBD,SAAvB;AACA,aAAKE,mBAAL,GAA2B,EAA3B;;AAEA,aAAKC,YAAL,GAAoB;AAChB;AACAC,qBAASC,SAAS;AACd,oBAAIC,OAAOD,MAAMC,IAAjB;;AAEA;AACA,sBAAMC,SAASD,KAAKE,QAApB;AACA,sBAAMC,eAAeH,KAAKG,YAA1B;AACA,sBAAML,UAAUE,KAAKF,OAArB;AACAE,uBAAOA,KAAKA,IAAZ;;AAEA;AACA,uBAAO,KAAKI,WAAL,CACHN,OADG,EAEH;AACII,8BAAUD,MADd;AAEID,0BAAMA;AAFV,iBAFG,EAMHG,YANG,CAAP;AAQH,aApBe;AAqBhB;AACAE,iCAAqBN,SAAS;AAC1B,qBAAKO,uBAAL,CAA6BP,MAAMQ,QAAnC;AACH;AAxBe,SAApB;;AA2BA;AACAC,sBAAIC,EAAJ,CAAO,qBAAqBhB,EAA5B,EAAgC,KAAKI,YAAL,CAAkBC,OAAlD;AACAU,sBAAIC,EAAJ,CACI,iCAAiChB,EADrC,EAEI,KAAKI,YAAL,CAAkBQ,mBAFtB;;AAKA;AACA,aAAKC,uBAAL,CAA6B,GAA7B;AACH;AACD;;;;;;;AAOAI,qBAAiBjB,EAAjB,EAAqBC,SAArB,EAAgC;AAC5B,aAAKE,mBAAL,CAAyBH,EAAzB,IAA+BC,SAA/B;AACA,aAAKY,uBAAL,CAA6B,GAA7B;AACH;AACD;;;;;;AAMAK,qBAAiBlB,EAAjB,EAAqB;AACjB,eAAO,KAAKmB,UAAL,CAAgBnB,EAAhB,CAAP;AACH;AACD;;;;;AAKAoB,YAAQ;AACJ,eAAO,KAAKpB,EAAZ;AACH;;AAED;;;;;AAKAqB,YAAQ;AACJ;AACAN,sBAAIO,GAAJ,CAAQ,qBAAqB,KAAKtB,EAAlC,EAAsC,KAAKI,YAAL,CAAkBC,OAAxD;AACAU,sBAAIO,GAAJ,CACI,iCAAiC,KAAKtB,EAD1C,EAEI,KAAKI,YAAL,CAAkBQ,mBAFtB;AAIH;;AAED;;;;;;;;AAQAD,gBAAYN,OAAZ,EAAqBC,KAArB,EAA4BI,YAA5B,EAA0C;AACtC,YAAIA,YAAJ,EAAkB;AACd;AACA,kBAAMS,aAAa,KAAKhB,mBAAL,CAAyBO,YAAzB,CAAnB;AACA,kBAAMa,WAAWJ,cAAcA,WAAWd,OAAX,CAA/B;;AAEA;AACA,gBAAIkB,QAAJ,EAAc,OAAOA,SAASC,IAAT,CAAc,IAAd,EAAoBlB,KAApB,CAAP;AACjB;;AAED;AACA,cAAMiB,WAAW,KAAKrB,eAAL,CAAqBG,OAArB,CAAjB;;AAEA;AACA,YAAIkB,QAAJ,EAAc,OAAOA,SAASC,IAAT,CAAc,IAAd,EAAoBlB,KAApB,CAAP;AACjB;AACD;;;;;;AAMAO,4BAAwBY,YAAY,GAApC,EAAyC;AACrC;AACA,cAAMC,eAAe;AACjBxB,6BAAiB,oBAAY,KAAKA,eAAjB,CADA;AAEjBC,iCAAqB;AACjB;AADiB;AAFJ,SAArB;;AAOA;AACA,aAAK,IAAIwB,GAAT,IAAgB,KAAKxB,mBAArB,EACIuB,aAAavB,mBAAb,CAAiCwB,GAAjC,IAAwC,oBACpC,KAAKxB,mBAAL,CAAyBwB,GAAzB,CADoC,CAAxC;;AAIJ;AACAZ,sBAAIa,IAAJ,CACI,8BAA8B,KAAK5B,EADvC,EAEI0B,YAFJ,EAGID,SAHJ;AAKH;AAlJgC;kBAAhB3B,e","file":"channelReceiver.js","sourcesContent":["import IPC from \"../IPC\";\r\n\r\n/**\r\n * @typedef {object} ChannelReceiver~ChannelEvent\r\n * @property {number} senderID - The ID of the channel that sent the message\r\n * @property {*} data - The data that was sent with the event\r\n */\r\n\r\nexport default class ChannelReceiver {\r\n    /**\r\n     * Create a new channel reciever, allowing to recieve messages from the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @constructs ChannelReceiver\r\n     * @hideconstructor\r\n     */\r\n    constructor(ID, listeners) {\r\n        this.ID = ID;\r\n\r\n        // Create objects to store listeners\r\n        this.globalListeners = listeners;\r\n        this.subChannelListeners = {};\r\n\r\n        this.IPClisteners = {\r\n            // Forward IPC messages to channel listeners\r\n            message: event => {\r\n                let data = event.data;\r\n\r\n                // Extract the data to build the event to emit in this channel\r\n                const sender = data.senderID;\r\n                const subChannelID = data.subChannelID;\r\n                const message = data.message;\r\n                data = data.data;\r\n\r\n                // Emit the event\r\n                return this.__emitEvent(\r\n                    message,\r\n                    {\r\n                        senderID: sender,\r\n                        data: data,\r\n                    },\r\n                    subChannelID\r\n                );\r\n            },\r\n            // Send available message types on request\r\n            requestMessageTypes: event => {\r\n                this.__broadCastMessageTypes(event.sourceID);\r\n            },\r\n        };\r\n\r\n        // Set up the message listeners\r\n        IPC.on(\"channel.message:\" + ID, this.IPClisteners.message);\r\n        IPC.on(\r\n            \"channel.requestMessageTypes:\" + ID,\r\n            this.IPClisteners.requestMessageTypes\r\n        );\r\n\r\n        // Send available message types to all processes/renderers\r\n        this.__broadCastMessageTypes(\"*\");\r\n    }\r\n    /**\r\n     * Create a subchannel that can overwrite certain listeners on the channel, or add listeners just for the sub channel\r\n     * @param  {string} ID - The ID of the subchannel\r\n     * @param  {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    createSubChannel(ID, listeners) {\r\n        this.subChannelListeners[ID] = listeners;\r\n        this.__broadCastMessageTypes(\"*\");\r\n    }\r\n    /**\r\n     * Delete a subchannel\r\n     * @param  {string} ID - The subChannel to remove\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    deleteSubChannel(ID) {\r\n        delete this.subChannel[ID];\r\n    }\r\n    /**\r\n     * Get the channel ID\r\n     * @return {string} The channel ID\r\n     * @public\r\n     */\r\n    getID() {\r\n        return this.ID;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all data\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    close() {\r\n        // Clear the IPC listeners\r\n        IPC.off(\"channel.message:\" + this.ID, this.IPClisteners.message);\r\n        IPC.off(\r\n            \"channel.requestMessageTypes:\" + this.ID,\r\n            this.IPClisteners.requestMessageTypes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Emit an event to the registered listener\r\n     * @param  {string} message - The event type to invoke\r\n     * @param  {ChannelReceiver~ChannelEvent} event - The event data to pass to the listener\r\n     * @param  {(string|undefined)} subChannelID - The subchannel of which to take the listener if available\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __emitEvent(message, event, subChannelID) {\r\n        if (subChannelID) {\r\n            // Attempt to find message listeners on this subchannel\r\n            const subChannel = this.subChannelListeners[subChannelID];\r\n            const listener = subChannel && subChannel[message];\r\n\r\n            // If listeners exist, call them and don't invoke any global listeners\r\n            if (listener) return listener.call(this, event);\r\n        }\r\n\r\n        // Retrieve listeners\r\n        const listener = this.globalListeners[message];\r\n\r\n        // If listeners exist, call them\r\n        if (listener) return listener.call(this, event);\r\n    }\r\n    /**\r\n     * Broadcast all available message types to the specified processes/windows\r\n     * @param  {(string|string[])} [processes=\"*\"] The processes/windows to send the message types to\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __broadCastMessageTypes(processes = \"*\") {\r\n        // Create object to broadcast to the requesting renderer/process\r\n        const messageTypes = {\r\n            globalListeners: Object.keys(this.globalListeners),\r\n            subChannelListeners: {\r\n                // Will be filled by the for loop below\r\n            },\r\n        };\r\n\r\n        // Add all the subChannel\r\n        for (let key in this.subChannelListeners)\r\n            messageTypes.subChannelListeners[key] = Object.keys(\r\n                this.subChannelListeners[key]\r\n            );\r\n\r\n        // Broadcast the messages\r\n        IPC.send(\r\n            \"channel.sendMessageTypes:\" + this.ID,\r\n            messageTypes,\r\n            processes\r\n        );\r\n    }\r\n}\r\n"]}