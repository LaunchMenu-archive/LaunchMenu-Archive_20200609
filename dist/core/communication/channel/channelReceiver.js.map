{"version":3,"sources":["../../../../src/core/communication/channel/channelReceiver.js"],"names":["ChannelReceiver","constructor","ID","listeners","toString","globalListeners","subChannelListeners","IPClisteners","message","event","data","sender","senderID","subChannelID","_emitEvent","requestMessageTypes","__broadCastMessageTypes","sourceID","IPC","on","createSubChannel","deleteSubChannel","subChannel","getID","dispose","off","_hasListener","listenerName","listener","call","processes","messageTypes","_getMessageTypes","send","key","_broadCastProcessChange","_broadCastDisabled","disabled"],"mappings":"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","file":"channelReceiver.js","sourcesContent":["import IPC from \"../IPC\";\r\n\r\n/**\r\n * An object to store data of a sent message\r\n * @typedef {object} ChannelReceiver~ChannelEvent\r\n * @property {number} senderID - The ID of the channel that sent the message\r\n * @property {*} data - The data that was sent with the event\r\n */\r\n\r\nexport default class ChannelReceiver {\r\n    /**\r\n     * Create a new channel reciever, allowing to recieve messages from the channel\r\n     * @param {(string|RequestPath)} ID - The unique identifier for the channel\r\n     * @param {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @constructs ChannelReceiver\r\n     * @hideconstructor\r\n     */\r\n    constructor(ID, listeners) {\r\n        // Normalize the ID and store it\r\n        ID = ID.toString(true);\r\n        this.ID = ID;\r\n\r\n        // Create objects to store listeners\r\n        this.globalListeners = listeners;\r\n        this.subChannelListeners = {};\r\n\r\n        this.IPClisteners = {\r\n            // Forward IPC messages to channel listeners\r\n            message: event => {\r\n                let data = event.data;\r\n\r\n                // Extract the data to build the event to emit in this channel\r\n                const sender = data.senderID;\r\n                const subChannelID = data.subChannelID;\r\n                const message = data.message;\r\n                data = data.data;\r\n\r\n                // Emit the event\r\n                return this._emitEvent(\r\n                    message,\r\n                    {\r\n                        senderID: sender,\r\n                        data: data,\r\n                    },\r\n                    subChannelID\r\n                );\r\n            },\r\n            // Send available message types on request\r\n            requestMessageTypes: event => {\r\n                this.__broadCastMessageTypes(event.sourceID);\r\n            },\r\n        };\r\n\r\n        // Set up the message listeners\r\n        IPC.on(\"channel.message:\" + ID, this.IPClisteners.message);\r\n        IPC.on(\r\n            \"channel.requestMessageTypes:\" + ID,\r\n            this.IPClisteners.requestMessageTypes\r\n        );\r\n\r\n        // Send available message types to all processes/renderers\r\n        this.__broadCastMessageTypes(\"*\");\r\n    }\r\n    /**\r\n     * Create a subchannel that can overwrite certain listeners on the channel, or add listeners just for the sub channel\r\n     * @param  {string} ID - The ID of the subchannel\r\n     * @param  {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    createSubChannel(ID, listeners) {\r\n        this.subChannelListeners[ID] = listeners;\r\n        this.__broadCastMessageTypes(\"*\");\r\n    }\r\n\r\n    /**\r\n     * Delete a subchannel\r\n     * @param  {string} ID - The subChannel to remove\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    deleteSubChannel(ID) {\r\n        delete this.subChannel[ID];\r\n    }\r\n    /**\r\n     * Get the channel ID\r\n     * @return {string} The channel ID\r\n     * @public\r\n     */\r\n    getID() {\r\n        return this.ID;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all data\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    dispose() {\r\n        // Clear the IPC listeners\r\n        IPC.off(\"channel.message:\" + this.ID, this.IPClisteners.message);\r\n        IPC.off(\r\n            \"channel.requestMessageTypes:\" + this.ID,\r\n            this.IPClisteners.requestMessageTypes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns true if the receiver contains a listener with the given name\r\n     * @param {string} listenerName - The name of the listener to find\r\n     * @param  {(string|undefined)} [subChannelID] - The subchannel of which to take look for the listener\r\n     * @returns {boolean} Whether or not the receiver contains a listener by the passed name\r\n     * @protected\r\n     */\r\n    _hasListener(listenerName, subChannelID) {\r\n        if (subChannelID) {\r\n            // Attempt to find message listeners on this subchannel\r\n            const subChannel = this.subChannelListeners[subChannelID];\r\n            const listener = subChannel && subChannel[listenerName];\r\n\r\n            // If a listener was found, return true\r\n            if (listener) return true;\r\n        }\r\n\r\n        // Retrieve listeners\r\n        const listener = this.globalListeners[listenerName];\r\n\r\n        // Return whether or not such a listener exists\r\n        return !!listener;\r\n    }\r\n\r\n    /**\r\n     * Emit an event to the registered listener\r\n     * @param  {string} message - The event type to invoke\r\n     * @param  {ChannelReceiver~ChannelEvent} event - The event data to pass to the listener\r\n     * @param  {(string|undefined)} [subChannelID] - The subchannel of which to take the listener if available\r\n     * @returns {undefined}\r\n     * @protected\r\n     */\r\n    _emitEvent(message, event, subChannelID) {\r\n        if (subChannelID) {\r\n            // Attempt to find message listeners on this subchannel\r\n            const subChannel = this.subChannelListeners[subChannelID];\r\n            const listener = subChannel && subChannel[message];\r\n\r\n            // If listeners exist, call them and don't invoke any global listeners\r\n            if (listener) return listener.call(this, event);\r\n        }\r\n\r\n        // Retrieve listeners\r\n        const listener = this.globalListeners[message];\r\n\r\n        // If listeners exist, call them\r\n        if (listener) return listener.call(this, event);\r\n    }\r\n\r\n    // Methods to broadcast data to all the possible senders that exist for this receiver\r\n    /**\r\n     * Broadcasts all available message types to the specified processes/windows\r\n     * @param  {(string|string[])} [processes=\"*\"] The processes/windows to send the message types to\r\n     * @returns {undefined}\r\n     * @async\r\n     * @private\r\n     */\r\n    __broadCastMessageTypes(processes = \"*\") {\r\n        // Get the message types\r\n        const messageTypes = this._getMessageTypes();\r\n\r\n        // Broadcast the messages\r\n        return IPC.send(\r\n            \"channel.sendMessageTypes:\" + this.ID,\r\n            messageTypes,\r\n            processes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a single object with all available messages types\r\n     * @returns {Object} The object containing all the available message types\r\n     * @protected\r\n     */\r\n    _getMessageTypes() {\r\n        // Create object to broadcast to the requesting renderer/process\r\n        const messageTypes = {\r\n            globalListeners: Object.keys(this.globalListeners),\r\n            subChannelListeners: {\r\n                // Will be filled by the for loop below\r\n            },\r\n        };\r\n\r\n        // Add all the subChannel\r\n        for (let key in this.subChannelListeners)\r\n            messageTypes.subChannelListeners[key] = Object.keys(\r\n                this.subChannelListeners[key]\r\n            );\r\n\r\n        // Return the message types\r\n        return messageTypes;\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the new process ID that this receiver is in to the specified processes/windows\r\n     * @param  {(string|string[])} [processes=\"*\"] The processes/windows to send the new process location to\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    _broadCastProcessChange(processes = \"*\") {\r\n        // Get the process ID that this receiver is located in\r\n        const ID = IPC.getID();\r\n\r\n        // Broadcast the new process ID\r\n        return IPC.send(\"channel.sendProcessChange:\" + this.ID, ID, processes);\r\n    }\r\n\r\n    /**\r\n     * Broadcasts whether or not this receiver is disabled to the specified processes/windows\r\n     * @param {boolean} disabled - Whether or not the receiver is disabled\r\n     * @param  {(string|string[])} [processes=\"*\"] The processes/windows to send the state to\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    _broadCastDisabled(disabled, processes = \"*\") {\r\n        // Broadcast the state\r\n        return IPC.send(\"channel.sendDisabled:\" + this.ID, disabled, processes);\r\n    }\r\n}\r\n"]}