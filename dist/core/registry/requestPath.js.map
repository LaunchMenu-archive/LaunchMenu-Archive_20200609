{"version":3,"sources":["../../../src/core/registry/requestPath.js"],"names":["moduleSeperator","IDseperator","RequestPath","constructor","path","Array","toString","split","map","module","ID","Number","modules","unique","join","getSubPath","removeCount","requestPath","splice","length","augmentPath","getClass","getPath","push","getModuleID","index","undefined","getModulePath","parts","part"],"mappings":";;;;;;;;;AAAA;;;;;;AACA;;;;;;;AAOO,MAAMA,4CAAkB,IAAxB;AACA,MAAMC,oCAAc,GAApB;AACQ,MAAMC,WAAN,CAAkB;AAC7B;;;;;AAKAC,gBAAYC,IAAZ,EAAkB;AACd;AACA,YAAI,OAAOA,IAAP,IAAe,QAAf,IAA2B,EAAEA,gBAAgBC,KAAlB,CAA/B,EACID,OAAOA,KAAKE,QAAL,CAAc,IAAd,CAAP;;AAEJ;AACA,YAAI,OAAOF,IAAP,IAAe,QAAnB,EAA6B;AACzBA,mBAAOA,KAAKG,KAAL,CAAWP,eAAX,EAA4BQ,GAA5B,CAAgCC,UAAU;AAC7CA,yBAASA,OAAOF,KAAP,CAAaN,WAAb,CAAT;AACA,uBAAO;AACHQ,4BAAQA,OAAO,CAAP,CADL;AAEHC,wBAAIC,OAAOF,OAAO,CAAP,KAAa,CAApB;AAFD,iBAAP;AAIH,aANM,CAAP;AAOH;;AAED;AACA,aAAKG,OAAL,GAAeR,IAAf;AACH;;AAED;;;;;;AAMAE,aAASO,MAAT,EAAiB;AACb,eAAO,KAAKD,OAAL,CACFJ,GADE,CACEC,UAAU;AACX,gBAAII,MAAJ,EAAY,OAAOJ,OAAOA,MAAP,GAAgBR,WAAhB,GAA8BQ,OAAOC,EAA5C;AACZ,mBAAOD,OAAOA,MAAP,GAAgB,EAAvB;AACH,SAJE,EAKFK,IALE,CAKGd,eALH,CAAP;AAMH;;AAED;;;;;;AAMAe,eAAWC,WAAX,EAAwB;AACpB;AACA,cAAMC,cAAc,IAAIf,WAAJ,CAAgB,KAAKI,QAAL,CAAc,IAAd,CAAhB,CAApB;;AAEA;AACA,cAAMM,UAAUK,YAAYL,OAA5B;AACAA,gBAAQM,MAAR,CAAeN,QAAQO,MAAR,GAAiBH,WAAhC,EAA6CA,WAA7C;;AAEA;AACA,eAAOC,WAAP;AACH;;AAED;;;;;;;AAOAG,gBAAYX,MAAZ,EAAoBC,EAApB,EAAwB;AACpB;AACA,YAAID,OAAOY,QAAX,EAAqBZ,SAASA,OAAOY,QAAP,EAAT;AACrB,YAAI,OAAOZ,MAAP,IAAiB,QAArB,EAA+BA,SAASA,OAAOa,OAAP,EAAT;;AAE/B;AACA,cAAML,cAAc,IAAIf,WAAJ,CAAgB,KAAKI,QAAL,CAAc,IAAd,CAAhB,CAApB;;AAEA;AACAW,oBAAYL,OAAZ,CAAoBW,IAApB,CAAyB;AACrBd,oBAAQA,MADa;AAErBC,gBAAIC,OAAOD,MAAM,CAAb;AAFiB,SAAzB;;AAKA;AACA,eAAOO,WAAP;AACH;;AAED;;;;;;AAMAO,gBAAYC,KAAZ,EAAmB;AACf;AACA,YAAIA,SAASC,SAAb,EAAwBD,QAAQ,KAAKb,OAAL,CAAaO,MAAb,GAAsB,CAA9B;;AAExB;AACA,eAAO,KAAKP,OAAL,CAAaa,KAAb,CAAP;AACH;;AAED;;;;;;;AAOA,WAAOE,aAAP,CAAqBV,WAArB,EAAkCQ,QAAQ,CAAC,CAA3C,EAA8C;AAC1C;AACA,YAAI,OAAOR,WAAP,IAAsB,QAA1B,EACIA,cAAcA,YAAYX,QAAZ,EAAd;;AAEJ;AACA,cAAMsB,QAAQX,YAAYV,KAAZ,CAAkBP,eAAlB,CAAd;;AAEA;AACA,cAAM6B,OAAOD,MAAMH,QAAQG,MAAMT,MAApB,CAAb;;AAEA;AACA,eAAOU,KAAKtB,KAAL,CAAWN,WAAX,EAAwB,CAAxB,CAAP;AACH;AAtH4B;kBAAZC,W","file":"requestPath.js","sourcesContent":["import Module from \"./module\";\r\n/**\r\n * An identifier for a module, where ID make sure that the request path with all IDs left out except for this one, would be unique.\r\n * @typedef {Object} RequestPath~ModuleID\r\n * @property {string} module - The path to the module class\r\n * @property {number} ID - The unique ID of the module instance\r\n */\r\n\r\nexport const moduleSeperator = \"->\";\r\nexport const IDseperator = \":\";\r\nexport default class RequestPath {\r\n    /**\r\n     * Create a request path that can be used to uniquely identifying module instances\r\n     * @param {(string|RequestPath|Array)} path - The string representation of the request path\r\n     * @constructs RequestPath\r\n     */\r\n    constructor(path) {\r\n        // Stringify the path if it is of unknown form (requestPath?)\r\n        if (typeof path != \"string\" && !(path instanceof Array))\r\n            path = path.toString(true);\r\n\r\n        // Extract the moduleIDs if the path is a string\r\n        if (typeof path == \"string\") {\r\n            path = path.split(moduleSeperator).map(module => {\r\n                module = module.split(IDseperator);\r\n                return {\r\n                    module: module[0],\r\n                    ID: Number(module[1] || 0),\r\n                };\r\n            });\r\n        }\r\n\r\n        // Store the moduleID array\r\n        this.modules = path;\r\n    }\r\n\r\n    /**\r\n     * Gets the string representation of this path\r\n     * @param {boolean} unique - Whether or not to include the unique ID of each module instance\r\n     * @returns {string} The string representation of this request path\r\n     * @public\r\n     */\r\n    toString(unique) {\r\n        return this.modules\r\n            .map(module => {\r\n                if (unique) return module.module + IDseperator + module.ID;\r\n                return module.module + \"\";\r\n            })\r\n            .join(moduleSeperator);\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of RequestPath with the last n modules removed\r\n     * @param {number} removeCount - The number of modules to remove\r\n     * @returns {RequestPath} The newly created request path\r\n     * @public\r\n     */\r\n    getSubPath(removeCount) {\r\n        // Create a copy of this request path\r\n        const requestPath = new RequestPath(this.toString(true));\r\n\r\n        // Remove n of the last modules in the path\r\n        const modules = requestPath.modules;\r\n        modules.splice(modules.length - removeCount, removeCount);\r\n\r\n        // Return the new request path\r\n        return requestPath;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of RequestPath with a new module added\r\n     * @param {(Module|string)} module - The module to append to the path\r\n     * @param {number} ID - The unique ID of the module that is added\r\n     * @returns {RequestPath} The newly created request path\r\n     * @public\r\n     */\r\n    augmentPath(module, ID) {\r\n        // Make sure the module is a string of the module class path\r\n        if (module.getClass) module = module.getClass();\r\n        if (typeof module != \"string\") module = module.getPath();\r\n\r\n        // Create a copy of the request path\r\n        const requestPath = new RequestPath(this.toString(true));\r\n\r\n        // Append a moduleID to thie modules of this request path\r\n        requestPath.modules.push({\r\n            module: module,\r\n            ID: Number(ID || 0),\r\n        });\r\n\r\n        // Return the new request path\r\n        return requestPath;\r\n    }\r\n\r\n    /**\r\n     * Returns the moduleID at a specific index\r\n     * @param {number} [index] - The indedx at which to get the module (returns the last if left out)\r\n     * @returns {RequestPath~ModuleID} The moduleID\r\n     * @public\r\n     */\r\n    getModuleID(index) {\r\n        // Select the last index if none was provided\r\n        if (index == undefined) index = this.modules.length - 1;\r\n\r\n        // Return the moduleID\r\n        return this.modules[index];\r\n    }\r\n\r\n    /**\r\n     * Returns a module path at the specified index, with negative indices starting at the end\r\n     * @param {(string|requestPath)} requestPath - The path to get the module path from\r\n     * @param {number} [index=-1] - The index to get the module path from\r\n     * @returns {string} The module path\r\n     * @public\r\n     */\r\n    static getModulePath(requestPath, index = -1) {\r\n        // Normalize the request path to a string\r\n        if (typeof requestPath != \"string\")\r\n            requestPath = requestPath.toString();\r\n\r\n        // Split the request path into pieces\r\n        const parts = requestPath.split(moduleSeperator);\r\n\r\n        // Get the specified index\r\n        const part = parts[index % parts.length];\r\n\r\n        // Extract just the module path from the part\r\n        return part.split(IDseperator)[0];\r\n    }\r\n}\r\n"]}