{"version":3,"sources":["../../../src/core/registry/requestPath.js"],"names":["RequestPath","constructor","path","Array","toString","split","map","module","ID","Number","modules","unique","join","getSubPath","removeCount","requestPath","splice","length","augmentPath","push","getModuleID","index","undefined"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;AACA;;;;;;AAMA,MAAMA,WAAN,CAAkB;AACd;;;;;AAKAC,gBAAYC,IAAZ,EAAkB;AACd,YAAI,OAAOA,IAAP,IAAe,QAAf,IAA2B,EAAEA,gBAAgBC,KAAlB,CAA/B,EACID,OAAOA,KAAKE,QAAL,EAAP;AACJ,YAAI,OAAOF,IAAP,IAAe,QAAnB,EAA6B;AACzBA,mBAAOA,KAAKG,KAAL,CAAW,IAAX,EAAiBC,GAAjB,CAAqBC,UAAU;AAClCA,yBAASA,OAAOF,KAAP,CAAa,GAAb,CAAT;AACA,uBAAO;AACHE,4BAAQA,OAAO,CAAP,CADL;AAEHC,wBAAIC,OAAOF,OAAO,CAAP,KAAa,CAApB;AAFD,iBAAP;AAIH,aANM,CAAP;AAOH;;AAED,aAAKG,OAAL,GAAeR,IAAf;AACH;;AAED;;;;;;AAMAE,aAASO,MAAT,EAAiB;AACb,eAAO,KAAKD,OAAL,CACFJ,GADE,CACEC,UAAU;AACX,gBAAII,MAAJ,EAAY,OAAOJ,OAAOA,MAAP,GAAgB,GAAhB,GAAsBA,OAAOC,EAApC;AACZ,mBAAOD,OAAOA,MAAP,GAAgB,EAAvB;AACH,SAJE,EAKFK,IALE,CAKG,IALH,CAAP;AAMH;;AAED;;;;;;AAMAC,eAAWC,WAAX,EAAwB;AACpB,cAAMC,cAAc,IAAIf,WAAJ,CAAgB,KAAKI,QAAL,CAAc,IAAd,CAAhB,CAApB;AACA,cAAMM,UAAUK,YAAYL,OAA5B;AACAA,gBAAQM,MAAR,CAAeN,QAAQO,MAAR,GAAiBH,WAAhC,EAA6CA,WAA7C;AACA,eAAOC,WAAP;AACH;;AAED;;;;;;;AAOAG,gBAAYX,MAAZ,EAAoBC,EAApB,EAAwB;AACpB,YAAI,OAAOD,MAAP,IAAiB,QAArB,EAA+BA,SAASA,OAAOH,QAAP,EAAT;AAC/B,cAAMW,cAAc,IAAIf,WAAJ,CAAgB,KAAKI,QAAL,CAAc,IAAd,CAAhB,CAApB;AACAW,oBAAYL,OAAZ,CAAoBS,IAApB,CAAyB;AACrBZ,oBAAQA,MADa;AAErBC,gBAAIC,OAAOD,MAAM,CAAb;AAFiB,SAAzB;AAIA,eAAOO,WAAP;AACH;;AAED;;;;;;AAMAK,gBAAYC,KAAZ,EAAmB;AACf,YAAIA,SAASC,SAAb,EAAwBD,QAAQ,KAAKX,OAAL,CAAaO,MAAb,GAAsB,CAA9B;AACxB,eAAO,KAAKP,OAAL,CAAaW,KAAb,CAAP;AACH;AA5Ea;kBA8EHrB,W","file":"requestPath.js","sourcesContent":["import IPC from \"../communication/IPC\";\r\nimport Module from \"./module\";\r\n/**\r\n * @typedef {Object} RequestPath~ModuleID\r\n * @property {string} module - The path to the module class\r\n * @property {number} ID - The unique ID of the module instance\r\n */\r\n\r\nclass RequestPath {\r\n    /**\r\n     * Create a request path that can be used to uniquely identifying module instances\r\n     * @param {string} path - The string representation of the request path\r\n     * @constructs RequestPath\r\n     */\r\n    constructor(path) {\r\n        if (typeof path != \"string\" && !(path instanceof Array))\r\n            path = path.toString();\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\"->\").map(module => {\r\n                module = module.split(\":\");\r\n                return {\r\n                    module: module[0],\r\n                    ID: Number(module[1] || 0),\r\n                };\r\n            });\r\n        }\r\n\r\n        this.modules = path;\r\n    }\r\n\r\n    /**\r\n     * Gets the string representation of this path\r\n     * @param {boolean} unique - Whether or not to include the unique ID of each module instance\r\n     * @returns {string} The string representation of this request path\r\n     * @public\r\n     */\r\n    toString(unique) {\r\n        return this.modules\r\n            .map(module => {\r\n                if (unique) return module.module + \":\" + module.ID;\r\n                return module.module + \"\";\r\n            })\r\n            .join(\"->\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of RequestPath with the last n modules removed\r\n     * @param {number} removeCount - The number of modules to remove\r\n     * @returns {RequestPath} The newly created request path\r\n     * @public\r\n     */\r\n    getSubPath(removeCount) {\r\n        const requestPath = new RequestPath(this.toString(true));\r\n        const modules = requestPath.modules;\r\n        modules.splice(modules.length - removeCount, removeCount);\r\n        return requestPath;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of RequestPath with a new module added\r\n     * @param {(Module|string)} module - The module to append to the path\r\n     * @param {number} ID - The unique ID of the module that is added\r\n     * @returns {RequestPath} The newly created request path\r\n     * @public\r\n     */\r\n    augmentPath(module, ID) {\r\n        if (typeof module != \"string\") module = module.toString();\r\n        const requestPath = new RequestPath(this.toString(true));\r\n        requestPath.modules.push({\r\n            module: module,\r\n            ID: Number(ID || 0),\r\n        });\r\n        return requestPath;\r\n    }\r\n\r\n    /**\r\n     * Returns the moduleID at a specific index\r\n     * @param {number} [index] - The indedx at which to get the module (returns the last if left out)\r\n     * @returns {RequestPath~ModuleID} The moduleID\r\n     * @public\r\n     */\r\n    getModuleID(index) {\r\n        if (index == undefined) index = this.modules.length - 1;\r\n        return this.modules[index];\r\n    }\r\n}\r\nexport default RequestPath;\r\n"]}