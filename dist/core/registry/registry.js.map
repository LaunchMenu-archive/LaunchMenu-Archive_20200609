{"version":3,"sources":["../../../src/core/registry/registry.js"],"names":["defaultModuleData","location","window","section","Registry","requestHandle","request","hasInvalidUse","use","match","source","Module","getPath","toString","__request","requestModule","requests","arguments","map","type","requestsModules","length","response","i","requestType","_loadModule","path","moduleClasses","data","require","__getModulesPath","clas","default","config","modulePath","module","listeners","__getListeners","push","_loadAllModules","_registerModuleInstance","moduleInstance","moduleInstances","requestPath","ID","IPC","send","getModuleID","_deregisterModuleInstance","index","indexOf","splice","WindowHandler","_close","_getModuleInstanceCount","Path","join","__getModules","listenerType","priorities","listener","priority","filter","sort","a","b","__finishRequest","requestModules","instantiatePromises","Array","forEach","RequestPath","augmentPath","moduleData","SettingsHandler","_getModuleFile","openModuleInstance","e","console","error","channels","all","channel","synced","isMain","sendSync","then","responses","getModuleInstanceChannels","subChannel","windowID","getClass","instancePaths","undefined","ChannelHandler","createSender","__setup","on","event","requestPaths","moduleInstancePaths","moduleClass","pathList","sourceID","paths","requestPathString"],"mappings":"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","file":"registry.js","sourcesContent":["import Path from \"path\";\r\nimport isMain from \"../isMain\";\r\nimport Module from \"./module\";\r\nimport RequestPath from \"./requestPath\";\r\nimport SettingsHandler from \"../communication/data/settings/settingsHandler\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport ChannelHandler from \"../communication/channel/channelHandler\";\r\nimport IPC from \"../communication/IPC\";\r\n\r\nconst defaultModuleData = {\r\n    location: {\r\n        window: 1,\r\n        section: 0,\r\n    },\r\n};\r\n\r\n/**\r\n * @typedef {Object} Registry~Request\r\n * @property {string} type - The type of handeling you are requesting\r\n * @property {('all'|'one'|'function')} [use] - What modules to use to answer the request\r\n * @property {Object} [data] - Any extra data you want to pass that modules can use to determine if they can answer the request\r\n * @property {Module} [source] - The module that sent out the request (can be left out when usimg Module.requestHandle)\r\n * @property {Object} [methods] - Extra methods that can get called by the handle (is only used by Module.requestHandle)\r\n */\r\n\r\n/**\r\n * @typedef {Object} Registry~Requestlistener\r\n * @property {string} type - The type of request to handle\r\n * @property {Object[]} listeners - The modules that can answer this request\r\n * @property {Class<Module>} listeners[].module - The module class that can answer the request\r\n * @property {function} listeners[].filter - The filter to make sure the class can handle this request\r\n */\r\n\r\n/**\r\n * @classdesc A class to track all the modules, and handle module requests\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class Registry {\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {Request} request - The information on how to handle the data\r\n     * @return {Promise<ChannelSender[]>} The channel(s) that have been created to answer the request\r\n     * @async\r\n     * @public\r\n     */\r\n    static requestHandle(request) {\r\n        // Check if the request contains a valid use, if not set it to 'one'\r\n        const hasInvalidUse =\r\n            !request.use ||\r\n            (typeof request.use == \"string\" ||\r\n                !request.use.match(/^(one|all)$/g));\r\n        if (hasInvalidUse) request.use = \"one\";\r\n\r\n        // Check if the request source type is a module, if so, get its string identifier\r\n        if (request.source instanceof Module)\r\n            request.source = request.source.getPath().toString(true);\r\n\r\n        // let the private __request method handle the request\r\n        return this.__request([request], \"handle\");\r\n    }\r\n\r\n    /**\r\n     * Request module classes of a specific type\r\n     * @param {Request} request - The information on what module to get\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module(s) that it could find with the specified type\r\n     * @public\r\n     */\r\n    static requestModule(request) {\r\n        // Get all the requests that were passed (multiple are allowed) TODO: indicate in JSdoc\r\n        var requests = Array.from(arguments);\r\n\r\n        // Normalize the format of the requests\r\n        var requests = requests.map(request => {\r\n            // If the request is only a string rather than an object, turn it into an object\r\n            if (typeof request == \"string\") request = {type: request};\r\n\r\n            // Check if the request contains a valid use, if not set it to 'one'\r\n            const hasInvalidUse =\r\n                !request.use ||\r\n                (typeof request.use == \"string\" ||\r\n                    !request.use.match(/^(one|all)$/g));\r\n            if (hasInvalidUse) request.use = \"one\";\r\n\r\n            // Return the new request variable\r\n            return request;\r\n        });\r\n\r\n        // Retrieve the request modules\r\n        const requestsModules = this.__request(requests, \"module\", true);\r\n\r\n        // Format the response appropriately\r\n        if (requestsModules.length > 1) {\r\n            const response = {};\r\n\r\n            // Map the modules to their request types\r\n            for (let i = 0; i < requestsModules.length; i++) {\r\n                const requestType = requests[i].type;\r\n                response[requestType] = requestsModules[i];\r\n            }\r\n\r\n            // Return the modules indexed by request type\r\n            return response;\r\n        } else {\r\n            // Directly return the modules from the only request\r\n            return requestsModules[0];\r\n        }\r\n    }\r\n\r\n    // Protected methods\r\n    /**\r\n     * Loads a module at the specified path relative to the modules folder\r\n     * @param {string} path - The path to the module class\r\n     * @returns {Class<Module>} The module class\r\n     * @protected\r\n     */\r\n    static _loadModule(path) {\r\n        // Only load the module if it hadn't been loaded already\r\n        if (!this.moduleClasses[path]) {\r\n            // Require module\r\n            const data = require(this.__getModulesPath(path));\r\n\r\n            // Verify all necessary data is passed\r\n            if (data) {\r\n                const clas = data.default;\r\n                const config = data.config;\r\n                // Check if the module returned a config\r\n                if (config) {\r\n                    // Augment data with some variables that can be extracted\r\n                    clas.modulePath = path;\r\n                    config.module = clas;\r\n\r\n                    // Register the module itself\r\n                    this.moduleClasses[path] = data;\r\n\r\n                    // Add listener to the list of listeners for this request type\r\n                    const listeners = this.__getListeners(config.type);\r\n                    listeners.listeners.push(config);\r\n                } else {\r\n                    // If the module didn't return a config, simply return the exports of the file\r\n                    return data;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the module\r\n        return this.moduleClasses[path];\r\n    }\r\n    /**\r\n     * Loads all the modules\r\n     * @returns {Array<Class<Module>>} All the module classes that have been loaded\r\n     * @protected\r\n     */\r\n    static _loadAllModules() {\r\n        //TODO: make a module loader\r\n    }\r\n\r\n    /**\r\n     * Registeres the module so the registry knows of its existence\r\n     * @param {Module} moduleInstance - The module to register\r\n     * @returns {number} The unique ID that the module instance has now been assigned\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _registerModuleInstance(moduleInstance) {\r\n        // Store the instance in this module/process\r\n        this.moduleInstances.push(moduleInstance);\r\n\r\n        // Get the a unique ID for the request path\r\n        const requestPath = moduleInstance.getPath();\r\n        const ID = (await IPC.send(\r\n            \"Registry.registerModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Assign the ID to this request path and return it\r\n        requestPath.getModuleID().ID = ID;\r\n        return ID;\r\n    }\r\n\r\n    /**\r\n     * Deregisters the module so the registry knows it is no longer used\r\n     * @param {Module} moduleInstance - The module to deregister\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _deregisterModuleInstance(moduleInstance) {\r\n        // Remove the module path in the main process\r\n        const requestPath = moduleInstance.getPath();\r\n        await IPC.send(\r\n            \"Registry.deregisterModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        );\r\n\r\n        // Remove the instance from this process/window\r\n        const index = this.moduleInstances.indexOf(moduleInstance);\r\n        if (index !== -1) this.moduleInstances.splice(index, 1);\r\n\r\n        // Close this window if there are no more modules in it\r\n        if (this.moduleInstances.length == 0) WindowHandler._close();\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of modules that are currently registered\r\n     * @returns {number} The amount of modules are currently registered\r\n     * @protected\r\n     */\r\n    static _getModuleInstanceCount() {\r\n        return this.moduleInstances.length;\r\n    }\r\n\r\n    // Private methods\r\n    /**\r\n     * Creates an object to store what classes can answer a certain request type if it hasn't been created already, and returns it\r\n     * @param {String} type - The request type to return the object of\r\n     * @returns {Registry~Requestlistener} An object that tracks the listeners for a certain request type\r\n     * @private\r\n     */\r\n    static __getListeners(type) {\r\n        // Create listeners type variable if not available\r\n        if (!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                listeners: [],\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param {String} [path=\"\"] - The path to append to the modules directory\r\n     * @returns {String} The relative path to the directory\r\n     * @private\r\n     */\r\n    static __getModulesPath(path = \"\") {\r\n        return Path.join(\"..\", \"..\", \"modules\", path);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the modules that can handle the passed request\r\n     * @param {Registry~Request} request - The request to find module classes for\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module classes that have been chosen to handle the request\r\n     * @private\r\n     */\r\n    static __getModules(request) {\r\n        // Get the module listeners to handle this type of request\r\n        const listenerType = this.__getListeners(request.type);\r\n\r\n        // Map modules with their priority to this particular request\r\n        const priorities = listenerType.listeners\r\n            .map(listener => {\r\n                return {\r\n                    priority: listener.filter(request),\r\n                    module: listener.module,\r\n                };\r\n            })\r\n            .filter(priority => priority.priority > 0);\r\n\r\n        // Sort the results\r\n        priorities.sort((a, b) => b.priority - a.priority);\r\n\r\n        // Determine what modules to return\r\n        if (request.use == \"all\") {\r\n            // If all modules should be returned, simply extract the modules from the priority data and return them\r\n            return priorities.map(a => a.module);\r\n        } else if (typeof request.use == \"Function\") {\r\n            // If a filter function is provided, apply it and then extract the modules from the data and return them\r\n            return priorities.filter(request.use).map(a => a.module);\r\n        } else {\r\n            // Otherwise only a single module should be returned, so simply return this module\r\n            return priorities[0] && priorities[0].module;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finishes the request by serving the correct data based on the module classes that were found\r\n     * @param {('module'|'handle')} type - The type of request that was made (either to handle data, or to get modules)\r\n     * @param {Registry~Request[]} requests - The requests that are being finished (only contains 1 if type=='handle')\r\n     * @param {Array<Array<Class<Module>>>} requestsModules - The modules that are found to match each request\r\n     * @returns {(Promise<Array<Array<Class<Module>>>>|Promise<ChannelSender[]>|Promise<ChannelSender>)} The data that the request results in\r\n     * @async\r\n     * @private\r\n     */\r\n    static async __finishRequest(type, requests, requestsModules) {\r\n        // Resolve request by simply returning the module if it was a module request,\r\n        //      or instanciate a module and return a channel on a handle request\r\n        if (type == \"module\") {\r\n            return requestsModules;\r\n        } else if (type == \"handle\") {\r\n            // The handle type only permits 1 request to exist\r\n            let requestModules = requestsModules[0];\r\n            const request = requests[0];\r\n\r\n            // In order to batch the await, instead of waiting between each open instance request\r\n            const instantiatePromises = [];\r\n\r\n            if (!(requestModules instanceof Array))\r\n                requestModules = [requestModules];\r\n\r\n            // Go through modules for 1 request\r\n            requestModules.forEach(module => {\r\n                try {\r\n                    // Create the proper request path\r\n                    let source;\r\n                    if (request.source) {\r\n                        source = new RequestPath(request.source).augmentPath(\r\n                            module\r\n                        );\r\n                    } else {\r\n                        source = new RequestPath(module);\r\n                    }\r\n\r\n                    // Attempt to retrieve the correct startup settings\r\n                    let moduleData = SettingsHandler._getModuleFile(source);\r\n                    if (!moduleData)\r\n                        moduleData = SettingsHandler._getModuleFile(\r\n                            new RequestPath(module)\r\n                        );\r\n                    if (!moduleData) moduleData = defaultModuleData;\r\n\r\n                    // Open the window that the module should appear in\r\n                    instantiatePromises.push(\r\n                        WindowHandler.openModuleInstance(\r\n                            moduleData,\r\n                            request,\r\n                            module.toString()\r\n                        )\r\n                    );\r\n                } catch (e) {\r\n                    // TODO: properply handle the error if something goes wrong\r\n                    console.error(\r\n                        `Something went wrong while trying to instantiate ${module}: `,\r\n                        e\r\n                    );\r\n                }\r\n            });\r\n\r\n            // Wait for all the promises to resolve and get their channels\r\n            const channels = await Promise.all(instantiatePromises);\r\n\r\n            // Determine whether to return only a single channel or an array of channels and return it\r\n            if (request.use == \"one\") {\r\n                return channels[0];\r\n            } else {\r\n                return channels.filter(channel => channel); // Remove failed instanciations\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles one or more requests and serves the responses\r\n     * @param {Registry~Request[]} requests - The requests to make\r\n     * @param {('module'|'handle')} type - The type of request that was made (either to handle data, or to get modules)\r\n     * @param {boolean} synced - Whether or not to request data synchronously (can only be synced if type=='module')\r\n     * @returns {(Promise<Array<Array<Class<Module>>>>|Promise<ChannelSender[]>|Promise<ChannelSender>)} The data that the request results in\r\n     * @private\r\n     */\r\n    static __request(requests, type, synced) {\r\n        if (synced) {\r\n            if (isMain) {\r\n                // Directly resolve the request as we have access to all modules\r\n                return requests.map(request => {\r\n                    return this.__getModules(request);\r\n                });\r\n            } else {\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                return IPC.sendSync(\"Registry.request\", requests)[0];\r\n            }\r\n        } else {\r\n            // Retrieve the modules to resolve the request\r\n            if (isMain) {\r\n                // Directly resolve the request as we have access to all modules\r\n                const requestsModules = requests.map(request => {\r\n                    return this.__getModules(request);\r\n                });\r\n                return this.__finishRequest(type, requests, requestsModules);\r\n            } else {\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                return IPC.send(\"Registry.request\", requests, 0).then(\r\n                    responses => {\r\n                        const requestsModules = responses[0];\r\n\r\n                        return this.__finishRequest(\r\n                            type,\r\n                            requests,\r\n                            requestsModules\r\n                        );\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: test if this method works at all\r\n    /**\r\n     * Gets channels to all instances of a specific module class\r\n     * @param {(Class<Module>|Module)} module - The module to get the instance of\r\n     * @param {string} [subChannel] - The sub channel to target\r\n     * @param {(Module|string)} source - The channelID to return messages to if needed\r\n     * @param {number} [windowID] - Only looks in this window for instances if provided\r\n     * @returns {Promise<ChannelSender[]>} The channels that were set up for the found modules\r\n     * @async\r\n     * @public\r\n     */\r\n    static async getModuleInstanceChannels(\r\n        module,\r\n        subChannel,\r\n        source,\r\n        windowID\r\n    ) {\r\n        // Get the module class path from the module\r\n        if (module.getClass) module = module.getClass();\r\n        if (module.getPath) module = module.getPath();\r\n\r\n        // Ask for all module instances from main\r\n        const instancePaths = (await IPC.send(\r\n            \"Registry.getModuleInstances\",\r\n            module,\r\n            0\r\n        ))[0];\r\n\r\n        // Get the actual unique request path from the module\r\n        if (source.getPath) source = source.getPath().toString(true);\r\n\r\n        // If a windowID is specified, filter the instancePaths so only ones in the correct window are kept\r\n        if (windowID != undefined)\r\n            instancePaths = instancePaths.filter(path => {\r\n                return path.windowID == windowID;\r\n            });\r\n\r\n        // Create a channel for each of retrieved instance paths\r\n        const channels = instancePaths.map(path => {\r\n            return ChannelHandler.createSender(path.path, subChannel, source);\r\n        });\r\n\r\n        // Wait for all channels to be created and then return them\r\n        return Promise.all(channels);\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the registered modules themselves, indexed by path\r\n        this.moduleClasses = {};\r\n\r\n        // Stores instances of modules registered in this window/process\r\n        this.moduleInstances = [];\r\n\r\n        // Set up the IPC listeners in the renderers and main process to allow renderers to request modules\r\n        if (isMain) {\r\n            // Filter out possible modules in this window to handle the handle request\r\n            IPC.on(\"Registry.request\", event => {\r\n                const requests = event.data;\r\n\r\n                // Retrieve the priority mapping for every request\r\n                const requestsModules = requests.map(request => {\r\n                    return this.__getModules(request);\r\n                });\r\n\r\n                // Return the mapping of modules and their priorities\r\n                return requestsModules;\r\n            });\r\n\r\n            // Stores unique module instance request paths, indexed by [request path][UID]\r\n            this.requestPaths = {};\r\n\r\n            // Stores unique module instance request path lists, indexed by module path\r\n            this.moduleInstancePaths = {};\r\n\r\n            // Listen for module instances being registered\r\n            IPC.on(\"Registry.registerModuleInstance\", event => {\r\n                // Get the request path for the module to register\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to register\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Retrieve the request path list that exists for that class, or create it if non-existent\r\n                let pathList = this.moduleInstancePaths[moduleClass];\r\n                if (!pathList)\r\n                    pathList = this.moduleInstancePaths[moduleClass] = [];\r\n\r\n                // Add this path to the list together with the window it is stored in\r\n                pathList.push({\r\n                    window: event.sourceID,\r\n                    path: requestPath.toString(true),\r\n                });\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, or create it if non-existent\r\n                let paths = this.requestPaths[requestPath.toString()];\r\n                if (!paths)\r\n                    paths = this.requestPaths[requestPath.toString()] = {};\r\n\r\n                // Find a unique ID in this collection\r\n                let ID = 0;\r\n                while (paths[ID]) ID++;\r\n\r\n                // Asssign this unique ID to the last module of the request path and store the path\r\n                requestPath.getModuleID().ID = ID;\r\n                paths[ID] = requestPath;\r\n\r\n                // Return the unique request path identifier\r\n                return ID;\r\n            });\r\n\r\n            // Listen for module instances being deregistered\r\n            IPC.on(\"Registry.deregisterModuleInstance\", event => {\r\n                // Get the request path for the module to deregister\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to deregister\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Get the paths that are stored for this class\r\n                const pathList = this.moduleInstancePaths[moduleClass];\r\n                if (pathList) {\r\n                    // get the unique request path in string form\r\n                    const requestPathString = requestPath.toString(true);\r\n\r\n                    // Filter out the object that corresponds with this string\r\n                    this.moduleInstancePaths[moduleClass] = pathList.filter(\r\n                        path => {\r\n                            return path.path != requestPathString;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // Get the unique path identifier from the request path\r\n                const ID = requestPath.getModuleID().ID;\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, and delete the path with this unique ID\r\n                const paths = this.requestPaths[requestPath.toString()];\r\n                if (paths) delete paths[ID];\r\n            });\r\n\r\n            // Listen for windows/processes requesting instances of a certain module\r\n            IPC.on(\"Registry.getModuleInstances\", event => {\r\n                // Extract the module class path that we are looking for\r\n                const data = event.data;\r\n                const modulePath = data.modulePath;\r\n\r\n                // Return the request path attached to this class\r\n                return this.moduleInstancePaths[modulePath];\r\n            });\r\n        }\r\n    }\r\n}\r\nRegistry.__setup();\r\n"]}