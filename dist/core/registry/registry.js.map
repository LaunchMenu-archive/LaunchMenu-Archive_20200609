{"version":3,"sources":["../../../src/core/registry/registry.js"],"names":["defaultModuleData","location","window","section","Registry","requestHandle","request","hasInvalidUse","use","match","source","Module","getPath","toString","__request","requestModule","requests","arguments","map","type","requestsModules","length","response","i","requestType","_loadModule","path","moduleClasses","configs","require","__getModulesPath","default","Array","forEach","config","listeners","__getListeners","index","indexOf","push","modulePath","module","dir","split","Path","sep","pop","join","replace","filter","requiringModules","moduleImport","splice","_loadAllModules","startPath","resolve","__dirname","readDir","reject","FS","readdir","err","files","outConfigs","promises","file","filePath","lstatSync","isDirectory","relativeFilePath","substring","apply","all","then","configLists","back","process","cwd","_registerModuleInstance","moduleInstance","moduleInstances","requestPath","ID","IPC","send","getModuleID","_deregisterModuleInstance","WindowHandler","_close","_getModuleInstanceCount","__getModules","loadingModules","listenerType","priorities","priority","sort","a","b","__GetModulesFromConfigs","synced","isMain","modules","sendSync","__finishRequest","requestModules","instantiatePromises","RequestPath","augmentPath","moduleData","SettingsHandler","_getModuleFile","openModuleInstance","e","console","error","channels","channel","getModuleInstanceChannels","subChannel","windowID","getClass","instancePaths","undefined","ChannelHandler","createSender","__setup","on","event","data","requestPaths","moduleInstancePaths","moduleClass","pathList","sourceID","paths","requestPathString"],"mappings":"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","file":"registry.js","sourcesContent":["import Path from \"path\";\r\nimport FS from \"fs\";\r\nimport isMain from \"../isMain\";\r\nimport Module from \"./module\";\r\nimport RequestPath from \"./requestPath\";\r\nimport SettingsHandler from \"../communication/data/settings/settingsHandler\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport ChannelHandler from \"../communication/channel/channelHandler\";\r\nimport IPC from \"../communication/IPC\";\r\n\r\nconst defaultModuleData = {\r\n    location: {\r\n        window: 1,\r\n        section: 0,\r\n    },\r\n};\r\n\r\n/**\r\n * A request that can be made to retrieve a module\r\n * @typedef {Object} Registry~Request\r\n * @property {string} type - The type of handeling you are requesting\r\n * @property {('all'|'one'|function)} [use] - What modules to use to answer the request\r\n * @property {Object} [data] - Any extra data you want to pass that modules can use to determine if they can answer the request\r\n * @property {Module} [source] - The module that sent out the request (can be left out when usimg Module.requestHandle)\r\n * @property {Object} [methods] - Extra methods that can get called by the handle (is only used by Module.requestHandle)\r\n */\r\n\r\n/**\r\n * The data that is stored to track what modules can answer what requests\r\n * @typedef {Object} Registry~Requestlistener\r\n * @property {string} type - The type of request to handle\r\n * @property {Object[]} listeners - The modules that can answer this request\r\n * @property {Class<Module>} listeners[].module - The module class that can answer the request\r\n * @property {function} listeners[].filter - The filter to make sure the class can handle this request\r\n */\r\n\r\n/**\r\n * The format that module configs should be in\r\n * @typedef {Object} Registry~Config\r\n * @property {string} type - The type of request to handle\r\n * @property {Function} [filter] - A method that will get passed a request, that determines whether to use this module and with what priority\r\n * @property {string} [module] - The relative path to the module to use\r\n */\r\n\r\n/**\r\n * @classdesc A class to track all the modules, and handle module requests\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class Registry {\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {Request} request - The information on how to handle the data\r\n     * @return {Promise<ChannelSender[]>} The channel(s) that have been created to answer the request\r\n     * @async\r\n     * @public\r\n     */\r\n    static requestHandle(request) {\r\n        // Check if the request contains a valid use, if not set it to 'one'\r\n        const hasInvalidUse =\r\n            !request.use ||\r\n            (typeof request.use == \"string\" ||\r\n                !request.use.match(/^(one|all)$/g));\r\n        if (hasInvalidUse) request.use = \"one\";\r\n\r\n        // Check if the request source type is a module, if so, get its string identifier\r\n        if (request.source instanceof Module)\r\n            request.source = request.source.getPath().toString(true);\r\n\r\n        // let the private __request method handle the request\r\n        return this.__request([request], \"handle\");\r\n    }\r\n\r\n    /**\r\n     * Request module classes of a specific type\r\n     * @param {Request} request - The information on what module to get\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module(s) that it could find with the specified type\r\n     * @public\r\n     */\r\n    static requestModule(request) {\r\n        // Get all the requests that were passed (multiple are allowed) TODO: indicate multiple in JSdoc\r\n        var requests = Array.from(arguments);\r\n\r\n        // Normalize the format of the requests\r\n        var requests = requests.map(request => {\r\n            // If the request is only a string rather than an object, turn it into an object\r\n            if (typeof request == \"string\") request = {type: request};\r\n\r\n            // Check if the request contains a valid use, if not set it to 'one'\r\n            const hasInvalidUse =\r\n                !request.use ||\r\n                (typeof request.use == \"string\" ||\r\n                    !request.use.match(/^(one|all)$/g));\r\n            if (hasInvalidUse) request.use = \"one\";\r\n\r\n            // Return the new request variable\r\n            return request;\r\n        });\r\n\r\n        // Retrieve the request modules\r\n        const requestsModules = this.__request(requests, \"module\", true);\r\n\r\n        // Format the response appropriately\r\n        if (requestsModules.length > 1) {\r\n            const response = {};\r\n\r\n            // Map the modules to their request types\r\n            for (let i = 0; i < requestsModules.length; i++) {\r\n                const requestType = requests[i].type;\r\n                response[requestType] = requestsModules[i];\r\n            }\r\n\r\n            // Return the modules indexed by request type\r\n            return response;\r\n        } else {\r\n            // Directly return the modules from the only request\r\n            return requestsModules[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a module at the specified path relative to the modules folder\r\n     * @param {string} path - The path to the module class\r\n     * @returns {(Class<Module>|Config[])} The module class that was loaded, or the config that was loaded\r\n     * @protected\r\n     */\r\n    static _loadModule(path) {\r\n        // Only load the module if it hadn't been loaded already\r\n        if (!this.moduleClasses[path]) {\r\n            // Check if importing the module itself, or the module from a config\r\n            if (path.match(/\\bconfig\\b/)) {\r\n                // Require the config\r\n                let configs = require(this.__getModulesPath(path)).default;\r\n\r\n                // Normalize it into an array of configs if needed\r\n                if (!(configs instanceof Array)) configs = [configs];\r\n\r\n                // Go through all configs\r\n                configs.forEach(config => {\r\n                    // Add listener to the list of listeners for this request type\r\n                    const listeners = this.__getListeners(config.type);\r\n                    const index = listeners.configs.indexOf(config);\r\n                    if (index != -1) return; // Don't add it, if it was already added\r\n\r\n                    listeners.configs.push(config);\r\n\r\n                    // Get the module path\r\n                    let modulePath;\r\n                    if (config.module) {\r\n                        // Get the directory of the config path\r\n                        let dir = path.split(Path.sep);\r\n                        dir.pop();\r\n                        dir = dir.join(\"/\");\r\n\r\n                        // Get the module path relative to this dir\r\n                        modulePath = Path.join(dir, config.module);\r\n                    } else {\r\n                        modulePath = path.replace(/\\.?config/, \"\");\r\n                    }\r\n\r\n                    // Add a filter to the config if not present\r\n                    if (!config.filter) config.filter = () => true;\r\n\r\n                    // Attach the location of the module to the config\r\n                    config.modulePath = modulePath;\r\n                });\r\n\r\n                // Return the configs\r\n                return configs;\r\n            } else {\r\n                // Indicate that we have started requiring this module\r\n                this.requiringModules.push(path);\r\n\r\n                // Require module\r\n                const moduleImport = require(this.__getModulesPath(path));\r\n\r\n                // Indicate that we are no longer in the process of loading this module\r\n                const index = this.requiringModules.indexOf(path);\r\n                if (index != -1) this.requiringModules.splice(index, 1);\r\n\r\n                if (moduleImport) {\r\n                    // Register the module itself\r\n                    this.moduleClasses[path] = moduleImport.default;\r\n\r\n                    // Attach the location to the class\r\n                    const module = moduleImport.default;\r\n                    module.modulePath = path;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the module\r\n        return this.moduleClasses[path];\r\n    }\r\n\r\n    /**\r\n     * Loads all the configs of available modules\r\n     * @returns {Promise<Array<Class<Module>>>} All the module classes that have been loaded\r\n     * @async\r\n     * @protected\r\n     */\r\n    static _loadAllModules() {\r\n        const startPath = Path.resolve(__dirname, this.__getModulesPath());\r\n        const readDir = path => {\r\n            return new Promise((resolve, reject) => {\r\n                FS.readdir(path, (err, files) => {\r\n                    // Store the resulting configs to return\r\n                    const outConfigs = [];\r\n\r\n                    // Store async dir reading promises that have to be resolved\r\n                    const promises = [];\r\n\r\n                    // Read the files\r\n                    files.forEach(file => {\r\n                        const filePath = Path.join(path, file);\r\n                        // Check if this file is a directory or not\r\n                        if (FS.lstatSync(filePath).isDirectory()) {\r\n                            // Recurse on the directory, and store the promise in order to wait for it\r\n                            promises.push(readDir(filePath));\r\n                        } else {\r\n                            // Check if the file is a config, and if so, load it\r\n                            if (file.match(/config\\.js$/g)) {\r\n                                // Get the file path relative to the modules folder\r\n                                const relativeFilePath = filePath.substring(\r\n                                    startPath.length + 1\r\n                                );\r\n\r\n                                // Load the config and add it to the output configs\r\n                                outConfigs.push.apply(\r\n                                    outConfigs,\r\n                                    this._loadModule(relativeFilePath)\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    // Wait for all the directory async recursions to finish\r\n                    Promise.all(promises).then(configLists => {\r\n                        // Add all returned lists to our main list\r\n                        configLists.forEach(configs => {\r\n                            outConfigs.push.apply(outConfigs, configs);\r\n                        });\r\n\r\n                        // Return our main list\r\n                        resolve(outConfigs);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n\r\n        // start the recursive directory reading and return its promise\r\n        return readDir(startPath);\r\n    }\r\n\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param {String} [path=\"\"] - The path to append to the modules directory\r\n     * @returns {String} The relative path to the directory\r\n     * @private\r\n     */\r\n    static __getModulesPath(path = \"\") {\r\n        // Calculate how many dirs to go up to reach the root\r\n        let back = __dirname.substring(process.cwd().length).split(Path.sep);\r\n        back.pop();\r\n        back = back.map(() => \"..\").join(\"/\");\r\n\r\n        // Get the path from the root to the indicated module\r\n        return Path.join(back, \"dist\", \"modules\", path);\r\n    }\r\n\r\n    /**\r\n     * Registeres the module so the registry knows of its existence\r\n     * @param {Module} moduleInstance - The module to register\r\n     * @returns {number} The unique ID that the module instance has now been assigned\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _registerModuleInstance(moduleInstance) {\r\n        // Store the instance in this module/process\r\n        this.moduleInstances.push(moduleInstance);\r\n\r\n        // Get the a unique ID for the request path\r\n        const requestPath = moduleInstance.getPath();\r\n        const ID = (await IPC.send(\r\n            \"Registry.registerModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Assign the ID to this request path and return it\r\n        requestPath.getModuleID().ID = ID;\r\n        return ID;\r\n    }\r\n\r\n    /**\r\n     * Deregisters the module so the registry knows it is no longer used\r\n     * @param {Module} moduleInstance - The module to deregister\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _deregisterModuleInstance(moduleInstance) {\r\n        // Remove the module path in the main process\r\n        const requestPath = moduleInstance.getPath();\r\n        await IPC.send(\r\n            \"Registry.deregisterModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        );\r\n\r\n        // Remove the instance from this process/window\r\n        const index = this.moduleInstances.indexOf(moduleInstance);\r\n        if (index !== -1) this.moduleInstances.splice(index, 1);\r\n\r\n        // Close this window if there are no more modules in it\r\n        if (this.moduleInstances.length == 0) WindowHandler._close();\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of modules that are currently registered\r\n     * @returns {number} The amount of modules are currently registered\r\n     * @protected\r\n     */\r\n    static _getModuleInstanceCount() {\r\n        return this.moduleInstances.length;\r\n    }\r\n\r\n    /**\r\n     * Creates an object to store what classes can answer a certain request type if it hasn't been created already, and returns it\r\n     * @param {String} type - The request type to return the object of\r\n     * @returns {Registry~Requestlistener} An object that tracks the listeners for a certain request type\r\n     * @private\r\n     */\r\n    static __getListeners(type) {\r\n        // Create listeners type variable if not available\r\n        if (!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                configs: [],\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n\r\n    /**\r\n     * Retrieves the modules that can handle the passed request\r\n     * @param {Registry~Request} request - The request to find module classes for\r\n     * @param {string[]} loadingModules - A list of module paths that are currently being required\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module classes that have been chosen to handle the request\r\n     * @private\r\n     */\r\n    static __getModules(request, loadingModules) {\r\n        // Get the module listeners to handle this type of request\r\n        const listenerType = this.__getListeners(request.type);\r\n\r\n        // Map modules with their priority to this particular request\r\n        const priorities = listenerType.configs\r\n            .map(config => {\r\n                return {\r\n                    priority: config.filter(request),\r\n                    config: config,\r\n                };\r\n            })\r\n            .filter(\r\n                priority =>\r\n                    priority.priority > 0 &&\r\n                    loadingModules.indexOf(priority.config.modulePath) == -1\r\n            );\r\n\r\n        // Sort the results\r\n        priorities.sort((a, b) => b.priority - a.priority);\r\n\r\n        // Determine what modules to return\r\n        if (request.use == \"all\") {\r\n            // If all modules should be returned, simply extract the modules from the priority data and return them\r\n            return this.__GetModulesFromConfigs(priorities.map(a => a.config));\r\n        } else if (typeof request.use == \"Function\") {\r\n            // If a filter function is provided, apply it and then extract the modules from the data and return them\r\n            return this.__GetModulesFromConfigs(\r\n                priorities.filter(request.use).map(a => a.config)\r\n            );\r\n        } else {\r\n            // Otherwise only a single module should be returned, so simply return this module\r\n            return (\r\n                priorities[0] &&\r\n                this.__GetModulesFromConfigs([priorities[0].config])[0]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes through the array of configs and maps it to the modules of the configs (requires modules if needed)\r\n     * @param {Registry~config[]} configs - The configs to get the modules from\r\n     * @returns {Array<Class<Module>>} The modules that got extracted fromt he configs\r\n     * @private\r\n     */\r\n    static __GetModulesFromConfigs(configs) {\r\n        return configs.map(config => {\r\n            // Require the module from its path if this hasn't happened yet\r\n            if (!(config.module instanceof Module)) {\r\n                const modulePath = config.modulePath;\r\n\r\n                // Load the module from the path\r\n                const module = this._loadModule(modulePath);\r\n\r\n                // Store the module\r\n                config.module = module;\r\n            }\r\n\r\n            // Return the module itself, which should now in no situation be a path\r\n            return config.module;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles one or more requests and serves the responses\r\n     * @param {Registry~Request[]} requests - The requests to make\r\n     * @param {('module'|'handle')} type - The type of request that was made (either to handle data, or to get modules)\r\n     * @param {boolean} synced - Whether or not to request data synchronously (can only be synced if type=='module')\r\n     * @returns {(Promise<Array<Array<Class<Module>>>>|Promise<ChannelSender[]>|Promise<ChannelSender>)} The data that the request results in\r\n     * @private\r\n     */\r\n    static __request(requests, type, synced) {\r\n        if (synced) {\r\n            if (isMain) {\r\n                // Directly resolve the request as we have access to all modules\r\n                return requests.map(request => {\r\n                    return this.__getModules(request, this.requiringModules);\r\n                });\r\n            } else {\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                const modules = IPC.sendSync(\"Registry.request\", {\r\n                    requests: requests,\r\n                    requiringModules: this.requiringModules,\r\n                });\r\n\r\n                return modules[0];\r\n            }\r\n        } else {\r\n            // Retrieve the modules to resolve the request\r\n            if (isMain) {\r\n                // Directly resolve the request as we have access to all modules\r\n                const requestsModules = requests.map(request => {\r\n                    return this.__getModules(request, this.requiringModules);\r\n                });\r\n                return this.__finishRequest(type, requests, requestsModules);\r\n            } else {\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                const requestsModules = IPC.sendSync(\r\n                    \"Registry.request\",\r\n                    {\r\n                        requests: requests,\r\n                        requiringModules: this.requiringModules,\r\n                    },\r\n                    0\r\n                );\r\n                return this.__finishRequest(type, requests, requestsModules);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finishes the request by serving the correct data based on the module classes that were found\r\n     * @param {('module'|'handle')} type - The type of request that was made (either to handle data, or to get modules)\r\n     * @param {Registry~Request[]} requests - The requests that are being finished (only contains 1 if type=='handle')\r\n     * @param {Array<Array<Class<Module>>>} requestsModules - The modules that are found to match each request\r\n     * @returns {(Promise<Array<Array<Class<Module>>>>|Promise<ChannelSender[]>|Promise<ChannelSender>)} The data that the request results in\r\n     * @async\r\n     * @private\r\n     */\r\n    static async __finishRequest(type, requests, requestsModules) {\r\n        // Resolve request by simply returning the module if it was a module request,\r\n        //      or instanciate a module and return a channel on a handle request\r\n        if (type == \"module\") {\r\n            return requestsModules;\r\n        } else if (type == \"handle\") {\r\n            // The handle type only permits 1 request to exist\r\n            let requestModules = requestsModules[0];\r\n            const request = requests[0];\r\n\r\n            // In order to batch the await, instead of waiting between each open instance request\r\n            const instantiatePromises = [];\r\n\r\n            if (!(requestModules instanceof Array))\r\n                requestModules = [requestModules];\r\n\r\n            // Go through modules for 1 request\r\n            requestModules.forEach(module => {\r\n                try {\r\n                    // Create the proper request path\r\n                    let source;\r\n                    if (request.source) {\r\n                        source = new RequestPath(request.source).augmentPath(\r\n                            module\r\n                        );\r\n                    } else {\r\n                        source = new RequestPath(module);\r\n                    }\r\n\r\n                    // Attempt to retrieve the correct startup settings\r\n                    let moduleData = SettingsHandler._getModuleFile(source);\r\n                    if (!moduleData)\r\n                        moduleData = SettingsHandler._getModuleFile(\r\n                            new RequestPath(module)\r\n                        );\r\n                    if (!moduleData) moduleData = defaultModuleData;\r\n\r\n                    // Open the window that the module should appear in\r\n                    instantiatePromises.push(\r\n                        WindowHandler.openModuleInstance(\r\n                            moduleData,\r\n                            request,\r\n                            module.toString()\r\n                        )\r\n                    );\r\n                } catch (e) {\r\n                    // TODO: properply handle the error if something goes wrong\r\n                    console.error(\r\n                        `Something went wrong while trying to instantiate ${module}: `,\r\n                        e\r\n                    );\r\n                }\r\n            });\r\n\r\n            // Wait for all the promises to resolve and get their channels\r\n            const channels = await Promise.all(instantiatePromises);\r\n\r\n            // Determine whether to return only a single channel or an array of channels and return it\r\n            if (request.use == \"one\") {\r\n                return channels[0];\r\n            } else {\r\n                return channels.filter(channel => channel); // Remove failed instanciations\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: test if this method works at all\r\n    /**\r\n     * Gets channels to all instances of a specific module class\r\n     * @param {(Class<Module>|Module)} module - The module to get the instance of\r\n     * @param {string} [subChannel] - The sub channel to target\r\n     * @param {(Module|string)} source - The channelID to return messages to if needed\r\n     * @param {number} [windowID] - Only looks in this window for instances if provided\r\n     * @returns {Promise<ChannelSender[]>} The channels that were set up for the found modules\r\n     * @async\r\n     * @public\r\n     */\r\n    static async getModuleInstanceChannels(\r\n        module,\r\n        subChannel,\r\n        source,\r\n        windowID\r\n    ) {\r\n        // Get the module class path from the module\r\n        if (module.getClass) module = module.getClass();\r\n        if (module.getPath) module = module.getPath();\r\n\r\n        // Ask for all module instances from main\r\n        const instancePaths = (await IPC.send(\r\n            \"Registry.getModuleInstances\",\r\n            module,\r\n            0\r\n        ))[0];\r\n\r\n        // Get the actual unique request path from the module\r\n        if (source.getPath) source = source.getPath().toString(true);\r\n\r\n        // If a windowID is specified, filter the instancePaths so only ones in the correct window are kept\r\n        if (windowID != undefined)\r\n            instancePaths = instancePaths.filter(path => {\r\n                return path.windowID == windowID;\r\n            });\r\n\r\n        // Create a channel for each of retrieved instance paths\r\n        const channels = instancePaths.map(path => {\r\n            return ChannelHandler.createSender(path.path, subChannel, source);\r\n        });\r\n\r\n        // Wait for all channels to be created and then return them\r\n        return Promise.all(channels);\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the registered modules themselves, indexed by path\r\n        this.moduleClasses = {};\r\n\r\n        // Stores instances of modules registered in this window/process\r\n        this.moduleInstances = [];\r\n\r\n        // Keep track of modules that are currently being required\r\n        this.requiringModules = [];\r\n\r\n        // Set up the IPC listeners in the renderers and main process to allow renderers to request modules\r\n        if (isMain) {\r\n            // Filter out possible modules in this window to handle the handle request\r\n            IPC.on(\"Registry.request\", event => {\r\n                const requests = event.data.requests;\r\n                const requiringModules = event.data.requiringModules;\r\n\r\n                // Retrieve the priority mapping for every request\r\n                const requestsModules = requests.map(request => {\r\n                    return this.__getModules(request, requiringModules);\r\n                });\r\n\r\n                // Return the mapping of modules and their priorities\r\n                return requestsModules;\r\n            });\r\n\r\n            // Stores unique module instance request paths, indexed by [request path][UID]\r\n            this.requestPaths = {};\r\n\r\n            // Stores unique module instance request path lists, indexed by module path\r\n            this.moduleInstancePaths = {};\r\n\r\n            // Listen for module instances being registered\r\n            IPC.on(\"Registry.registerModuleInstance\", event => {\r\n                // Get the request path for the module to register\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to register\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Retrieve the request path list that exists for that class, or create it if non-existent\r\n                let pathList = this.moduleInstancePaths[moduleClass];\r\n                if (!pathList)\r\n                    pathList = this.moduleInstancePaths[moduleClass] = [];\r\n\r\n                // Add this path to the list together with the window it is stored in\r\n                pathList.push({\r\n                    window: event.sourceID,\r\n                    path: requestPath.toString(true),\r\n                });\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, or create it if non-existent\r\n                let paths = this.requestPaths[requestPath.toString()];\r\n                if (!paths)\r\n                    paths = this.requestPaths[requestPath.toString()] = {};\r\n\r\n                // Find a unique ID in this collection\r\n                let ID = 0;\r\n                while (paths[ID]) ID++;\r\n\r\n                // Asssign this unique ID to the last module of the request path and store the path\r\n                requestPath.getModuleID().ID = ID;\r\n                paths[ID] = requestPath;\r\n\r\n                // Return the unique request path identifier\r\n                return ID;\r\n            });\r\n\r\n            // Listen for module instances being deregistered\r\n            IPC.on(\"Registry.deregisterModuleInstance\", event => {\r\n                // Get the request path for the module to deregister\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to deregister\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Get the paths that are stored for this class\r\n                const pathList = this.moduleInstancePaths[moduleClass];\r\n                if (pathList) {\r\n                    // get the unique request path in string form\r\n                    const requestPathString = requestPath.toString(true);\r\n\r\n                    // Filter out the object that corresponds with this string\r\n                    this.moduleInstancePaths[moduleClass] = pathList.filter(\r\n                        path => {\r\n                            return path.path != requestPathString;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // Get the unique path identifier from the request path\r\n                const ID = requestPath.getModuleID().ID;\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, and delete the path with this unique ID\r\n                const paths = this.requestPaths[requestPath.toString()];\r\n                if (paths) delete paths[ID];\r\n            });\r\n\r\n            // Listen for windows/processes requesting instances of a certain module\r\n            IPC.on(\"Registry.getModuleInstances\", event => {\r\n                // Extract the module class path that we are looking for\r\n                const data = event.data;\r\n                const modulePath = data.modulePath;\r\n\r\n                // Return the request path attached to this class\r\n                return this.moduleInstancePaths[modulePath];\r\n            });\r\n        }\r\n    }\r\n}\r\nRegistry.__setup();\r\n"]}