{"version":3,"sources":["../../../src/core/registry/registry.js"],"names":["defaultModuleData","location","window","section","Registry","requestHandle","request","_normalizeHandleRequest","requestModules","isMain","__getModules","requiringModules","IPC","send","instantiatePromises","forEach","module","source","RequestPath","augmentPath","moduleLocation","_destinationWindowID","_destinationSectionID","SettingsHandler","_getModuleLocation","push","WindowHandler","openModuleInstance","e","console","error","channels","all","use","filter","channel","hasInvalidUse","match","data","embedGUI","ID","Module","getPath","toString","requestModule","requests","_normalizeModuleRequest","apply","arguments","requestsModules","map","sendSync","length","response","i","type","__setupRequest","on","event","loadingModules","listenerType","__getListeners","priorities","configs","config","priority","indexOf","modulePath","sort","a","b","__getModulesFromConfigs","_loadModule","getModuleChannel","requestPath","subChannelType","senderID","channelSender","ChannelHandler","createSender","_getModuleInstance","elementCreator","core","__data","path","moduleImport","require","__getModulesPath","index","splice","default","_getModule","moduleConfigs","_loadConfig","Array","listeners","dir","split","Path","sep","pop","join","replace","find","_loadAllConfigs","startPath","resolve","__dirname","readDir","reject","FS","readdir","err","files","outConfigs","promises","file","filePath","lstatSync","isDirectory","relativeFilePath","substring","then","configLists","back","process","cwd","_getModuleConfig","getModuleConfig","localModuleConfig","moduleConfig","__setupGetModuleConfig","_registerModuleInstance","moduleInstance","uniqueID","isEmbeded","_isEmbeded","getModuleID","moduleInstances","__setupRegisterModuleInstance","embeded","moduleClass","paths","requestPaths","pathList","moduleInstancePaths","sourceID","active","_registerModuleInstanceCompleted","__setupRegisterModuleInstanceCompleted","item","moduleAwaiters","waiter","pattern","acceptEmbeded","test","log","_deregisterModuleInstance","_close","__setupDeregisterModuleInstance","requestPathString","_getModuleInstances","getModuleInstanceChannels","subChannel","windowID","getClass","instancePaths","undefined","__setupGetModuleInstanceChannels","moveModuleTo","requestPathPattern","includeEmbeded","responses","modulePaths","__setupMoveModuleTo","RequestPathPattern","embedCheck","getRequest","promise","moveTo","awaitModuleCreation","__setupAwaitModuleCreation","moduleClassPaths","matches","uniquePaths","uniquePath","resolver","__setup"],"mappings":"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","file":"registry.js","sourcesContent":["import Path from \"path\";\r\nimport FS from \"fs\";\r\nimport isMain from \"../isMain\";\r\nimport RequestPath from \"./requestPath/requestPath\";\r\nimport RequestPathPattern from \"./requestPath/requestPathPattern\";\r\nimport SettingsHandler from \"../communication/data/settings/settingsHandler\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport Module from \"./module\";\r\nimport ChannelHandler from \"../communication/channel/channelHandler\";\r\nimport IPC from \"../communication/IPC\";\r\n\r\nconst defaultModuleData = {\r\n    location: {\r\n        window: 1,\r\n        section: 0,\r\n    },\r\n};\r\n\r\n/**\r\n * A request that can be made to retrieve a module\r\n * @typedef {Object} Registry~Request\r\n * @property {string} type - The type of handeling you are requesting\r\n * @property {('all'|'one'|function)} [use] - What modules to use to answer the request\r\n * @property {Object} [data] - Any extra data you want to pass that modules can use to determine if they can answer the request\r\n * @property {Module} [source] - The module that sent out the request (can be left out when usimg Module.requestHandle)\r\n * @property {Object} [methods] - Extra methods that can get called by the handle (is only used by Module.requestHandle)\r\n * @property {boolean} [embedGUI] - Whether the module GUI will be embeded into another module\r\n * @property {number} [_destinationWindowID] - The window that the module answering this request should be instanciated in (only used to force a value)\r\n * @property {number} [_destinationSectionID] - The section in the window that the module answering this request should be instanciated in (only used to force a value)\r\n */\r\n\r\n/**\r\n * The data that is stored to track what modules can answer what requests\r\n * @typedef {Object} Registry~Requestlistener\r\n * @property {string} type - The type of request to handle\r\n * @property {Object[]} listeners - The modules that can answer this request\r\n * @property {Class<Module>} listeners[].module - The module class that can answer the request\r\n * @property {function} listeners[].filter - The filter to make sure the class can handle this request\r\n */\r\n\r\n/**\r\n * The format that module configs should be in\r\n * @typedef {Object} Registry~Config\r\n * @property {string} type - The type of request to handle\r\n * @property {Function} [filter] - A method that will get passed a request, that determines whether to use this module and with what priority\r\n * @property {string} [module] - The relative path to the module to use\r\n * @property {Object} [settings] - The default settings to apply to modules of this type\r\n */\r\n\r\n/**\r\n * The location of a certain module, relative to the modules directory\r\n * @typedef {string} Registry~ModulePath\r\n */\r\n\r\n/**\r\n * @classdesc A class to track all the modules, and handle module requests\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class Registry {\r\n    // Request related code\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {Request} request - The information on how to handle the data\r\n     * @return {(Promise<ChannelSender>|Promise<ChannelSender[]>)} The channel(s) that have been created to answer the request\r\n     * @async\r\n     * @public\r\n     */\r\n    static async requestHandle(request) {\r\n        // Normalize the request\r\n        this._normalizeHandleRequest(request);\r\n\r\n        // Retrieve the modules to resolve the request\r\n        let requestModules;\r\n\r\n        // Check if we are in the main process\r\n        if (isMain) {\r\n            // Directly resolve the request as we have access to all modules\r\n            requestModules = this.__getModules(request, this.requiringModules);\r\n        } else {\r\n            // Send a command to the main window to look for modules to resolve the request\r\n            requestModules = (await IPC.send(\r\n                \"Registry.request\",\r\n                {\r\n                    request: request,\r\n                    requiringModules: this.requiringModules,\r\n                },\r\n                0\r\n            ))[0];\r\n        }\r\n\r\n        // Instanciate all the modules\r\n\r\n        // In order to batch the await, instead of waiting between each open instance request\r\n        const instantiatePromises = [];\r\n\r\n        // Go through modules for 1 request\r\n        requestModules.forEach(module => {\r\n            try {\r\n                // Create the proper request path\r\n                let source;\r\n                if (request.source) {\r\n                    source = new RequestPath(request.source).augmentPath(\r\n                        module\r\n                    );\r\n                } else {\r\n                    source = new RequestPath(module);\r\n                }\r\n\r\n                // Attempt to retrieve the correct startup location\r\n                let moduleLocation;\r\n\r\n                // Check if the request defined a location\r\n                if (request._destinationWindowID != null) {\r\n                    // If it did, use this\r\n                    moduleLocation = {\r\n                        window: request._destinationWindowID,\r\n                        section: request._destinationSectionID || 0,\r\n                    };\r\n                } else {\r\n                    // Otherwise load the location from the settings\r\n                    moduleLocation = SettingsHandler._getModuleLocation(source);\r\n                }\r\n\r\n                // Open the window that the module should appear in\r\n                instantiatePromises.push(\r\n                    WindowHandler.openModuleInstance(\r\n                        moduleLocation,\r\n                        request,\r\n                        module\r\n                    )\r\n                );\r\n            } catch (e) {\r\n                // TODO: properply handle the error if something goes wrong\r\n                console.error(\r\n                    `Something went wrong while trying to instantiate ${module}: `,\r\n                    e\r\n                );\r\n            }\r\n        });\r\n\r\n        // Wait for all the promises to resolve and get their channels\r\n        const channels = await Promise.all(instantiatePromises);\r\n\r\n        // Determine whether to return only a single channel or an array of channels and return it\r\n        if (request.use == \"one\") {\r\n            return channels[0];\r\n        } else {\r\n            return channels.filter(channel => channel); // Remove failed instanciations\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes the handle request to a fixed format\r\n     * @param {Request} request - The request to normalize\r\n     * @returns {Request} The normalized request (same object as the paramater)\r\n     * @protected\r\n     */\r\n    static _normalizeHandleRequest(request) {\r\n        // Check if the request contains a valid use, if not set it to 'one'\r\n        const hasInvalidUse =\r\n            !request.use ||\r\n            (typeof request.use == \"string\" ||\r\n                !request.use.match(/^(one|all)$/g));\r\n        if (hasInvalidUse) request.use = \"one\";\r\n\r\n        // Ensure at least an empty data object is present in the request\r\n        if (!request.data) request.data = {};\r\n\r\n        // Make sure that when embeding GUI, the result element is opened in the same window\r\n        if (request.embedGUI) request._destinationWindowID = WindowHandler.ID;\r\n\r\n        // Check if the request source type is a module, if so, get its string identifier\r\n        if (request.source instanceof Module)\r\n            request.source = request.source.getPath().toString(true);\r\n\r\n        // Return the request\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Request module classes of a specific type\r\n     * @param {Request} request - The information on what module to get\r\n     * @returns {(Class<Module>|Object<string, Class<Module>>)} The module(s) that it could find with the specified type\r\n     * @public\r\n     */\r\n    static requestModule(request) {\r\n        // Normalize all the possibly passed requests\r\n        const requests = this._normalizeModuleRequest.apply(this, arguments);\r\n\r\n        // Retrieve the request modules\r\n        let requestsModules;\r\n\r\n        // Check if we are in the main process\r\n        if (isMain) {\r\n            // Directly resolve the request as we have access to all modules\r\n            requestsModules = requests.map(request => {\r\n                return this.__getModules(request, this.requiringModules);\r\n            });\r\n        } else {\r\n            // Send a command to the main window to look for modules to resolve the request\r\n            requestsModules = IPC.sendSync(\"Registry.request\", {\r\n                requests: requests,\r\n                requiringModules: this.requiringModules,\r\n            })[0];\r\n        }\r\n\r\n        // Format the response appropriately\r\n        if (requestsModules.length > 1) {\r\n            // Create a object to hold the output\r\n            const response = {};\r\n\r\n            // Map the modules to their request types\r\n            requestsModules.forEach((requestModules, i) => {\r\n                // Get the request corresponding to this module\r\n                const request = requests[i];\r\n\r\n                // Determine whether to return only a single channel or an array of module classes and return it\r\n                if (request.use == \"one\") {\r\n                    // Store a single request module under the correct name\r\n                    response[request.type] = requestModules[0];\r\n                } else {\r\n                    // Store all request modules under the correct name\r\n                    response[request.type] = requestModules;\r\n                }\r\n            });\r\n\r\n            // Return the modules indexed by request type\r\n            return response;\r\n        } else {\r\n            // Get the module class(es) corresponding to the request\r\n            const requestModules = requestsModules[0];\r\n\r\n            // Determine whether to return only a single channel or an array of module classes and return it\r\n            if (requests[0].use == \"one\") {\r\n                return requestModules[0];\r\n            } else {\r\n                return requestModules;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes the module request to a fixed format\r\n     * @param {Request} request - The request to normalize\r\n     * @returns {Request[]} The normalized requests in array form\r\n     * @protected\r\n     */\r\n    static _normalizeModuleRequest(request) {\r\n        // Get all the requests that were passed (multiple are allowed) TODO: indicate multiple in JSdoc\r\n        var requests = Array.from(arguments);\r\n\r\n        // Normalize the format of the requests\r\n        var requests = requests.map(request => {\r\n            // If the request is only a string rather than an object, turn it into an object\r\n            if (typeof request == \"string\") request = {type: request};\r\n\r\n            // Check if the request contains a valid use, if not set it to 'one'\r\n            const hasInvalidUse =\r\n                !request.use ||\r\n                (typeof request.use == \"string\" ||\r\n                    !request.use.match(/^(one|all)$/g));\r\n            if (hasInvalidUse) request.use = \"one\";\r\n\r\n            // Ensure at least an empty data object is present in the request\r\n            if (!request.data) request.data = {};\r\n\r\n            // Return the new request variable\r\n            return request;\r\n        });\r\n\r\n        // Return the requests\r\n        return requests;\r\n    }\r\n\r\n    /**\r\n     * A method to set up the required IPC listener for the request method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupRequest() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // Listen for requests getting routed through the main process\r\n            IPC.on(\"Registry.request\", event => {\r\n                // Check if there is a single request or multiples\r\n                if (event.data.request) {\r\n                    const request = event.data.request;\r\n                    const requiringModules = event.data.requiringModules;\r\n\r\n                    // Retrieve the priority mapping for the request\r\n                    const requestModules = this.__getModules(\r\n                        request,\r\n                        requiringModules\r\n                    );\r\n\r\n                    // Return the modules and their priorities\r\n                    return requestModules;\r\n                } else {\r\n                    const requests = event.data.requests;\r\n                    const requiringModules = event.data.requiringModules;\r\n\r\n                    // Retrieve the priority mapping for every request\r\n                    const requestsModules = requests.map(request => {\r\n                        return this.__getModules(request, requiringModules);\r\n                    });\r\n\r\n                    // Return the mapping of modules and their priorities\r\n                    return requestsModules;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the modules that can handle the passed request\r\n     * @param {Registry~Request} request - The request to find module classes for\r\n     * @param {string[]} loadingModules - A list of module paths that are currently being required\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module classes that have been chosen to handle the request\r\n     * @private\r\n     */\r\n    static __getModules(request, loadingModules) {\r\n        // Get the module listeners to handle this type of request\r\n        const listenerType = this.__getListeners(request.type);\r\n\r\n        // Map modules with their priority to this particular request\r\n        const priorities = listenerType.configs\r\n            .map(config => {\r\n                return {\r\n                    priority: config.filter(request),\r\n                    config: config,\r\n                };\r\n            })\r\n            .filter(\r\n                priority =>\r\n                    priority.priority > 0 &&\r\n                    loadingModules.indexOf(priority.config.modulePath) == -1\r\n            );\r\n\r\n        // Sort the results\r\n        priorities.sort((a, b) => b.priority - a.priority);\r\n\r\n        // Determine what modules to return\r\n        if (request.use == \"all\") {\r\n            // If all modules should be returned, simply extract the modules from the priority data and return them\r\n            return this.__getModulesFromConfigs(priorities.map(a => a.config));\r\n        } else if (typeof request.use == \"Function\") {\r\n            // If a filter function is provided, apply it and then extract the modules from the data and return them\r\n            return this.__getModulesFromConfigs(\r\n                priorities.filter(request.use).map(a => a.config)\r\n            );\r\n        } else {\r\n            // Otherwise only a single module should be returned, so simply return this module\r\n            return (\r\n                priorities[0] &&\r\n                this.__getModulesFromConfigs([priorities[0].config])\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes through the array of configs and maps it to the modules of the configs (requires modules if needed)\r\n     * @param {Registry~config[]} configs - The configs to get the modules from\r\n     * @returns {Array<Class<Module>>} The modules that got extracted fromt he configs\r\n     * @private\r\n     */\r\n    static __getModulesFromConfigs(configs) {\r\n        return configs.map(config => {\r\n            // Require the module from the config if this hasn't happened yet\r\n            if (!(config.module instanceof Module)) this._loadModule(config);\r\n\r\n            // Return the module itself, which should now in no situation be a path\r\n            return config.module;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Establishes a connection with a module with the defined requestPath\r\n     * @param {(string|requestPath)} requestPath - The unique request path of the module you are trying to conenct to\r\n     * @param {string} [subChannelType=undefined] - The sub channel to connect with\r\n     * @param {(Module|string|requestPath)} [senderID=undefined] - The channel ID to send messages back to for communication\r\n     * @returns {ChannelSender} A channel set up for communication with the specified module\r\n     * @async\r\n     * @public\r\n     */\r\n    static async getModuleChannel(requestPath, subChannelType, senderID) {\r\n        // Normalize the path to a string\r\n        if (typeof requestPath != \"string\")\r\n            requestPath = requestPath.toString(true);\r\n\r\n        // Create a channel sender to this module instance and return it\r\n        const channelSender = await ChannelHandler.createSender(\r\n            requestPath,\r\n            subChannelType,\r\n            senderID\r\n        );\r\n\r\n        // Find the requested module instance in this window (if present in this window)\r\n        const module = Registry._getModuleInstance(requestPath);\r\n\r\n        // Check if the module exists, and if so extract its element creator\r\n        if (module) {\r\n            const elementCreator = module.core.elementCreator;\r\n\r\n            // Attach the elementCreator to the channel\r\n            channelSender.__data.elementCreator = elementCreator;\r\n        }\r\n\r\n        // Return the channelSender\r\n        return channelSender;\r\n    }\r\n\r\n    // Module loading related methods\r\n    /**\r\n     * Loads a module at the specified path relative to the modules folder\r\n     * @param {string} path - The path to the module class\r\n     * @returns {Class<Module>} The module class that was loaded\r\n     * @protected\r\n     */\r\n    static _loadModule(config) {\r\n        // Get the path from the config\r\n        const path = config.modulePath;\r\n\r\n        // Only load the module if it hadn't been loaded already\r\n        if (!config.module) {\r\n            // Indicate that we have started requiring this module, to prevent import LM: recursion\r\n            this.requiringModules.push(path);\r\n\r\n            // Require module\r\n            const moduleImport = require(this.__getModulesPath(path));\r\n\r\n            // Indicate that we are no longer in the process of loading this module\r\n            const index = this.requiringModules.indexOf(path);\r\n            if (index != -1) this.requiringModules.splice(index, 1);\r\n\r\n            if (moduleImport) {\r\n                // Get the module from the import\r\n                const module = moduleImport.default;\r\n\r\n                // Attach the config to the class\r\n                module.config = config;\r\n\r\n                // Attach the module to the config\r\n                config.module = module;\r\n            }\r\n        }\r\n\r\n        // Return the module\r\n        return config.module;\r\n    }\r\n\r\n    /**\r\n     * Loads a module at the specified path relative to the modules folder, should only be used once the module is already properly loaded, and only from the main process\r\n     * @param {string} modulePath - The modulePath for the module to return\r\n     * @returns {Class<Module>} The module that is located here\r\n     * @protected\r\n     */\r\n    static _getModule(modulePath) {\r\n        // Retrieve the config for this path\r\n        const config = this.moduleConfigs[modulePath];\r\n\r\n        // If a config was found, return its module\r\n        if (config) return this._loadModule(config);\r\n    }\r\n\r\n    /**\r\n     * Loads a module config at the specified path relative to the modules folder\r\n     * @param {string} path - The path to the config\r\n     * @param {string} [modulePath] - The modulePath for the config to return\r\n     * @returns {Config[]} The config that was loaded\r\n     * @protected\r\n     */\r\n    static _loadConfig(path, modulePath) {\r\n        // Require the config\r\n        let configs = require(this.__getModulesPath(path)).default;\r\n\r\n        // Normalize it into an array of configs if needed\r\n        if (!(configs instanceof Array)) configs = [configs];\r\n\r\n        // Go through all configs\r\n        configs.forEach(config => {\r\n            // Add listener to the list of listeners for this request type\r\n            const listeners = this.__getListeners(config.type);\r\n            const index = listeners.configs.indexOf(config);\r\n            if (index != -1) return; // Don't add it, if it was already added\r\n\r\n            listeners.configs.push(config);\r\n\r\n            // Get the module path\r\n            let modulePath;\r\n            if (config.module) {\r\n                // Get the directory of the config path\r\n                let dir = path.split(Path.sep);\r\n                dir.pop();\r\n                dir = dir.join(\"/\");\r\n\r\n                // Get the module path relative to this dir\r\n                modulePath = Path.join(dir, config.module);\r\n            } else {\r\n                modulePath = path.replace(/\\.?config/, \"\");\r\n            }\r\n\r\n            // Normalize the path's seperators\r\n            modulePath = modulePath.replace(/\\\\/g, \"/\");\r\n\r\n            // Add a filter to the config if not present\r\n            if (!config.filter) config.filter = () => true;\r\n\r\n            // Attach the location of the module to the config\r\n            config.modulePath = modulePath;\r\n\r\n            // Store the path of the config\r\n            config.path = path;\r\n\r\n            // Store the config under its modulePath\r\n            this.moduleConfigs[modulePath] = config;\r\n        });\r\n\r\n        // If a modulePath was defined, return only the config of said path\r\n        if (modulePath)\r\n            return configs.find(config => config.modulePath == modulePath);\r\n\r\n        // Return all the retrieved configs\r\n        return configs;\r\n    }\r\n\r\n    /**\r\n     * Loads all the configs of available modules\r\n     * @returns {Promise<Array<Config>>} All the configs that have been loaded\r\n     * @async\r\n     * @protected\r\n     */\r\n    static _loadAllConfigs() {\r\n        const startPath = Path.resolve(__dirname, this.__getModulesPath());\r\n        const readDir = path => {\r\n            return new Promise((resolve, reject) => {\r\n                FS.readdir(path, (err, files) => {\r\n                    // Store the resulting configs to return\r\n                    const outConfigs = [];\r\n\r\n                    // Store async dir reading promises that have to be resolved\r\n                    const promises = [];\r\n\r\n                    // Read the files\r\n                    files.forEach(file => {\r\n                        const filePath = Path.join(path, file);\r\n                        // Check if this file is a directory or not\r\n                        if (FS.lstatSync(filePath).isDirectory()) {\r\n                            // Recurse on the directory, and store the promise in order to wait for it\r\n                            promises.push(readDir(filePath));\r\n                        } else {\r\n                            // Check if the file is a config, and if so, load it\r\n                            if (file.match(/config\\.js$/g)) {\r\n                                // Get the file path relative to the modules folder\r\n                                const relativeFilePath = filePath.substring(\r\n                                    startPath.length + 1\r\n                                );\r\n\r\n                                // Load the config and add it to the output configs\r\n                                outConfigs.push.apply(\r\n                                    outConfigs,\r\n                                    this._loadConfig(relativeFilePath)\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    // Wait for all the directory async recursions to finish\r\n                    Promise.all(promises).then(configLists => {\r\n                        // Add all returned lists to our main list\r\n                        configLists.forEach(configs => {\r\n                            outConfigs.push.apply(outConfigs, configs);\r\n                        });\r\n\r\n                        // Return our main list\r\n                        resolve(outConfigs);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n\r\n        // start the recursive directory reading and return its promise\r\n        return readDir(startPath);\r\n    }\r\n\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param {String} [path=\"\"] - The path to append to the modules directory\r\n     * @returns {String} The relative path to the directory\r\n     * @private\r\n     */\r\n    static __getModulesPath(path = \"\") {\r\n        // Calculate how many dirs to go up to reach the root\r\n        let back = __dirname.substring(process.cwd().length).split(Path.sep);\r\n        back.pop();\r\n        back = back.map(() => \"..\").join(\"/\");\r\n\r\n        // Get the path from the root to the indicated module\r\n        return Path.join(back, \"dist\", \"modules\", path);\r\n    }\r\n\r\n    /**\r\n     * Creates an object to store what classes can answer a certain request type if it hasn't been created already, and returns it\r\n     * @param {String} type - The request type to return the object of\r\n     * @returns {Registry~Requestlistener} An object that tracks the listeners for a certain request type\r\n     * @private\r\n     */\r\n    static __getListeners(type) {\r\n        // Create listeners type variable if not available\r\n        if (!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                configs: [],\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n\r\n    /**\r\n     * Returns a module's config' based on its location, if it has been loaded in this window/process\r\n     * @param {Registry~ModulePath} modulePath - The location of the module class to get the config from\r\n     * @returns {Registry~Config} The config that was found\r\n     * @protected\r\n     */\r\n    static _getModuleConfig(modulePath) {\r\n        return this.moduleConfigs[modulePath];\r\n    }\r\n\r\n    /**\r\n     * Returns the config file of a certain module\r\n     * @param {Registry~ModulePath} modulePath - The location of the module\r\n     * @returns {Registry~Config} - The config that was found for this modulePath\r\n     * @public\r\n     */\r\n    static getModuleConfig(modulePath) {\r\n        // First check for a local config in this window/process\r\n        const localModuleConfig = this._getModuleConfig(modulePath);\r\n\r\n        // If present, return it\r\n        if (localModuleConfig) return localModuleConfig;\r\n\r\n        // Otherwise request the config from the main process\r\n        if (!isMain) {\r\n            const moduleConfig = IPC.send(\r\n                \"Registry.getModuleConfig\",\r\n                modulePath.toString()\r\n            );\r\n\r\n            // Check if a config was found\r\n            if (moduleConfig) {\r\n                // Store the config locally to improve future performance\r\n                this.moduleConfigs[moduleConfig.modulePath] = moduleConfig;\r\n\r\n                // return the moduleConfig\r\n                return moduleConfig;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the getModuleConfig method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupGetModuleConfig() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // Listen for windows/processes listening for the request of a module config\r\n            IPC.on(\"Registry.getModuleConfig\", event => {\r\n                // Extract the modulePath\r\n                const modulePath = event.data;\r\n\r\n                // Return the config if found\r\n                return this.getModuleConfig(modulePath);\r\n            });\r\n        }\r\n    }\r\n\r\n    // Module registation related methods\r\n    /**\r\n     * Registers the module so the registry knows of its existence\r\n     * @param {Module} moduleInstance - The module to register\r\n     * @param {number} [uniqueID] - A specific uniqueID that the module should get (only used when moving modules)\r\n     * @returns {number} The unique ID that the module instance has now been assigned\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _registerModuleInstance(moduleInstance, uniqueID) {\r\n        // Extract data from the moduleInstance\r\n        const requestPath = moduleInstance.getPath();\r\n        const isEmbeded = moduleInstance._isEmbeded();\r\n\r\n        // Get the a unique ID for the request path\r\n        const ID = (await IPC.send(\r\n            \"Registry.registerModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n                isEmbeded: isEmbeded,\r\n                uniqueID: uniqueID,\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Assign the ID to this request path and return it\r\n        requestPath.getModuleID().ID = ID;\r\n\r\n        // Store the instance in this module/process\r\n        this.moduleInstances[\r\n            moduleInstance.getPath().toString(true)\r\n        ] = moduleInstance;\r\n\r\n        // Return the obtained ID\r\n        return ID;\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the registerModuleInstance method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupRegisterModuleInstance() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // List for modules getting registered\r\n            IPC.on(\"Registry.registerModuleInstance\", event => {\r\n                // Get whether or not the module is embeded\r\n                const embeded = event.data.isEmbeded;\r\n\r\n                // Get the request path for the module to register\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to register\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, or create it if non-existent\r\n                let paths = this.requestPaths[requestPath.toString()];\r\n                if (!paths)\r\n                    paths = this.requestPaths[requestPath.toString()] = {};\r\n\r\n                // Create a unique ID for the path\r\n                let ID = 0;\r\n\r\n                // Check if a ID was provided by the event\r\n                if (event.data.uniqueID) {\r\n                    // If so, just use that ID\r\n                    ID = event.data.uniqueID;\r\n                } else {\r\n                    // Find a unique ID in this collection\r\n                    while (paths[ID]) ID++;\r\n                }\r\n\r\n                // Asssign this unique ID to the last module of the request path and store the path\r\n                requestPath.getModuleID().ID = ID;\r\n                paths[ID] = requestPath;\r\n\r\n                // Retrieve the request path list that exists for that class, or create it if non-existent\r\n                let pathList = this.moduleInstancePaths[moduleClass];\r\n                if (!pathList)\r\n                    pathList = this.moduleInstancePaths[moduleClass] = [];\r\n\r\n                // Add this path to the list together with the window it is stored in\r\n                pathList.push({\r\n                    window: event.sourceID,\r\n                    path: requestPath.toString(true),\r\n                    embeded: embeded,\r\n                    active: false,\r\n                });\r\n\r\n                // Return the unique request path identifier\r\n                return ID;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that the registration and initialisation process of a module instance has completed\r\n     * @param {Module} moduleInstance - The module that finished registration\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _registerModuleInstanceCompleted(moduleInstance) {\r\n        // Retiever the requestPath of the moduleInstance\r\n        const requestPath = moduleInstance.getPath();\r\n\r\n        // Forward the data to the main process\r\n        return IPC.send(\r\n            \"Registry.registerModuleInstanceCompleted\",\r\n            {requestPath: requestPath.toString(true)},\r\n            0\r\n        );\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the registerModuleInstanceComplete method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupRegisterModuleInstanceCompleted() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // Listen for modules indicating that their setup has completed\r\n            IPC.on(\"Registry.registerModuleInstanceCompleted\", event => {\r\n                // Get the request path for the module to activate\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to activate\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Retrieve the request path list that exists for that class, or create it if non-existent\r\n                const pathList = this.moduleInstancePaths[moduleClass];\r\n\r\n                // Get the item corresponding to this requestPath\r\n                const item = pathList.find(\r\n                    item => item.path == event.data.requestPath\r\n                );\r\n\r\n                // Make sure an item was found\r\n                if (item) {\r\n                    // Indicate that the module is now active\r\n                    item.active = true;\r\n\r\n                    // Check if there is a pattern waiting that matches this requestPath\r\n                    this.moduleAwaiters.forEach((waiter, index) => {\r\n                        // Extract the pattern\r\n                        const pattern = waiter.pattern;\r\n\r\n                        // Make sure we either accept embeded modules, or this module isn't embeded\r\n                        if (!waiter.acceptEmbeded && item.embeded) return;\r\n\r\n                        // Test if the pattern matches the new module instance\r\n                        if (pattern.test(requestPath)) {\r\n                            // If it does, delete the item\r\n                            this.moduleAwaiters.splice(index, 1);\r\n\r\n                            // And resolve the promise when the module finished registering\r\n                            waiter.resolve(requestPath.toString(true));\r\n                        }\r\n                    });\r\n                } else {\r\n                    // This should in theory not happen\r\n                    console.error(\r\n                        \"Something went wrong; \",\r\n                        event.data.requestPath + \" couldn't be found\"\r\n                    );\r\n                    console.log(pathList);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deregisters the module so the registry knows it is no longer used\r\n     * @param {Module} moduleInstance - The module to deregister\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _deregisterModuleInstance(moduleInstance) {\r\n        // Remove the module path in the main process\r\n        const requestPath = moduleInstance.getPath();\r\n        await IPC.send(\r\n            \"Registry.deregisterModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        );\r\n\r\n        // Remove the instance from this process/window\r\n        delete this.moduleInstances[moduleInstance.getPath().toString(true)];\r\n\r\n        // Close this window if there are no more modules in it\r\n        if (Object.keys(this.moduleInstances).length == 0)\r\n            WindowHandler._close();\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the deregisterModuleInstance method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupDeregisterModuleInstance() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // Listen for modules getting deregistered\r\n            IPC.on(\"Registry.deregisterModuleInstance\", event => {\r\n                // Get the request path for the module to deregister\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to deregister\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Get the paths that are stored for this class\r\n                const pathList = this.moduleInstancePaths[moduleClass];\r\n                if (pathList) {\r\n                    // get the unique request path in string form\r\n                    const requestPathString = requestPath.toString(true);\r\n\r\n                    // Filter out the object that corresponds with this string\r\n                    this.moduleInstancePaths[moduleClass] = pathList.filter(\r\n                        path => {\r\n                            return path.path != requestPathString;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // Get the unique path identifier from the request path\r\n                const ID = requestPath.getModuleID().ID;\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, and delete the path with this unique ID\r\n                const paths = this.requestPaths[requestPath.toString()];\r\n                if (paths) delete paths[ID];\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the modules that are currently registered\r\n     * @returns {Module[]} The modules are currently registered\r\n     * @protected\r\n     */\r\n    static _getModuleInstances() {\r\n        return this.moduleInstances;\r\n    }\r\n\r\n    /**\r\n     * Returns the module with a certain request path if available in the window\r\n     * @param {(string|RequestPath)} requestPath - The unique request path of the module you are looking for\r\n     * @returns {(Module|null)} The modules that got found\r\n     * @protected\r\n     */\r\n    static _getModuleInstance(requestPath) {\r\n        // Normalize the path to a string\r\n        if (typeof requestPath != \"string\")\r\n            requestPath = requestPath.toString(true);\r\n\r\n        // Go through all instances to find a module that matches this path\r\n        return this.moduleInstances[requestPath];\r\n    }\r\n\r\n    // Methods that help with hackability of modules (mainly in other windows)\r\n    // TODO: deprecate this method and replace it with something that uses\r\n    /**\r\n     * Gets channels to all instances of a specific module class\r\n     * @param {(Class<Module>|Module)} module - The module to get the instance of\r\n     * @param {string} [subChannel] - The sub channel to target\r\n     * @param {(Module|RequestPath|string)} source - The channelID to return messages to if needed\r\n     * @param {number} [windowID] - Only looks in this window for instances if provided\r\n     * @returns {Promise<ChannelSender[]>} The channels that were set up for the found modules\r\n     * @async\r\n     * @public\r\n     */\r\n    static async getModuleInstanceChannels(\r\n        module,\r\n        subChannel,\r\n        source,\r\n        windowID\r\n    ) {\r\n        // Get the module class path from the module\r\n        if (module.getClass) module = module.getClass();\r\n        if (module.getPath) module = module.getPath();\r\n\r\n        // Ask for all module instances from main\r\n        const instancePaths = (await IPC.send(\r\n            \"Registry.getModuleInstances\",\r\n            module,\r\n            0\r\n        ))[0];\r\n\r\n        // Get the actual unique request path from the module\r\n        if (source.getPath) source = source.getPath().toString(true);\r\n\r\n        // If a windowID is specified, filter the instancePaths so only ones in the correct window are kept\r\n        if (windowID != undefined)\r\n            instancePaths = instancePaths.filter(path => {\r\n                return path.windowID == windowID;\r\n            });\r\n\r\n        // Create a channel for each of retrieved instance paths\r\n        const channels = instancePaths.map(path => {\r\n            return this.getModuleChannel(path.path, subChannel, source);\r\n        });\r\n\r\n        // Wait for all channels to be created and then return them\r\n        return Promise.all(channels);\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the getModuleInstanceChannels method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupGetModuleInstanceChannels() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // Listen for windows/processes requesting instances of a certain module\r\n            IPC.on(\"Registry.getModuleInstances\", event => {\r\n                // Extract the module class path that we are looking for\r\n                const data = event.data;\r\n                const modulePath = data.modulePath;\r\n\r\n                // Return the request path attached to this class\r\n                return this.moduleInstancePaths[modulePath];\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves a specific module from one location to another\r\n     * @param {RequestPathPattern} requestPathPattern - A pattern for the module to target\r\n     * @param {WindowHandler~moduleLocation} moduleLocation - The location that the module should move to\r\n     * @param {boolean} [includeEmbeded=false] - Whether to also target embeded modules\r\n     * @returns {Promise<RequestPath[]>} - The request paths of the modules that were moved\r\n     * @async\r\n     * @public\r\n     */\r\n    static async moveModuleTo(\r\n        requestPathPattern,\r\n        moduleLocation,\r\n        includeEmbeded\r\n    ) {\r\n        // Send a request to move the module to all windows/processes\r\n        const responses = await IPC.send(\"Registry.moveModuleTo\", {\r\n            pattern: requestPathPattern.toString(),\r\n            location: moduleLocation,\r\n            includeEmbeded: includeEmbeded,\r\n        });\r\n\r\n        // Create an array to store all module paths\r\n        const modulePaths = [];\r\n\r\n        // Combine all responses to a single array\r\n        responses.forEach(response => {\r\n            // Push all paths to the array\r\n            modulePaths.push.apply(modulePaths, response);\r\n        });\r\n\r\n        // Return the module ids\r\n        return modulePaths;\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the moveModuleTo method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupMoveModuleTo() {\r\n        // Listen for windows/processes trying to move modules\r\n        IPC.on(\"Registry.moveModuleTo\", event => {\r\n            // Extract the relevant information\r\n            const pattern = new RequestPathPattern(event.data.pattern);\r\n            const location = event.data.location;\r\n            const includeEmbeded = event.data.includeEmbeded;\r\n\r\n            // Go through all module instances to find any matches\r\n            const modulePaths = Object.keys(this.moduleInstances).filter(\r\n                modulePath => {\r\n                    // Get the module corresponding to this modulePath\r\n                    const module = this.moduleInstances[modulePath];\r\n\r\n                    // Check whether this module is not embeded\r\n                    const embedCheck =\r\n                        includeEmbeded ||\r\n                        !module.getRequest() ||\r\n                        !module.getRequest().embedGUI;\r\n\r\n                    // Check if the pattern matches\r\n                    return embedCheck && pattern.test(modulePath);\r\n                }\r\n            );\r\n\r\n            // Move all matching modules to the specified location and return a promise resolving in the path once the module moved\r\n            return Promise.all(\r\n                modulePaths.map(modulePath => {\r\n                    // Get the module corresponding to this modulePath\r\n                    const module = this.moduleInstances[modulePath];\r\n\r\n                    // Move the module\r\n                    const promise = module.moveTo(location);\r\n\r\n                    // Make the promise resolve into the module's path\r\n                    return promise.then(channelSender => {\r\n                        return modulePath;\r\n                    });\r\n                })\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Waits for a particular module matching the given requestPath to be registered\r\n     * @param {RequestPathPattern} requestPathPattern - A pattern for the module to target\r\n     * @param {boolean} [acceptEmbeded=false] - Whether to also accept embeded modules\r\n     * @returns {Promise<RequestPath>} - The request path that matched the request\r\n     * @async\r\n     * @public\r\n     */\r\n    static async awaitModuleCreation(requestPathPattern, acceptEmbeded) {\r\n        // Send the await call to the main module and return it's promise\r\n        return IPC.send(\r\n            \"Registry.awaitModuleCreation\",\r\n            {\r\n                pattern: requestPathPattern.toString(),\r\n                acceptEmbeded: acceptEmbeded,\r\n            },\r\n            0\r\n        ).then(responses => responses[0]);\r\n    }\r\n    /**\r\n     * A method to set up the required IPC listener for the awaitModuleCreation method\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setupAwaitModuleCreation() {\r\n        // Make sure to only set this up in the main process\r\n        if (isMain) {\r\n            // Listen for windows/processes listening for the creation of a module\r\n            IPC.on(\"Registry.awaitModuleCreation\", event => {\r\n                // Exactract the passed data\r\n                const acceptEmbeded = event.data.acceptEmbeded;\r\n                const pattern = new RequestPathPattern(event.data.pattern);\r\n\r\n                // Check if a module already exists that matches this pattern\r\n                const moduleClassPaths = Object.keys(this.moduleInstancePaths);\r\n\r\n                // Create a list to store the matches\r\n                const matches = [];\r\n\r\n                // Go through all paths\r\n                moduleClassPaths.forEach(requestPath => {\r\n                    // Get the list of unique module instance paths from the path\r\n                    const uniquePaths = this.moduleInstancePaths[requestPath];\r\n\r\n                    // Go through the unique paths\r\n                    uniquePaths.forEach(item => {\r\n                        // Make sure the module is active\r\n                        if (!item.active) return;\r\n\r\n                        // Make sure we either accept embeded modules, or this module isn't embeded\r\n                        if (!acceptEmbeded && item.embeded) return;\r\n\r\n                        // Get the unique path from the item\r\n                        const uniquePath = item.path;\r\n\r\n                        // Test the unique path\r\n                        if (pattern.test(uniquePath)) matches.push(uniquePath);\r\n                    });\r\n                });\r\n\r\n                // Check if any matches were found\r\n                if (matches.length > 0) return matches[0];\r\n\r\n                // If no matches were found, create a promise to return\r\n                let resolver;\r\n                const promise = new Promise(resolve => {\r\n                    resolver = resolve;\r\n                });\r\n\r\n                // Store the awaiter to be resolved later\r\n                this.moduleAwaiters.push({\r\n                    pattern: pattern,\r\n                    acceptEmbeded: acceptEmbeded,\r\n                    resolve: resolver,\r\n                });\r\n\r\n                // Return the promise\r\n                return promise;\r\n            });\r\n        }\r\n    }\r\n\r\n    // Initialisation code for the class\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the configs, indexed by modulePath\r\n        this.moduleConfigs = {};\r\n\r\n        // Stores instances of modules registered in this window/process by requestPath\r\n        this.moduleInstances = {};\r\n\r\n        // Keep track of modules that are currently being required\r\n        this.requiringModules = [];\r\n\r\n        // Add fields unique to the main process\r\n        if (isMain) {\r\n            // Stores unique module instance request paths, indexed by [request path][UID]\r\n            this.requestPaths = {};\r\n\r\n            // Stores unique module instance request path lists, indexed by module path\r\n            this.moduleInstancePaths = {};\r\n\r\n            // Store listeners for the creation of specific modules\r\n            this.moduleAwaiters = [];\r\n        }\r\n\r\n        // Setup all IPC listeners\r\n        this.__setupRequest();\r\n        this.__setupRegisterModuleInstance();\r\n        this.__setupRegisterModuleInstanceCompleted();\r\n        this.__setupDeregisterModuleInstance();\r\n        this.__setupGetModuleInstanceChannels();\r\n        this.__setupMoveModuleTo();\r\n        this.__setupAwaitModuleCreation();\r\n        this.__setupGetModuleConfig();\r\n    }\r\n}\r\nRegistry.__setup();\r\n"]}