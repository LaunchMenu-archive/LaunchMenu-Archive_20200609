{"version":3,"sources":["../../../src/core/registry/registry.js"],"names":["defaultModuleData","location","window","section","Registry","requestHandle","request","use","match","source","Module","getPath","toString","__request","requestModule","requests","arguments","map","type","requestsModules","length","response","i","requestType","_loadModule","path","moduleClasses","data","require","__getModulesPath","clas","default","config","modulePath","module","listeners","__getListeners","push","_loadAllModules","_registerModuleInstance","moduleInstance","moduleInstances","requestPath","ID","IPC","send","getModuleID","_deregisterModuleInstance","index","indexOf","splice","WindowHandler","_close","_getModuleInstanceCount","Path","join","__getModules","listenerType","priorities","listener","priority","filter","sort","a","b","__resolveRequest","requestModules","instantiatePromises","Array","forEach","RequestPath","augmentPath","moduleData","SettingsHandler","_getModuleFile","openModuleInstance","e","console","error","channels","all","channel","synced","isMain","sendSync","then","responses","getModuleInstanceChannels","windowID","subChannel","instancePaths","undefined","ChannelHandler","createSender","__setup","on","event","requestPaths","moduleInstancePaths","pathList","sourceID","paths","requestPathString"],"mappings":"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","file":"registry.js","sourcesContent":["import Path from \"path\";\r\nimport isMain from \"../isMain\";\r\nimport Module from \"./module\";\r\nimport RequestPath from \"./requestPath\";\r\nimport SettingsHandler from \"../communication/data/settingsHandler\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport ChannelHandler from \"../communication/channel\";\r\nimport IPC from \"../communication/IPC\";\r\n\r\nconst defaultModuleData = {\r\n    location: {\r\n        window: 1,\r\n        section: 0\r\n    }\r\n};\r\n\r\n/**\r\n * A class to track all the modules, and handle module requests\r\n */\r\nclass Registry{\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {{type:String, execute:String|function, data:Object, source:Module}} request The information on how to handle the data\r\n     * @return {Promise} The Promise that shall return the channels created to communicate with the modules\r\n     */\r\n    static requestHandle(request){\r\n        if(!request.use || (typeof(request.use)==\"string\" || !request.use.match(/^(one|all)$/g)))\r\n            request.use = \"one\";\r\n        if(request.source instanceof Module)\r\n            request.source = request.source.getPath().toString(true);\r\n        return this.__request([request], \"handle\");\r\n    }\r\n    static requestModule(request){\r\n        var requests = Array.from(arguments);\r\n\r\n        // Normalize the request format\r\n        var requests = requests.map(request=>{\r\n            if(typeof(request)==\"string\")\r\n                request = {type: request};\r\n            if(!request.use || (typeof(request.use)==\"string\" || !request.use.match(/^(one|all)$/g)))\r\n                request.use = \"one\";\r\n            return request;\r\n        });\r\n\r\n        // Retrieve the request modules\r\n        const requestsModules = this.__request(requests, \"module\", true);\r\n\r\n        // Format the response appropriately\r\n        if(requestsModules.length>1){\r\n            const response = {};\r\n\r\n            // Map the modules to their request types\r\n            for(let i=0; i<requestsModules.length; i++){\r\n                const requestType = requests[i].type;\r\n                response[requestType] = requestsModules[i];\r\n            }\r\n\r\n            return response;\r\n        }else{\r\n            // Directly return the modules from the only request\r\n            return requestsModules[0];\r\n        }\r\n    }\r\n    // /**\r\n    //  * Registers a module in the registry such that it can be requested by other modules\r\n    //  * @param  {Class} Class The class of the module you want to register\r\n    //  * @param  {{type:String, filter:function(request)}} classListener An event you would like this module to act on\r\n    //  * @return {Undefined} The method returns no useful information\r\n    //  */\r\n    // static __register(Class, ...classListeners){\r\n    //     // Set the path of the module\r\n    //     Class.modulePath = globalModulePath;\r\n    //\r\n    //     // Register the module itself\r\n    //     this.moduleClasses[Class.modulePath] = {\r\n    //         class: Class,\r\n    //         listeners: classListeners\r\n    //     };\r\n    //\r\n    //     // Register all the listeners\r\n    //     classListeners.forEach(listener=>{\r\n    //         // Keep a connection with the module itself\r\n    //         listener.module = Class;\r\n    //\r\n    //         // Add to the list of listeners for this request type\r\n    //         const listeners = this.__getListeners(listener.type);\r\n    //         listeners.listeners.push(listener);\r\n    //     });\r\n    // }\r\n\r\n    // Protected methods\r\n    static _loadModule(path){\r\n        if(!this.moduleClasses[path]){\r\n            // Require module\r\n            const data = require(this.__getModulesPath(path));\r\n\r\n            // Verify all necessary data is passed\r\n            if(data){\r\n                const clas = data.default;\r\n                const config = data.config;\r\n                if(config){\r\n                    // Augment data with some variables that can be extracted\r\n                    clas.modulePath = path;\r\n                    config.module = clas;\r\n\r\n                    // Register the module itself\r\n                    this.moduleClasses[path] = data;\r\n\r\n                    // Add listener to the list of listeners for this request type\r\n                    const listeners = this.__getListeners(config.type);\r\n                    listeners.listeners.push(config);\r\n                }else{\r\n                    return data;\r\n                }\r\n            }\r\n        }\r\n        return this.moduleClasses[path];\r\n    }\r\n    static _loadAllModules(){\r\n        //TODO make a module loader\r\n    }\r\n\r\n    static async _registerModuleInstance(moduleInstance){\r\n        // Store the instance in this module/process\r\n        this.moduleInstances.push(moduleInstance);\r\n\r\n        // Set the proper ID for the request path\r\n        const requestPath = moduleInstance.getPath();\r\n        const ID = (await IPC.send(\"Registry.registerModuleInstance\", {\r\n            requestPath: requestPath.toString(true)\r\n        }, 0))[0];\r\n        requestPath.getModuleID().ID = ID;\r\n        return ID;\r\n    }\r\n    static async _deregisterModuleInstance(moduleInstance){\r\n        // Remove the module path in the main process\r\n        const requestPath = moduleInstance.getPath();\r\n        await IPC.send(\"Registry.deregisterModuleInstance\", {\r\n            requestPath: requestPath.toString(true)\r\n        }, 0);\r\n\r\n        // Remove the instance from this module/process\r\n        const index = this.moduleInstances.indexOf(moduleInstance);\r\n        if(index!==-1) this.moduleInstances.splice(index, 1);\r\n        if(this.moduleInstances.length==0)\r\n            WindowHandler._close();\r\n    }\r\n    static _getModuleInstanceCount(){\r\n        return this.moduleInstances.length;\r\n    }\r\n\r\n    // Private methods\r\n    /**\r\n     * Creates the listener variable for a certain type if necessary, and returns it\r\n     * @param  {String} type The request type to return the listener of\r\n     * @return {{type:String, listeners:[{module:Module, filter:function(request)}, ...]}} An object that tracks the listeners for a certain request type\r\n     */\r\n    static __getListeners(type){\r\n        // Create listeners type variable if not available\r\n        if(!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                listeners: []\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param  {String} [path=\"\"] The path to append to the modules directory\r\n     * @return {String}           The relative path to the directory\r\n     */\r\n    static __getModulesPath(path=\"\"){\r\n        return Path.join(\"..\", \"..\", \"modules\", path);\r\n    }\r\n\r\n    static __getModules(request){\r\n        // Get the module listeners to handle this type of request\r\n        const listenerType = this.__getListeners(request.type);\r\n\r\n        // Map modules with their priority to this particular request\r\n        const priorities = listenerType.listeners.map(listener=>{\r\n            return {\r\n                priority:listener.filter(request),\r\n                module:listener.module\r\n            };\r\n        }).filter(priority=>priority.priority>0);\r\n\r\n        // Sort the results\r\n        priorities.sort((a,b)=>b.priority-a.priority);\r\n\r\n        // Determine what modules to return\r\n        if(request.use==\"all\"){\r\n            return priorities.map(a=>a.module);\r\n        }else if(typeof(request.use)==\"Function\"){\r\n            return priorities.filter(request.use).map(a=>a.module);\r\n        }else{\r\n            return priorities[0] && priorities[0].module;\r\n        }\r\n    }\r\n    static async __resolveRequest(type, requests, requestsModules){\r\n        // Resolve request by simply returning the module if it was a module request,\r\n        //      or instanciate a module and return a channel on a handle request\r\n        if(type==\"module\"){\r\n            return requestsModules;\r\n        }else if(type==\"handle\"){ // The handle type only permits 1 request to exist\r\n            let requestModules = requestsModules[0];\r\n            const request = requests[0];\r\n\r\n            // In order to batch the await, instead of waiting between each open instance request\r\n            const instantiatePromises = [];\r\n\r\n            if(!(requestModules instanceof Array))\r\n                requestModules = [requestModules];\r\n\r\n            // Go through modules for 1 request\r\n            requestModules.forEach(module=>{\r\n                try{\r\n                    // Create the proper request path\r\n                    let source;\r\n                    if(request.source){\r\n                        source = new RequestPath(request.source).augmentPath(module);\r\n                    }else{\r\n                        source = new RequestPath(module);\r\n                    }\r\n\r\n                    // Attempt to retrieve the correct startup settings\r\n                    let moduleData = SettingsHandler._getModuleFile(source);\r\n                    if(!moduleData)\r\n                        moduleData = SettingsHandler._getModuleFile(new RequestPath(module));\r\n                    if(!moduleData)\r\n                        moduleData = defaultModuleData;\r\n\r\n                    // Open the window that the module should appear in\r\n                    instantiatePromises.push(\r\n                        WindowHandler.openModuleInstance(\r\n                            moduleData,\r\n                            request,\r\n                            module.toString()\r\n                        )\r\n                    );\r\n                }catch(e){\r\n                    console.error(`Something went wrong while trying to instantiate ${module}: `, e);\r\n                }\r\n            });\r\n\r\n\r\n            // Return all the created channels once ready\r\n            const channels = await Promise.all(instantiatePromises);\r\n\r\n            if(request.use==\"one\"){\r\n                return channels[0];\r\n            }else{\r\n                return channels.filter(channel=>channel) // Remove failed instanciations\r\n            }\r\n        }\r\n    }\r\n    static __request(requests, type, synced){\r\n        if(synced){\r\n            if(isMain){\r\n                // Directly resolve the request as we have access to all modules\r\n                return requests.map(request=>{\r\n                    return this.__getModules(request);\r\n                });\r\n            }else{\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                return IPC.sendSync(\"Registry.request\", requests)[0];\r\n            }\r\n        }else{\r\n            // Retrieve the modules to resolve the request\r\n            if(isMain){\r\n                // Directly resolve the request as we have access to all modules\r\n                const requestsModules = requests.map(request=>{\r\n                    return this.__getModules(request);\r\n                });\r\n                return this.__resolveRequest(type, requests, requestsModules);\r\n            }else{\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                return IPC.send(\"Registry.request\", requests, 0).then(responses=>{\r\n                    const requestsModules = responses[0];\r\n\r\n                    return this.__resolveRequest(type, requests, requestsModules);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: test if this method works at all\r\n    static async getModuleInstanceChannels(module, windowID, subChannel, source){\r\n        if(module.getPath) module = module.getPath();\r\n        const responses = (await IPC.send(\"Registry.getModuleInstances\", module, 0))[0];\r\n        const instancePaths = responses;\r\n        if(source.getPath) source = source.getPath();\r\n\r\n        if(windowID!=undefined)\r\n            instancePaths = instancePaths.filter(path=>{\r\n                return path.windowID==windowID;\r\n            });\r\n\r\n        instancePaths = instancePaths.map(path=>{\r\n            return ChannelHandler.createSender(path.path, subChannel, source);\r\n        });\r\n\r\n        return Promise.all(instancePaths);\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {Undefined} The method returns no useful information\r\n     */\r\n    static __setup(){\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the registered modules themselves, indexed by path\r\n        this.moduleClasses = {};\r\n\r\n        // Stores instances of modules registered in this window/process\r\n        this.moduleInstances = [];\r\n\r\n        // Set up the IPC listeners in the renderers and main process to allow renderers to request modules\r\n        if(isMain){\r\n            // Filter out possible modules in this window to handle the handle request\r\n            IPC.on(\"Registry.request\", event=>{\r\n                const requests = event.data;\r\n\r\n                // Retrieve the priority mapping for every request\r\n                const requestsModules = requests.map(request=>{\r\n                    return this.__getModules(request);\r\n                });\r\n\r\n                // Return the mapping of modules and their priorities\r\n                return requestsModules;\r\n            });\r\n\r\n\r\n            // Stores unique module instance request paths, indexed by [request path][UID]\r\n            this.requestPaths = {};\r\n\r\n            // Stores unique module instance request path lists, indexed by module path\r\n            this.moduleInstancePaths = {};\r\n\r\n            // Listen for module instances being registered\r\n            IPC.on(\"Registry.registerModuleInstance\", event=>{\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                const type = requestPath.getModuleID().module;\r\n                let pathList = this.moduleInstancePaths[type];\r\n                if(!pathList)\r\n                    pathList = this.moduleInstancePaths[type] = [];\r\n                pathList.push({\r\n                    window: event.sourceID,\r\n                    path: requestPath.toString(true)\r\n                });\r\n\r\n                let paths = this.requestPaths[requestPath.toString()];\r\n                if(!paths)\r\n                    paths = this.requestPaths[requestPath.toString()] = {};\r\n\r\n                let ID = 0;\r\n                while(paths[ID]) ID++;\r\n\r\n                requestPath.getModuleID().ID = ID;\r\n                paths[ID] = requestPath;\r\n                return ID;\r\n            });\r\n\r\n            // Listen for module instances being deregistered\r\n            IPC.on(\"Registry.deregisterModuleInstance\", event=>{\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                const type = requestPath.getModuleID().module;\r\n                const pathList = this.moduleInstancePaths[type];\r\n                if(pathList){\r\n                    const requestPathString = requestPath.toString(true);\r\n                    this.moduleInstancePaths[type] = pathList.filter(path=>{\r\n                        return path.path!=requestPathString;\r\n                    });\r\n                }\r\n\r\n                const paths = this.requestPaths[requestPath.toString()];\r\n                const ID = requestPath.getModuleID().ID;\r\n                if(paths)\r\n                    delete paths[ID];\r\n            });\r\n\r\n            // Listen for windows/processes requesting instances of a certain module\r\n            IPC.on(\"Registry.getModuleInstances\", event=>{\r\n                const data = event.data;\r\n                const modulePath = event.modulePath;\r\n                return this.moduleInstancePaths[modulePath];\r\n            });\r\n        }\r\n    }\r\n};\r\nRegistry.__setup();\r\nexport default Registry;\r\n"]}