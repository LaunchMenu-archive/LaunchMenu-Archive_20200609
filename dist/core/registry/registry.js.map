{"version":3,"sources":["../../../src/core/registry/registry.js"],"names":["globalModulePath","Registry","requestHandle","data","request","use","__request","requestModule","register","Class","classListeners","modulePath","modules","class","listeners","forEach","listener","module","__getListeners","type","push","loadModule","path","require","__getModulesPath","loadAllModules","Path","join","__getModules","listenerType","priorities","map","priority","filter","sort","a","b","__resolveRequest","requestID","requests","resolve","ID","requestData","promise","reject","IPC","_isRenderer","send","__setup","on","event","source","sourceID"],"mappings":"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","file":"registry.js","sourcesContent":["import Path from \"path\";\r\nimport IPC from \"../communication/IPC\";\r\nvar globalModulePath;\r\nclass Registry{\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {{type:String, execute:String|function, data:Object, source:Module}} data The information on how to handle the data\r\n     * @return {Promise} The Promise that shall return the channels created to communicate with the modules\r\n     */\r\n    static requestHandle(data){\r\n        if(!request.use) request.use = \"all\";\r\n        return this.__request(request, \"handle\");\r\n    }\r\n    static requestModule(request){\r\n        if(!request.use) request.use = \"one\";\r\n        return this.__request(request, \"module\");\r\n    }\r\n    /**\r\n     * Registers a module in the registry such that it can be requested by other modules\r\n     * @param  {Class} Class The class of the module you want to register\r\n     * @param  {{type:String, filter:function(request)}} classListener An event you would like this module to act on\r\n     * @return {Undefined} The method returns no useful information\r\n     */\r\n    static register(Class, ...classListeners){\r\n        // Set the path of the module\r\n        Class.modulePath = globalModulePath;\r\n\r\n        // Register the module itself\r\n        this.modules[Class.modulePath] = {\r\n            class: Class,\r\n            listeners: classListeners\r\n        };\r\n\r\n        // Register all the listeners\r\n        classListeners.forEach(listener=>{\r\n            // Keep a connection with the module itself\r\n            listener.module = Class;\r\n\r\n            // Add to the list of listeners for this request type\r\n            var listeners = this.__getListeners(listener.type);\r\n            listeners.listeners.push(listener);\r\n        });\r\n    }\r\n\r\n    // Protected methods\r\n    static loadModule(path){\r\n        if(!this.modules[path]){\r\n            globalModulePath = path;\r\n            require(this.__getModulesPath(path));\r\n        }\r\n        return this.modules[path] && this.modules[path].class;\r\n    }\r\n    static loadAllModules(){\r\n        //TODO make a module loader\r\n    }\r\n\r\n    // Private methods\r\n    /**\r\n     * Creates the listener variable for a certain type if necessary, and returns it\r\n     * @param  {String} type The request type to return the listener of\r\n     * @return {{type:String, listeners:[{module:Module, filter:function(request)}, ...]}} An object that tracks the listeners for a certain request type\r\n     */\r\n    static __getListeners(type){\r\n        // Create listeners type variable if not available\r\n        if(!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                listeners: []\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param  {String} [path=\"\"] The path to append to the modules directory\r\n     * @return {String}           The relative path to the directory\r\n     */\r\n    static __getModulesPath(path=\"\"){\r\n        return Path.join(\"..\", \"..\", \"modules\", path);\r\n    }\r\n\r\n    static __getModules(request){\r\n        // Get the module listeners to handle this type of request\r\n        var listenerType = this.__getListeners(request.type);\r\n\r\n        // Map modules with their priority to this particular request\r\n        var priorities = listenerType.listeners.map(listener=>{\r\n            return {\r\n                priority:listener.filter(request),\r\n                module:listener.module\r\n            };\r\n        }).filter(priority=>priority.priority>0);\r\n\r\n        // Sort the results\r\n        priorities.sort((a,b)=>b.priority-a.priority);\r\n\r\n        // Determine what modules to return\r\n        if(request.use==\"all\"){\r\n            return priorities.map(a=>a.module);\r\n        }else if(typeof(request.use)==\"Function\"){\r\n            return priorities.filter(request.use).map(a=>a.module);\r\n        }else{\r\n            return priorities[0] && priorities[0].module;\r\n        }\r\n    }\r\n    static __resolveRequest(requestID, modules){\r\n        // Check if there is a request that goes by this ID\r\n        var request = this.requests[requestID];\r\n        if(request){\r\n            // Delete the request as we are answering it now\r\n            delete this.requests[requestID];\r\n\r\n            // Resolve request by simply returning the module if it was a module request,\r\n            //      or instanciate a module and return a channel on a handle request\r\n            if(request.type==\"module\"){\r\n                request.resolve(modules);\r\n            }else if(request.type==\"handle\"){\r\n                //TODO make handle requests instantiate modules and return channels\r\n            }\r\n        }\r\n    }\r\n    static __request(request, type){\r\n        // Attach extra data to the request\r\n        var ID = this.requests.ID++;\r\n        request.ID = ID;\r\n        request = {\r\n            requestData: request,\r\n            type: \"module\"\r\n        };\r\n\r\n        // Create a promise to return, and make it resolvable from the request\r\n        var promise = new Promise((resolve, reject)=>{\r\n            request.resolve = resolve;\r\n        });\r\n\r\n        // Store the request such that it can later be resolved\r\n        this.requests[ID] = request;\r\n\r\n        // Retrieve the modules to resolve the request\r\n        if(IPC._isRenderer()){\r\n            // Send a command to the main window to look for modules to resolve the request\r\n            IPC.send(\"Registry.request\", request.requestData, 0);\r\n        }else{\r\n            // Directly resolve the request as we have access to all modules\r\n            var modules = this.__getModules(request.data);\r\n            this.__resolveRequest(ID, modules);\r\n        }\r\n\r\n        // Return the Promise\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {Undefined} The method returns no useful information\r\n     */\r\n    static __setup(){\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the registered modules themselves, indexed by path\r\n        this.modules = {};\r\n\r\n        // Stores the requests that are currently awaiting to be answered\r\n        this.requests = {ID:0};\r\n\r\n        // Set up the IPC listeners in the renderers and main process to allow renderers to request modules\r\n        if(IPC._isRenderer()){\r\n            // Resolve the request when the main process returns the modules\r\n            IPC.on(\"Registry.returnRequest\", event=>{\r\n                var data = event.data;\r\n                this.__resolveRequest(data.requestID, data.modules);\r\n            });\r\n        }else{\r\n            // Filter out possible modules in this window to handle the handle request\r\n            IPC.on(\"Registry.request\", event=>{\r\n                var source = event.sourceID;\r\n                var request = event.data;\r\n\r\n                // Retrieve the priority mapping\r\n                var modules = this.__getModules(request);\r\n\r\n                // Return the mapping of modules and their priorities\r\n                IPC.send(\"Registry.returnRequest\", {modules:modules, requestID:request.ID}, source);\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n};\r\nRegistry.__setup();\r\nexport default Registry;\r\n"]}