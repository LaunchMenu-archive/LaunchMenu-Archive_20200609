{"version":3,"sources":["../../../src/core/registry/registry.js"],"names":["Registry","requestHandle","data","__request","request","requestModule","register","Class","classListeners","modules","window","currentPath","class","listeners","forEach","listener","__getListeners","type","push","module","loadModule","path","require","loadAllModules","__getModulesPath","Path","join","__getModules","priorities","map","priority","filter","sort","a","b","use","__resolveRequest","requestID","requests","resolve","ID","requestData","promise","reject","IPC","_isRenderer","send","__setup","on","event","source","sourceID","__mapHandlerModules"],"mappings":"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","file":"registry.js","sourcesContent":["import Path from \"path\";\r\nimport IPC from \"../communication/IPC\";\r\nclass Registry{\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {{type:String, execute:String|function, data:Object, source:Module}} data The information on how to handle the data\r\n     * @return {Promise} The Promise that shall return the channels created to communicate with the modules\r\n     */\r\n    static requestHandle(data){\r\n        return this.__request(request, \"handle\");\r\n    }\r\n    static requestModule(request){\r\n        return this.__request(request, \"module\");\r\n    }\r\n    /**\r\n     * Registers a module in the registry such that it can be requested by other modules\r\n     * @param  {Class} Class The class of the module you want to register\r\n     * @param  {{type:String, filter:function(request)}} classListener An event you would like this module to act on\r\n     * @return {Undefined} The method returns no useful information\r\n     */\r\n    static register(Class, ...classListeners){\r\n        // Register the module itself\r\n        this.modules[window.currentPath] = {\r\n            class: Class,\r\n            listeners: classListeners\r\n        };\r\n\r\n        // Register all the listeners\r\n        classListeners.forEach(listener=>{\r\n            var listeners = this.__getListeners(listener.type);\r\n            listeners.listeners.push({\r\n                module: Class,\r\n                listener: listener\r\n            });\r\n        });\r\n    }\r\n\r\n    // Protected methods\r\n    static loadModule(path){\r\n        window.currentPath = path;\r\n        require(path);\r\n    }\r\n    static loadAllModules(){\r\n        //TODO make a module loader\r\n    }\r\n\r\n    // Private methods\r\n    /**\r\n     * Creates the listener variable for a certain type if necessary, and returns it\r\n     * @param  {String} type The request type to return the listener of\r\n     * @return {{type:String, listeners:[{module:Module, filter:function(request)}, ...]}} An object that tracks the listeners for a certain request type\r\n     */\r\n    static __getListeners(type){\r\n        // Create listeners type variable if not available\r\n        if(!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                listeners: []\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param  {String} [path=\"\"] The path to append to the modules directory\r\n     * @return {String}           The relative path to the directory\r\n     */\r\n    static __getModulesPath(path=\"\"){\r\n        return Path.join(\"..\", \"..\", \"modules\", path);\r\n    }\r\n\r\n    static __getModules(request){\r\n        // Get the module listeners to handle this type of request\r\n        var listeners = this.listeners[request.type];\r\n\r\n        // Map modules with their priority to this particular request\r\n        var priorities = listeners.map(listener=>{\r\n            return {\r\n                priority:listener.filter(request),\r\n                module:listener.module\r\n            };\r\n        }).filter(priority=>{\r\n            return priority.priority>0;\r\n        });\r\n\r\n        // Sort the results\r\n        priorities.sort((a,b)=>b.priority-a.priority);\r\n\r\n        // Determine what modules to return\r\n        if(request.use==\"*\"){\r\n            return priorities.map(a=>a.module);\r\n        }else if(typeof(request.use)==\"Function\"){\r\n            return priorities.filter(request.use).map(a=>a.module);\r\n        }else{\r\n            return priorities[0] && priorities[0].module;\r\n        }\r\n    }\r\n    static __resolveRequest(requestID, modules){\r\n        // Check if there is a request that goes by this ID\r\n        var request = this.requests[requestID];\r\n        if(request){\r\n            // Delete the request as we are answering it now\r\n            delete this.requests[requestID];\r\n\r\n            // Resolve request by simply returning the module if it was a module request,\r\n            //      or instanciate a module and return a channel on a handle request\r\n            if(request.type==\"module\"){\r\n                request.resolve(modules);\r\n            }else if(request.type==\"handle\"){\r\n                //TODO make handle requests instantiate modules and return channels\r\n            }\r\n        }\r\n    }\r\n    static __request(request, type){\r\n        // Attach extra data to the request\r\n        var ID = this.requests.ID++;\r\n        request.ID = ID;\r\n        request = {\r\n            requestData: request,\r\n            type: \"module\"\r\n        };\r\n\r\n        // Create a promise to return, and make it resolvable from the request\r\n        var promise = new Promise((resolve, reject)=>{\r\n            request.resolve = resolve;\r\n        });\r\n\r\n        // Store the request such that it can later be resolved\r\n        this.requests[ID] = request;\r\n\r\n        // Retrieve the modules to resolve the request\r\n        if(IPC._isRenderer()){\r\n            // Send a command to the main window to look for modules to resolve the request\r\n            IPC.send(\"Registry.request\", request.requestData, 0);\r\n        }else{\r\n            // Directly resolve the request as we have access to all modules\r\n            var modules = this.__getModules(request.data);\r\n            this.__resolveRequest(ID, modules);\r\n        }\r\n\r\n        // Return the Promise\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {Undefined} The method returns no useful information\r\n     */\r\n    static __setup(){\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the registered modules themselves, indexed by path\r\n        this.modules = {};\r\n\r\n        // Stores the requests that are currently awaiting to be answered\r\n        this.requests = {ID:0};\r\n\r\n        // Set up the IPC listeners in the renderers and main process to allow renderers to request modules\r\n        if(IPC._isRenderer()){\r\n            // Resolve the request when the main process returns the modules\r\n            IPC.on(\"Registry.returnRequest\", event=>{\r\n                var data = event.data;\r\n                this.__resolveRequest(data.requestID, data.modules);\r\n            });\r\n        }else{\r\n            // Filter out possible modules in this window to handle the handle request\r\n            IPC.on(\"Registry.request\", event=>{\r\n                var source = event.sourceID;\r\n                var request = event.data;\r\n\r\n                // Retrieve the priority mapping\r\n                var modules = this.__mapHandlerModules(request);\r\n\r\n                // Return the mapping of modules and their priorities\r\n                IPC.send(\"Registry.returnRequest\", {modules:modules, requestID:request.ID}, source);\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n};\r\nRegistry.__setup();\r\nexport default Registry;\r\n"]}