{"version":3,"sources":["../../../src/core/registry/module.js"],"names":["Module","constructor","request","canBeDirectlyInstantiated","registerPromiseResolve","registerPromise","resolve","reject","core","registered","initPromise","channelReceiver","channels","source","__register","error","Error","requestPath","RequestPath","augmentPath","getClass","modulePath","WindowHandler","_registerModuleInstance","Registry","then","ID","Channel","createReceiver","toString","__createChannelMethods","receiver","createSender","type","channel","window","__init","method","__onRegister","ctch","catch","onInit","__proto__","getPath","__getMethods","output","ignoreRegex","nextProto","prototype","proto","forEach","varName","variable","Function","test","methods","methodName","event","apply","data","close","console","log","dispose","closeDescendant","__disposeDescendant","Array","filter","_getID","length","undefined","channelDisposalPromises","concat","map","push","all","_deregisterModuleInstance","requestHandle","createSubChannel"],"mappings":"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","file":"module.js","sourcesContent":["import Channel from \"../communication/channel\";\r\nimport Registry from \"./registry\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport RequestPath from \"./requestPath\";\r\n\r\nexport default class Module{\r\n    constructor(request, canBeDirectlyInstantiated){\r\n        let registerPromiseResolve = null;\r\n        const registerPromise = new Promise((resolve, reject)=>{\r\n            registerPromiseResolve = resolve;\r\n        });\r\n        this.core = {\r\n            registered: false,\r\n            registerPromise: registerPromise,\r\n            registerPromiseResolve: registerPromiseResolve,\r\n            initPromise: registerPromise, // Other methods may build upon this promise\r\n            channelReceiver: null,\r\n            request: request,\r\n            channels: {\r\n                source: null\r\n            },\r\n        };\r\n        if(request){\r\n            this.__register();\r\n        }else if(!canBeDirectlyInstantiated){\r\n            const error = Error(\"This module can only be instantiated from a handle request\");\r\n            reject(error);\r\n            throw error;\r\n        }\r\n\r\n    }\r\n    __register(){\r\n        if(this.core.registered===false){\r\n            this.core.registered = null; //adding\r\n            if(this.core.request){\r\n                const requestPath = new RequestPath(this.core.request.source);\r\n                this.core.requestPath = requestPath.augmentPath(this.getClass().modulePath, 0);\r\n                WindowHandler._registerModuleInstance(this);\r\n                Registry._registerModuleInstance(this).then(ID=>{\r\n                    Channel.createReceiver(\r\n                        this.core.requestPath.toString(true),\r\n                        this.__createChannelMethods()\r\n                    ).then(receiver=>{\r\n                        this.core.channelReceiver = receiver;\r\n                        Channel.createSender(\r\n                            this.core.request.source,\r\n                            this.core.request.type,\r\n                            this.core.requestPath.toString(true)\r\n                        ).then(channel=>{\r\n                            this.core.channels.source = channel;\r\n                            window.channel = channel; // TODO remove (for testing);\r\n                            this.core.registered = true;\r\n                            this.core.registerPromiseResolve(this);\r\n                        });\r\n                    });\r\n                });\r\n            }else{\r\n                this.core.requestPath = new RequestPath(this.getClass().modulePath);\r\n                WindowHandler._registerModuleInstance(this);\r\n                Registry._registerModuleInstance(this).then(ID=>{\r\n                    Channel.createReceiver(\r\n                        this.core.requestPath.toString(true),\r\n                        this.__createChannelMethods()\r\n                    ).then(receiver=>{\r\n                        this.core.channelReceiver = receiver;\r\n                        this.core.registered = true;\r\n                        this.core.registerPromiseResolve(this);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    __init(method){\r\n        return this.core.initPromise = this.core.initPromise.then(method);\r\n    }\r\n    __onRegister(then, ctch){\r\n        return this.core.registerPromise.then(then).catch(ctch);\r\n    }\r\n    onInit(then, ctch){\r\n        return this.core.initPromise.then(then).catch(ctch);\r\n    }\r\n\r\n    // Registry related methods\r\n    toString(){\r\n        return this.getClass().toString();\r\n    }\r\n    getClass(){\r\n        return this.__proto__.constructor;\r\n    }\r\n    getPath(){\r\n        return this.core.requestPath;\r\n    }\r\n    static toString(){\r\n        return this.modulePath;\r\n    }\r\n\r\n    // Channel related methods\r\n    __getMethods(){\r\n        const output = {};\r\n        const ignoreRegex = /constructor|^__/g;\r\n        let nextProto = this.__proto__;\r\n        while(nextProto && nextProto!=Module.prototype){\r\n            const proto = nextProto;\r\n            nextProto = proto.__proto__;\r\n\r\n            Object.getOwnPropertyNames(proto).forEach(varName=>{\r\n                const variable = this.__proto__[varName];\r\n                if(variable instanceof Function && !ignoreRegex.test(varName)){\r\n                    output[varName] = this.__proto__[varName];\r\n                }\r\n            });\r\n        }\r\n        return output;\r\n    }\r\n    __createChannelMethods(){\r\n        const output = {};\r\n        const methods = this.__getMethods();\r\n        Object.keys(methods).forEach(methodName=>{\r\n            const method = methods[methodName];\r\n            output[methodName] = event=>{\r\n                return method.apply(this, event.data);\r\n            };\r\n        });\r\n        output.close = event=>{\r\n            console.log(\"close\", this);\r\n            return this.dispose();\r\n        };\r\n        output.closeDescendant = event=>{\r\n            return this.__disposeDescendant.apply(this, event.data);\r\n        };\r\n        return output;\r\n    }\r\n    __disposeDescendant(requestPath, type){\r\n        const channels = this.core.channels[type];\r\n        if(channels){\r\n            if(channels instanceof Array){\r\n                this.core.channels[type] = channels.filter(channel=>{\r\n                    return channel._getID() != requestPath;\r\n                });\r\n\r\n                if(this.core.channels[type].length == 0)\r\n                    delete this.core.channels[type];\r\n            }else if(channels._getID() == requestPath){\r\n                delete this.core.channels[type];\r\n            }\r\n        }\r\n    }\r\n    dispose(){\r\n        if(this.core.registered){\r\n            this.core.registered = undefined; // Removing\r\n            const channelDisposalPromises = [];\r\n            Object.keys(this.core.channels).forEach(type=>{\r\n                if(type!=\"source\"){\r\n                    const channels = this.core.channels[type];\r\n                    if(channels instanceof Array){\r\n                        channelDisposalPromises.concat(channels.map(channel=>{\r\n                            return channel.close();\r\n                        }));\r\n                    }else{\r\n                        channelDisposalPromises.push(channels.close());\r\n                    }\r\n                }\r\n            });\r\n\r\n            return Promise.all(channelDisposalPromises).then(()=>{\r\n                return this.core.channels.source.closeDescendant(this.getPath().toString(true), this.core.request.type);\r\n            }).then(()=>{\r\n                return Registry._deregisterModuleInstance(this);\r\n            }).then(()=>{\r\n                this.core.registered = false; // Removed\r\n                return Promise.resolve(WindowHandler._deregisterModuleInstance(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {{type:String, execute:String|function, data:Object, source:Module, methods:Object}} request The information on how to handle the data\r\n     * @return {Promise} The Promise that shall return the channels created to communicate with the modules\r\n     */\r\n    requestHandle(request){\r\n        if(!this.registered) this.__register();\r\n        return this.__onRegister(()=>{\r\n            if(!request.methods)\r\n            request.methods = {};\r\n            request.source = this;\r\n\r\n            if(this.core.channels[request.type])\r\n            return this.core.channels[request.type];\r\n\r\n            this.core.channelReceiver.createSubChannel(request.type, request.methods);\r\n            return Registry.requestHandle(request).then(channels=>{\r\n                this.core.channels[request.type] = channels;\r\n                return channels;\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}