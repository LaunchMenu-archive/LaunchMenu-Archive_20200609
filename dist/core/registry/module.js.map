{"version":3,"sources":["../../../src/core/registry/module.js"],"names":["Module","constructor","request","canBeDirectlyInstantiated","registerPromiseResolve","registerPromise","resolve","reject","core","registration","registered","BooleanProcess","initPromise","handlers","source","__register","error","Error","false","turningTrue","requestPath","RequestPath","augmentPath","getClass","modulePath","ID","Registry","_registerModuleInstance","channelReceiver","Channel","createReceiver","toString","__createChannelMethods","channel","createSender","type","true","__init","method","then","__onRegister","ctch","catch","onInit","__proto__","getPath","__getMethods","output","channelMethodRegex","nextProto","prototype","proto","forEach","varName","variable","Function","test","replace","methods","methodName","event","apply","concat","data","close","dispose","closeDescendant","__disposeDescendant","handler","channels","Array","filter","_getID","length","turningFalse","channelDisposalPromises","map","console","log","push","all","_deregisterModuleInstance","requestHandle","createSubChannel"],"mappings":"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","file":"module.js","sourcesContent":["import Channel from \"../communication/channel\";\r\nimport Registry from \"./registry\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport RequestPath from \"./requestPath\";\r\nimport BooleanProcess from \"../utils/booleanProcess\";\r\n\r\nexport default class Module{\r\n    constructor(request, canBeDirectlyInstantiated){\r\n        let registerPromiseResolve = null;\r\n        const registerPromise = new Promise((resolve, reject)=>{\r\n            registerPromiseResolve = resolve;\r\n        });\r\n        this.core = {\r\n            registration: {\r\n                registered: new BooleanProcess(0),\r\n                registerPromise: registerPromise,\r\n                registerPromiseResolve: registerPromiseResolve,\r\n            },\r\n            initPromise: registerPromise, // Other methods may build upon this promise\r\n            handlers: {\r\n\r\n            },\r\n            source: {\r\n\r\n            }\r\n        };\r\n\r\n        if(request){\r\n            this.core.source = {\r\n                request: request\r\n            };\r\n            this.__register();\r\n        }else if(!canBeDirectlyInstantiated){\r\n            const error = Error(\"This module can only be instantiated from a handle request\");\r\n            reject(error);\r\n            throw error;\r\n        }\r\n\r\n    }\r\n    async __register(){\r\n        if(this.core.registration.registered.false()){\r\n            this.core.registration.registered.turningTrue(true);\r\n            const source = this.core.source;\r\n            if(source.request){\r\n                const requestPath = new RequestPath(source.request.source);\r\n                source.requestPath = requestPath.augmentPath(this.getClass().modulePath, 0);\r\n                const ID = await Registry._registerModuleInstance(this);\r\n\r\n                this.core.channelReceiver = await Channel.createReceiver(\r\n                    source.requestPath.toString(true),\r\n                    this.__createChannelMethods()\r\n                );\r\n                source.channel = await Channel.createSender(\r\n                    source.request.source,\r\n                    source.request.type,\r\n                    source.requestPath.toString(true)\r\n                );\r\n\r\n                this.core.registration.registered.true(true);\r\n                this.core.registration.registerPromiseResolve(this);\r\n            }else{\r\n                source.requestPath = new RequestPath(this.getClass().modulePath);\r\n                const ID = await Registry._registerModuleInstance(this);\r\n                this.core.channelReceiver = await Channel.createReceiver(\r\n                    source.requestPath.toString(true),\r\n                    this.__createChannelMethods()\r\n                );\r\n                this.core.registration.registered.true(true);\r\n                this.core.registration.registerPromiseResolve(this);\r\n            }\r\n        }\r\n    }\r\n    __init(method){\r\n        return this.core.initPromise = this.core.initPromise.then(method);\r\n    }\r\n    __onRegister(then, ctch){\r\n        return this.core.registration.registerPromise.then(then).catch(ctch);\r\n    }\r\n    onInit(then, ctch){\r\n        return this.core.initPromise.then(then).catch(ctch);\r\n    }\r\n\r\n    // Registry related methods\r\n    toString(){\r\n        return this.getClass().toString();\r\n    }\r\n    getClass(){\r\n        return this.__proto__.constructor;\r\n    }\r\n    getPath(){\r\n        return this.core.source.requestPath;\r\n    }\r\n    static getPath(){\r\n        return this.modulePath;\r\n    }\r\n    static toString(){\r\n        return this.getPath();\r\n    }\r\n\r\n    // Channel related methods\r\n    __getMethods(){\r\n        const output = {};\r\n        const channelMethodRegex = /^\\$/g;\r\n        let nextProto = this.__proto__;\r\n        while(nextProto && nextProto!=Module.prototype){\r\n            const proto = nextProto;\r\n            nextProto = proto.__proto__;\r\n\r\n            Object.getOwnPropertyNames(proto).forEach(varName=>{\r\n                const variable = this.__proto__[varName];\r\n                if(variable instanceof Function && channelMethodRegex.test(varName)){\r\n                    output[varName.replace(channelMethodRegex, \"\")] = this.__proto__[varName];\r\n                }\r\n            });\r\n        }\r\n        return output;\r\n    }\r\n    __createChannelMethods(){\r\n        const output = {};\r\n        const methods = this.__getMethods();\r\n        Object.keys(methods).forEach(methodName=>{\r\n            const method = methods[methodName];\r\n            output[methodName] = event=>{\r\n                return method.apply(this, [event].concat(event.data));\r\n            };\r\n        });\r\n        output.close = event=>{\r\n            return this.dispose();\r\n        };\r\n        output.closeDescendant = event=>{\r\n            return this.__disposeDescendant.apply(this, event.data);\r\n        };\r\n        return output;\r\n    }\r\n    __disposeDescendant(requestPath, type){\r\n        const handler = this.core.handlers[type];\r\n        if(handler){\r\n            const channels = handler.channels;\r\n            if(channels instanceof Array){\r\n                handler.channels = channels.filter(channel=>{\r\n                    return channel._getID() != requestPath;\r\n                });\r\n\r\n                if(handler.channels.length == 0)\r\n                    delete this.core.handlers[type];\r\n            }else if(channels._getID() == requestPath){\r\n                delete this.core.handlers[type];\r\n            }\r\n        }\r\n    }\r\n    async dispose(){\r\n        if(this.core.registration.registered.turningTrue())\r\n            throw Error(\"Module is still registering\");\r\n        if(this.core.registration.registered.true()){\r\n            this.core.registration.registered.turningFalse(true);\r\n            const channelDisposalPromises = [];\r\n            Object.keys(this.core.handlers).forEach(type=>{\r\n                const handler = this.core.handlers[type];\r\n                const channels = handler.channels;\r\n                if(channels instanceof Array){\r\n                    channelDisposalPromises.concat(channels.map(channel=>{\r\n                        console.log(channel);\r\n                        return channel.close();\r\n                    }));\r\n                }else{\r\n                    console.log(channels);\r\n                    channelDisposalPromises.push(channels.close());\r\n                }\r\n            });\r\n\r\n            await Promise.all(channelDisposalPromises);\r\n            if(this.core.source.channel){\r\n                await this.core.source.channel.closeDescendant(this.getPath().toString(true), this.core.source.request.type)\r\n            }\r\n\r\n            this.core.registration.registered.false(true);\r\n            this.core.channelReceiver.close();\r\n\r\n            await Registry._deregisterModuleInstance(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {{type:String, execute:String|function, data:Object, source:Module, methods:Object}} request The information on how to handle the data\r\n     * @return {Promise} The Promise that shall return the channels created to communicate with the modules\r\n     */\r\n    async requestHandle(request){\r\n        if(this.core.registration.registered.turningFalse())\r\n            throw Error(\"Module is currently deregistering\");\r\n\r\n        if(this.core.registration.registered.false()){\r\n            await this.__register();\r\n            // await this.__onRegister();\r\n        }else if(this.core.registration.registered.turningTrue()){\r\n            await this.__onRegister();\r\n        }\r\n\r\n        if(!request.methods)\r\n            request.methods = {};\r\n\r\n        request.source = this;\r\n\r\n        if(this.core.handlers[request.type])\r\n            return this.core.handler[request.type].channels;\r\n\r\n        this.core.channelReceiver.createSubChannel(request.type, request.methods);\r\n        const channels = await Registry.requestHandle(request);\r\n        this.core.handlers[request.type] = {\r\n            request: request,\r\n            channels: channels\r\n        };\r\n        return channels;\r\n    }\r\n}\r\n"]}