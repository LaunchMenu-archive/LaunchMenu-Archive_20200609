{"version":3,"sources":["../../src/Test/main.js"],"names":["Registry","_loadModule","TestModule2","requestModule","type","testModule2instance","testModule2instance2","app","on","requestHandle","then","channel","alert","close","IPC","once","event"],"mappings":";;qEAAA;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACAA,mBAASC,WAAT,CAAqB,OAArB;AACAD,mBAASC,WAAT,CAAqB,YAArB;AACAD,mBAASC,WAAT,CAAqB,aAArB;AACA,MAAMC,cAAcF,mBAASG,aAAT,CAAuB,EAACC,MAAK,OAAN,EAAvB,CAApB;AACA,MAAMC,sBAAsB,IAAIH,WAAJ,EAA5B;AACA,MAAMI,uBAAuB,IAAIJ,WAAJ,EAA7B;;AAGA;AACAK,cAAIC,EAAJ,CAAO,OAAP,EAAgB,YAAU;;AAGtBH,wBAAoBI,aAApB,CAAkC;AAC9BL,cAAM;AADwB,KAAlC,EAEGM,IAFH,CAEQC,WAAS;AACbA,gBAAQC,KAAR,CAAc,eAAd,EACKF,IADL,CACU,MAAI;AACN,mBAAOC,QAAQC,KAAR,CAAc,MAAd,CAAP;AACH,SAHL,EAGOF,IAHP,CAGY,MAAI;AACR,mBAAOC,QAAQE,KAAR,EAAP;AACH,SALL;AAMH,KATD;AAUAP,yBAAqBG,aAArB,CAAmC;AAC/BL,cAAM;AADyB,KAAnC,EAEGM,IAFH,CAEQC,WAAS;AACbA,gBAAQC,KAAR,CAAc,SAAd,EACKF,IADL,CACU,MAAI;AACN,mBAAOC,QAAQE,KAAR,EAAP;AACH,SAHL;AAIH,KAPD;AAQAP,yBAAqBG,aAArB,CAAmC;AAC/BL,cAAM;AADyB,KAAnC,EAEGM,IAFH,CAEQC,WAAS;AACbA,gBAAQC,KAAR,CAAc,cAAd,EACKF,IADL,CACU,MAAI;AACN,mBAAOC,QAAQE,KAAR,EAAP;AACH,SAHL;AAIH,KAPD;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA3CD;;AA6CAC,cAAIC,IAAJ,CAAS,QAAT,EAAoBC,KAAD,IAAS;;AAE3B;AACA;AACA;AACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACH;AACA,CAhED","file":"main.js","sourcesContent":["//this is merely some test code\r\nimport {app as app, BrowserWindow as BrowserWindow} from \"electron\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport IPC from \"../core/communication/IPC\";\r\nimport Registry from \"../core/registry/registry\";\r\nimport Channel from \"../core/communication/channel\";\r\nimport RequestPath from \"../core/registry/requestPath\";\r\nimport GlobalDataHandler from \"../core/communication/data/globalDataHandler\";\r\nimport SettingsHandler from \"../core/communication/data/settingsHandler\";\r\nimport WindowHandler from \"../core/window/windowHandler\";\r\n\r\n// var {app, BrowserWindow} = require('electron');\r\n// var mainWindow;\r\n// app.on('window-all-closed', function() {\r\n//   \tif (process.platform != 'darwin') {\r\n//     \tapp.quit();\r\n//   \t}\r\n// });\r\n// app.on('ready', function() {\r\n// \tmainWindow = new BrowserWindow({width: 1360, height: 800});\r\n// \t// mainWindow.loadURL(url.format({\r\n// \t//   pathname: \"www.google.com\",\r\n// \t//   protocol: 'https:',\r\n// \t//   slashes: true\r\n// \t// }));\r\n// \tmainWindow.loadURL(url.format({\r\n// \t\tpathname: path.join(process.cwd(), \"dist\", \"Test\", \"index.html\"),\r\n// \t\tprotocol: 'file:',\r\n// \t\tslashes: true\r\n// \t}))\r\n// \tmainWindow.openDevTools();\r\n// \tmainWindow.on('closed', function() {\r\n// \t\tmainWindow = null;\r\n// \t});\r\n//\r\n// \t// Register window\r\n// \tIPC._registerWindow(mainWindow);\r\n// });\r\n\r\n\r\n\r\n// Module registry\r\nRegistry._loadModule(\"alert\");\r\nRegistry._loadModule(\"multiAlert\");\r\nRegistry._loadModule(\"testModule2\");\r\nconst TestModule2 = Registry.requestModule({type:\"test2\"});\r\nconst testModule2instance = new TestModule2();\r\nconst testModule2instance2 = new TestModule2();\r\n\r\n\r\n// Open a window\r\napp.on('ready', function(){\r\n\r\n\r\n    testModule2instance.requestHandle({\r\n        type: \"multiAlert\"\r\n    }).then(channel=>{\r\n        channel.alert(\"poooopy pants\")\r\n            .then(()=>{\r\n                return channel.alert(\"Nuts\");\r\n            }).then(()=>{\r\n                return channel.close();\r\n            });\r\n    });\r\n    testModule2instance2.requestHandle({\r\n        type: \"multiAlert\"\r\n    }).then(channel=>{\r\n        channel.alert(\"testing\")\r\n            .then(()=>{\r\n                return channel.close();\r\n            });\r\n    });\r\n    testModule2instance2.requestHandle({\r\n        type: \"alert\"\r\n    }).then(channel=>{\r\n        channel.alert(\"single alert\")\r\n            .then(()=>{\r\n                return channel.close();\r\n            });\r\n    });\r\n\r\n\r\n\r\n    // WindowHandler.open(1).then(data=>{\r\n    //     console.log(\"Window opened\", data);\r\n    //     Registry.requestHandle({\r\n    //         type: \"test\",\r\n    //         source: testModule2,\r\n    //     }).then(result=>{\r\n    //         console.log(result);\r\n    //     });\r\n    // }).catch(err=>{\r\n    //     console.error(err);\r\n    // });\r\n});\r\n\r\nIPC.once(\"loaded\", (event)=>{\r\n\r\n\t// IPC.on(\"pong\", event=>{\r\n\t// \treturn 3;\r\n\t// })\r\n    //\r\n\t// // IPC testing\r\n\t// IPC.on(\"ping\", (event)=>{\r\n\t// \tconsole.log(\"ping\", event);\r\n\t// \tIPC.send(\"pong\", {data:2}, 1).then(data=>{\r\n\t//         console.log(\"response\", data);\r\n\t//     });\r\n\t// \t// IPC.send(\"module\", TestModule, 1);\r\n\t// });\r\n\t// IPC.on(\"moduleInstanceTransfer\", (event)=>{\r\n\t//     console.log(event);\r\n\t// });\r\n    //\r\n\t// // Channel testing\r\n\t// var channel = Channel.createReceiver(\"TestName\", {\r\n\t// \tdoSomething: event=>{\r\n\t// \t\tconsole.log(\"smth\", event);\r\n\t// \t},\r\n\t// \tdoSomethingElse: event=>{\r\n\t// \t\tconsole.log(\"smthElse\", event);\r\n\t// \t}\r\n\t// });\r\n\t// channel.createSubChannel(\"getColor\", {\r\n\t// \tonColor: event=>{\r\n\t// \t\tconsole.log(\"color\", event);\r\n\t// \t},\r\n\t// \tdoSomethingElse: function(event){\r\n\t// \t\tconsole.log(\"smthElse Overwritten\", event, event.senderID);\r\n\t// \t\tChannel.createSender(event.senderID, \"\", this.getID()).then(channel=>{\r\n\t// \t\t\tconsole.log(\"establish connection\");\r\n\t// \t\t\tchannel.smth(\"stuff\");\r\n\t// \t\t});\r\n\t// \t}\r\n\t// });\r\n    //\r\n    // // GlobalData testing\r\n\t// GlobalData.create(\"test\", {\r\n\t// \tsomeField: {\r\n\t// \t\tsomeData: 1,\r\n\t// \t\tsomeOtherData: true\r\n\t// \t},\r\n\t// \tsomeStuff: \"message\",\r\n\t// \tchange: {\r\n\t// \t\t1: 5,\r\n\t// \t\t2: 5\r\n\t// \t}\r\n\t// }).then(globalData=>{\r\n\t// \tconsole.log(globalData, globalData.get(\"someField.someData\"));\r\n\t// \tglobalData.on(\"someField.update\", event=>{\r\n\t// \t\tconsole.log(event);\r\n\t// \t\tglobalData.change({\r\n\t// \t\t\tsomeStuff: {\r\n\t// \t\t\t\tcrap: 3\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t});\r\n\t// });\r\n    //\r\n\t// return 4;\r\n});\r\n"]}