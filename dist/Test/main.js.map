{"version":3,"sources":["../../src/Test/main.js"],"names":["app","on","Registry","_loadAllModules","then","data","TestModule2","requestModule","type","testModule2instance","testModule2instance2","requestHandle","channel","alert","close","IPC","once","event"],"mappings":";;qEAAA;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACAA,cAAIC,EAAJ,CAAO,OAAP,EAAgB,YAAW;AACvBC,uBAASC,eAAT,GAA2BC,IAA3B,CAAgCC,QAAQ;AACpC,cAAMC,cAAcJ,mBAASK,aAAT,CAAuB,EAACC,MAAM,OAAP,EAAvB,CAApB;AACA,cAAMC,sBAAsB,IAAIH,WAAJ,EAA5B;AACA,cAAMI,uBAAuB,IAAIJ,WAAJ,EAA7B;;AAEAG,4BACKE,aADL,CACmB;AACXH,kBAAM;AADK,SADnB,EAIKJ,IAJL,CAIUQ,WAAW;AACbA,oBACKC,KADL,CACW,eADX,EAEKT,IAFL,CAEU,MAAM;AACR,uBAAOQ,QAAQC,KAAR,CAAc,MAAd,CAAP;AACH,aAJL,EAKKT,IALL,CAKU,MAAM;AACR,uBAAOQ,QAAQE,KAAR,EAAP;AACH,aAPL;AAQH,SAbL;AAcAJ,6BACKC,aADL,CACmB;AACXH,kBAAM;AADK,SADnB,EAIKJ,IAJL,CAIUQ,WAAW;AACbA,oBAAQC,KAAR,CAAc,SAAd,EAAyBT,IAAzB,CAA8B,MAAM;AAChC,uBAAOQ,QAAQE,KAAR,EAAP;AACH,aAFD;AAGH,SARL;AASAJ,6BACKC,aADL,CACmB;AACXH,kBAAM;AADK,SADnB,EAIKJ,IAJL,CAIUQ,WAAW;AACbA,oBAAQC,KAAR,CAAc,cAAd,EAA8BT,IAA9B,CAAmC,MAAM;AACrC,uBAAOQ,QAAQE,KAAR,EAAP;AACH,aAFD;AAGH,SARL;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAjDD;AAkDH,CAnDD;;AAqDAC,cAAIC,IAAJ,CAAS,QAAT,EAAmBC,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA/DD","file":"main.js","sourcesContent":["//this is merely some test code\r\nimport {app, BrowserWindow} from \"electron\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport IPC from \"../core/communication/IPC\";\r\nimport Registry from \"../core/registry/registry\";\r\nimport Channel from \"../core/communication/channel\";\r\nimport RequestPath from \"../core/registry/requestPath\";\r\nimport GlobalDataHandler from \"../core/communication/data/globalDataHandler\";\r\nimport SettingsHandler from \"../core/communication/data/settings/settingsHandler\";\r\nimport WindowHandler from \"../core/window/windowHandler\";\r\n\r\n// var {app, BrowserWindow} = require('electron');\r\n// var mainWindow;\r\n// app.on('window-all-closed', function() {\r\n//   \tif (process.platform != 'darwin') {\r\n//     \tapp.quit();\r\n//   \t}\r\n// });\r\n// app.on('ready', function() {\r\n// \tmainWindow = new BrowserWindow({width: 1360, height: 800});\r\n// \t// mainWindow.loadURL(url.format({\r\n// \t//   pathname: \"www.google.com\",\r\n// \t//   protocol: 'https:',\r\n// \t//   slashes: true\r\n// \t// }));\r\n// \tmainWindow.loadURL(url.format({\r\n// \t\tpathname: path.join(process.cwd(), \"dist\", \"Test\", \"index.html\"),\r\n// \t\tprotocol: 'file:',\r\n// \t\tslashes: true\r\n// \t}))\r\n// \tmainWindow.openDevTools();\r\n// \tmainWindow.on('closed', function() {\r\n// \t\tmainWindow = null;\r\n// \t});\r\n//\r\n// \t// Register window\r\n// \tIPC._registerWindow(mainWindow);\r\n// });\r\n\r\n// Module registry\r\n// Registry._loadModule(\"alerts.config\");\r\n// Registry._loadModule(\"multiAlert\");\r\n// Registry._loadModule(\"testModule2.config\");\r\n\r\n// Open a window\r\napp.on(\"ready\", function() {\r\n    Registry._loadAllModules().then(data => {\r\n        const TestModule2 = Registry.requestModule({type: \"test2\"});\r\n        const testModule2instance = new TestModule2();\r\n        const testModule2instance2 = new TestModule2();\r\n\r\n        testModule2instance\r\n            .requestHandle({\r\n                type: \"multiAlert\",\r\n            })\r\n            .then(channel => {\r\n                channel\r\n                    .alert(\"poooopy pants\")\r\n                    .then(() => {\r\n                        return channel.alert(\"Nuts\");\r\n                    })\r\n                    .then(() => {\r\n                        return channel.close();\r\n                    });\r\n            });\r\n        testModule2instance2\r\n            .requestHandle({\r\n                type: \"multiAlert\",\r\n            })\r\n            .then(channel => {\r\n                channel.alert(\"testing\").then(() => {\r\n                    return channel.close();\r\n                });\r\n            });\r\n        testModule2instance2\r\n            .requestHandle({\r\n                type: \"alert\",\r\n            })\r\n            .then(channel => {\r\n                channel.alert(\"single alert\").then(() => {\r\n                    return channel.close();\r\n                });\r\n            });\r\n\r\n        // WindowHandler.open(1).then(data=>{\r\n        //     console.log(\"Window opened\", data);\r\n        //     Registry.requestHandle({\r\n        //         type: \"test\",\r\n        //         source: testModule2,\r\n        //     }).then(result=>{\r\n        //         console.log(result);\r\n        //     });\r\n        // }).catch(err=>{\r\n        //     console.error(err);\r\n        // });\r\n    });\r\n});\r\n\r\nIPC.once(\"loaded\", event => {\r\n    // IPC.on(\"pong\", event=>{\r\n    // \treturn 3;\r\n    // })\r\n    //\r\n    // // IPC testing\r\n    // IPC.on(\"ping\", (event)=>{\r\n    // \tconsole.log(\"ping\", event);\r\n    // \tIPC.send(\"pong\", {data:2}, 1).then(data=>{\r\n    //         console.log(\"response\", data);\r\n    //     });\r\n    // \t// IPC.send(\"module\", TestModule, 1);\r\n    // });\r\n    // IPC.on(\"moduleInstanceTransfer\", (event)=>{\r\n    //     console.log(event);\r\n    // });\r\n    //\r\n    // // Channel testing\r\n    // var channel = Channel.createReceiver(\"TestName\", {\r\n    // \tdoSomething: event=>{\r\n    // \t\tconsole.log(\"smth\", event);\r\n    // \t},\r\n    // \tdoSomethingElse: event=>{\r\n    // \t\tconsole.log(\"smthElse\", event);\r\n    // \t}\r\n    // });\r\n    // channel.createSubChannel(\"getColor\", {\r\n    // \tonColor: event=>{\r\n    // \t\tconsole.log(\"color\", event);\r\n    // \t},\r\n    // \tdoSomethingElse: function(event){\r\n    // \t\tconsole.log(\"smthElse Overwritten\", event, event.senderID);\r\n    // \t\tChannel.createSender(event.senderID, \"\", this.getID()).then(channel=>{\r\n    // \t\t\tconsole.log(\"establish connection\");\r\n    // \t\t\tchannel.smth(\"stuff\");\r\n    // \t\t});\r\n    // \t}\r\n    // });\r\n    //\r\n    // // GlobalData testing\r\n    // GlobalData.create(\"test\", {\r\n    // \tsomeField: {\r\n    // \t\tsomeData: 1,\r\n    // \t\tsomeOtherData: true\r\n    // \t},\r\n    // \tsomeStuff: \"message\",\r\n    // \tchange: {\r\n    // \t\t1: 5,\r\n    // \t\t2: 5\r\n    // \t}\r\n    // }).then(globalData=>{\r\n    // \tconsole.log(globalData, globalData.get(\"someField.someData\"));\r\n    // \tglobalData.on(\"someField.update\", event=>{\r\n    // \t\tconsole.log(event);\r\n    // \t\tglobalData.change({\r\n    // \t\t\tsomeStuff: {\r\n    // \t\t\t\tcrap: 3\r\n    // \t\t\t}\r\n    // \t\t});\r\n    // \t});\r\n    // });\r\n    //\r\n    // return 4;\r\n});\r\n"]}