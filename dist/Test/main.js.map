{"version":3,"sources":["../../src/Test/main.js"],"names":["mainWindow","app","on","process","platform","quit","BrowserWindow","width","height","loadURL","url","format","pathname","path","join","cwd","protocol","slashes","openDevTools","IPC","_registerWindow","Registry","loadModule","event","console","log","send","data","channel","Channel","createReceiver","doSomething","doSomethingElse","createSubChannel","onColor","senderID","createSender","getID","then","smth"],"mappings":";;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AARA;AASA,IAAIA,UAAJ;AACAC,cAAIC,EAAJ,CAAO,mBAAP,EAA4B,YAAW;AACpC,KAAIC,QAAQC,QAAR,IAAoB,QAAxB,EAAkC;AAChCH,gBAAII,IAAJ;AACD;AACH,CAJD;AAKAJ,cAAIC,EAAJ,CAAO,OAAP,EAAgB,YAAW;AAC1BF,cAAa,IAAIM,uBAAJ,CAAkB,EAACC,OAAO,IAAR,EAAcC,QAAQ,GAAtB,EAAlB,CAAb;AACA;AACA;AACA;AACA;AACA;AACAR,YAAWS,OAAX,CAAmBC,cAAIC,MAAJ,CAAW;AAC7BC,YAAUC,eAAKC,IAAL,CAAUX,QAAQY,GAAR,EAAV,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,YAAzC,CADmB;AAE7BC,YAAU,OAFmB;AAG7BC,WAAS;AAHoB,EAAX,CAAnB;AAKAjB,YAAWkB,YAAX;AACAlB,YAAWE,EAAX,CAAc,QAAd,EAAwB,YAAW;AAClCF,eAAa,IAAb;AACA,EAFD;AAGAmB,eAAIC,eAAJ,CAAoBpB,UAApB;AACA,CAjBD;;AAmBA;AACAqB,mBAASC,UAAT,CAAoB,YAApB;;AAEA;AACAH,cAAIjB,EAAJ,CAAO,MAAP,EAAgBqB,KAAD,IAAS;AACvBC,SAAQC,GAAR,CAAYF,KAAZ;AACAJ,eAAIO,IAAJ,CAAS,MAAT,EAAiB,EAACC,MAAK,CAAN,EAAjB,EAA2B,CAA3B;AACA;AACA,CAJD;AAKAR,cAAIjB,EAAJ,CAAO,wBAAP,EAAkCqB,KAAD,IAAS;AACtCC,SAAQC,GAAR,CAAYF,KAAZ;AACH,CAFD;;AAIA;AACA,IAAIK,UAAUC,kBAAQC,cAAR,CAAuB,UAAvB,EAAmC;AAChDC,cAAaR,SAAO;AACnBC,UAAQC,GAAR,CAAY,MAAZ,EAAoBF,KAApB;AACA,EAH+C;AAIhDS,kBAAiBT,SAAO;AACvBC,UAAQC,GAAR,CAAY,UAAZ,EAAwBF,KAAxB;AACA;AAN+C,CAAnC,CAAd;AAQAK,QAAQK,gBAAR,CAAyB,UAAzB,EAAqC;AACpCC,UAASX,SAAO;AACfC,UAAQC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,EAHmC;AAIpCS,kBAAiB,UAAST,KAAT,EAAe;AAC/BC,UAAQC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC,EAA2CA,MAAMY,QAAjD;AACAN,oBAAQO,YAAR,CAAqBb,MAAMY,QAA3B,EAAqC,EAArC,EAAyC,KAAKE,KAAL,EAAzC,EAAuDC,IAAvD,CAA4DV,WAAS;AACpEJ,WAAQC,GAAR,CAAY,sBAAZ;AACAG,WAAQW,IAAR,CAAa,OAAb;AACA,GAHD;AAIA;AAVmC,CAArC","file":"main.js","sourcesContent":["//this is merely some test code\r\nimport {app as app, BrowserWindow as BrowserWindow} from \"electron\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport IPC from \"../core/communication/IPC\";\r\nimport Registry from \"../core/registry/registry\";\r\nimport Channel from \"../core/communication/channel\";\r\n\r\n// var {app, BrowserWindow} = require('electron');\r\nvar mainWindow;\r\napp.on('window-all-closed', function() {\r\n  \tif (process.platform != 'darwin') {\r\n    \tapp.quit();\r\n  \t}\r\n});\r\napp.on('ready', function() {\r\n\tmainWindow = new BrowserWindow({width: 1360, height: 800});\r\n\t// mainWindow.loadURL(url.format({\r\n\t//   pathname: \"www.google.com\",\r\n\t//   protocol: 'https:',\r\n\t//   slashes: true\r\n\t// }));\r\n\tmainWindow.loadURL(url.format({\r\n\t\tpathname: path.join(process.cwd(), \"dist\", \"Test\", \"index.html\"),\r\n\t\tprotocol: 'file:',\r\n\t\tslashes: true\r\n\t}))\r\n\tmainWindow.openDevTools();\r\n\tmainWindow.on('closed', function() {\r\n\t\tmainWindow = null;\r\n\t});\r\n\tIPC._registerWindow(mainWindow);\r\n});\r\n\r\n// Module registry\r\nRegistry.loadModule(\"testModule\");\r\n\r\n// IPC testing\r\nIPC.on(\"ping\", (event)=>{\r\n\tconsole.log(event);\r\n\tIPC.send(\"pong\", {data:2}, 1);\r\n\t// IPC.send(\"module\", TestModule, 1);\r\n});\r\nIPC.on(\"moduleInstanceTransfer\", (event)=>{\r\n    console.log(event);\r\n});\r\n\r\n// Channel testing\r\nvar channel = Channel.createReceiver(\"TestName\", {\r\n\tdoSomething: event=>{\r\n\t\tconsole.log(\"smth\", event);\r\n\t},\r\n\tdoSomethingElse: event=>{\r\n\t\tconsole.log(\"smthElse\", event);\r\n\t}\r\n});\r\nchannel.createSubChannel(\"getColor\", {\r\n\tonColor: event=>{\r\n\t\tconsole.log(\"color\", event);\r\n\t},\r\n\tdoSomethingElse: function(event){\r\n\t\tconsole.log(\"smthElse Overwritten\", event, event.senderID);\r\n\t\tChannel.createSender(event.senderID, \"\", this.getID()).then(channel=>{\r\n\t\t\tconsole.log(\"establish connection\");\r\n\t\t\tchannel.smth(\"stuff\");\r\n\t\t});\r\n\t}\r\n})\r\n"]}