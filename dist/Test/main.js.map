{"version":3,"sources":["../../src/Test/main.js"],"names":["mainWindow","app","on","process","platform","quit","BrowserWindow","width","height","loadURL","url","format","pathname","path","join","cwd","protocol","slashes","openDevTools","IPC","_registerWindow","once","event","Registry","loadModule","console","log","send","data","then","channel","Channel","createReceiver","doSomething","doSomethingElse","createSubChannel","onColor","senderID","createSender","getID","smth","rootRequestPath","RequestPath","augmentPath","requestPath","toString","_attachModuleInstance"],"mappings":";;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAIA,UAAJ,C,CAVA;;AAWAC,cAAIC,EAAJ,CAAO,mBAAP,EAA4B,YAAW;AACpC,KAAIC,QAAQC,QAAR,IAAoB,QAAxB,EAAkC;AAChCH,gBAAII,IAAJ;AACD;AACH,CAJD;AAKAJ,cAAIC,EAAJ,CAAO,OAAP,EAAgB,YAAW;AAC1BF,cAAa,IAAIM,uBAAJ,CAAkB,EAACC,OAAO,IAAR,EAAcC,QAAQ,GAAtB,EAAlB,CAAb;AACA;AACA;AACA;AACA;AACA;AACAR,YAAWS,OAAX,CAAmBC,cAAIC,MAAJ,CAAW;AAC7BC,YAAUC,eAAKC,IAAL,CAAUX,QAAQY,GAAR,EAAV,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,YAAzC,CADmB;AAE7BC,YAAU,OAFmB;AAG7BC,WAAS;AAHoB,EAAX,CAAnB;AAKAjB,YAAWkB,YAAX;AACAlB,YAAWE,EAAX,CAAc,QAAd,EAAwB,YAAW;AAClCF,eAAa,IAAb;AACA,EAFD;;AAIA;AACAmB,eAAIC,eAAJ,CAAoBpB,UAApB;AACA,CAnBD;;AAsBAmB,cAAIE,IAAJ,CAAS,QAAT,EAAoBC,KAAD,IAAS;AAC3B;AACAC,oBAASC,UAAT,CAAoB,YAApB;;AAEAL,eAAIjB,EAAJ,CAAO,MAAP,EAAeoB,SAAO;AACrB,SAAO,CAAP;AACA,EAFD;;AAIA;AACAH,eAAIjB,EAAJ,CAAO,MAAP,EAAgBoB,KAAD,IAAS;AACvBG,UAAQC,GAAR,CAAY,MAAZ,EAAoBJ,KAApB;AACAH,gBAAIQ,IAAJ,CAAS,MAAT,EAAiB,EAACC,MAAK,CAAN,EAAjB,EAA2B,CAA3B,EAA8BC,IAA9B,CAAmCD,QAAM;AAClCH,WAAQC,GAAR,CAAY,UAAZ,EAAwBE,IAAxB;AACH,GAFJ;AAGA;AACA,EAND;AAOAT,eAAIjB,EAAJ,CAAO,wBAAP,EAAkCoB,KAAD,IAAS;AACtCG,UAAQC,GAAR,CAAYJ,KAAZ;AACH,EAFD;;AAIA;AACA,KAAIQ,UAAUC,kBAAQC,cAAR,CAAuB,UAAvB,EAAmC;AAChDC,eAAaX,SAAO;AACnBG,WAAQC,GAAR,CAAY,MAAZ,EAAoBJ,KAApB;AACA,GAH+C;AAIhDY,mBAAiBZ,SAAO;AACvBG,WAAQC,GAAR,CAAY,UAAZ,EAAwBJ,KAAxB;AACA;AAN+C,EAAnC,CAAd;AAQAQ,SAAQK,gBAAR,CAAyB,UAAzB,EAAqC;AACpCC,WAASd,SAAO;AACfG,WAAQC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AACA,GAHmC;AAIpCY,mBAAiB,UAASZ,KAAT,EAAe;AAC/BG,WAAQC,GAAR,CAAY,sBAAZ,EAAoCJ,KAApC,EAA2CA,MAAMe,QAAjD;AACAN,qBAAQO,YAAR,CAAqBhB,MAAMe,QAA3B,EAAqC,EAArC,EAAyC,KAAKE,KAAL,EAAzC,EAAuDV,IAAvD,CAA4DC,WAAS;AACpEL,YAAQC,GAAR,CAAY,sBAAZ;AACAI,YAAQU,IAAR,CAAa,OAAb;AACA,IAHD;AAIA;AAVmC,EAArC;;AAaG;AACH,OAAMC,kBAAkB,IAAIC,qBAAJ,CAAgB,MAAhB,CAAxB;AACAD,iBAAgBE,WAAhB,CAA4B,MAA5B,EAAoCd,IAApC,CAAyCe,eAAa;AACrDnB,UAAQC,GAAR,CAAYkB,YAAYC,QAAZ,CAAqB,IAArB,CAAZ;AACAD,cAAYE,qBAAZ,CAAkC,MAAlC;AACA,EAHD;AAIA,CAhDD","file":"main.js","sourcesContent":["//this is merely some test code\r\nimport {app as app, BrowserWindow as BrowserWindow} from \"electron\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport IPC from \"../core/communication/IPC\";\r\nimport Registry from \"../core/registry/registry\";\r\nimport Channel from \"../core/communication/channel\";\r\nimport RequestPath from \"../core/registry/requestPath\";\r\n\r\n// var {app, BrowserWindow} = require('electron');\r\nvar mainWindow;\r\napp.on('window-all-closed', function() {\r\n  \tif (process.platform != 'darwin') {\r\n    \tapp.quit();\r\n  \t}\r\n});\r\napp.on('ready', function() {\r\n\tmainWindow = new BrowserWindow({width: 1360, height: 800});\r\n\t// mainWindow.loadURL(url.format({\r\n\t//   pathname: \"www.google.com\",\r\n\t//   protocol: 'https:',\r\n\t//   slashes: true\r\n\t// }));\r\n\tmainWindow.loadURL(url.format({\r\n\t\tpathname: path.join(process.cwd(), \"dist\", \"Test\", \"index.html\"),\r\n\t\tprotocol: 'file:',\r\n\t\tslashes: true\r\n\t}))\r\n\tmainWindow.openDevTools();\r\n\tmainWindow.on('closed', function() {\r\n\t\tmainWindow = null;\r\n\t});\r\n\r\n\t// Register window\r\n\tIPC._registerWindow(mainWindow);\r\n});\r\n\r\n\r\nIPC.once(\"loaded\", (event)=>{\r\n\t// Module registry\r\n\tRegistry.loadModule(\"testModule\");\r\n\r\n\tIPC.on(\"pong\", event=>{\r\n\t\treturn 3;\r\n\t})\r\n\r\n\t// IPC testing\r\n\tIPC.on(\"ping\", (event)=>{\r\n\t\tconsole.log(\"ping\", event);\r\n\t\tIPC.send(\"pong\", {data:2}, 1).then(data=>{\r\n\t        console.log(\"response\", data);\r\n\t    });\r\n\t\t// IPC.send(\"module\", TestModule, 1);\r\n\t});\r\n\tIPC.on(\"moduleInstanceTransfer\", (event)=>{\r\n\t    console.log(event);\r\n\t});\r\n\r\n\t// Channel testing\r\n\tvar channel = Channel.createReceiver(\"TestName\", {\r\n\t\tdoSomething: event=>{\r\n\t\t\tconsole.log(\"smth\", event);\r\n\t\t},\r\n\t\tdoSomethingElse: event=>{\r\n\t\t\tconsole.log(\"smthElse\", event);\r\n\t\t}\r\n\t});\r\n\tchannel.createSubChannel(\"getColor\", {\r\n\t\tonColor: event=>{\r\n\t\t\tconsole.log(\"color\", event);\r\n\t\t},\r\n\t\tdoSomethingElse: function(event){\r\n\t\t\tconsole.log(\"smthElse Overwritten\", event, event.senderID);\r\n\t\t\tChannel.createSender(event.senderID, \"\", this.getID()).then(channel=>{\r\n\t\t\t\tconsole.log(\"establish connection\");\r\n\t\t\t\tchannel.smth(\"stuff\");\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n    //RequestPath testing\r\n\tconst rootRequestPath = new RequestPath(\"root\");\r\n\trootRequestPath.augmentPath(\"test\").then(requestPath=>{\r\n\t\tconsole.log(requestPath.toString(true));\r\n\t\trequestPath._attachModuleInstance(\"shit\");\r\n\t});\r\n});\r\n"]}