{"version":3,"sources":["../../../src/testing/runner/serverRunner.js"],"names":["inpFile","inpComplete","file","script","require","default","onReady","window","BrowserWindow","width","height","loadURL","url","format","pathname","path","join","process","cwd","protocol","slashes","IPC","_registerWindow","openDevTools","complete","close","_deregisterWindow","readyListeners","isReady","callback","push","app","on","forEach","listener","phaseAwaiting","continueServer","runNextPhase","webContents","send","ipcMain","once","promise","resolve","reject","then","event"],"mappings":";;;;;;;;;;;;kBAkCe,UAASA,OAAT,EAAkBC,WAAlB,EAA8B;AACzCC,WAAOF,OAAP;AACAG,aAASC,QAAQF,IAAR,EAAcG,OAAvB;;AAEAC,YAAQ,MAAI;AACRC,iBAAS,IAAIC,uBAAJ,CAAkB,EAACC,OAAO,IAAR,EAAcC,QAAQ,GAAtB,EAAlB,CAAT;AACAH,eAAOI,OAAP,CAAeC,cAAIC,MAAJ,CAAW;AACtBC,sBAAUC,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,MAAzB,EAAiC,SAAjC,EAA4C,QAA5C,EAAsD,aAAtD,CADY;AAEtBC,sBAAU,OAFY;AAGtBC,qBAAS;AAHa,SAAX,CAAf;AAKAC,sBAAIC,eAAJ,CAAoBf,MAApB;AACAA,eAAOgB,YAAP;AACAC,mBAAW,MAAI;AACXjB,mBAAOkB,KAAP;AACAJ,0BAAIK,iBAAJ,CAAsBnB,MAAtB;AACA,gBAAGN,WAAH,EACIA;AACP,SALD;AAMH,KAfD;AAgBH,C;;;;AAtDD;;AAKA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI0B,iBAAiB,EAArB;AACA,IAAIC,UAAU,KAAd;AACA,MAAMtB,UAAWuB,QAAD,IAAY;AACxB,QAAGD,OAAH,EAAYC,WAAZ,KACKF,eAAeG,IAAf,CAAoBD,QAApB;AACR,CAHD;AAIAE,cAAIC,EAAJ,CAAO,OAAP,EAAgB,YAAU;AACtBJ,cAAU,IAAV;AACAD,mBAAeM,OAAf,CAAuBC,YAAU;AAC7BA;AACH,KAFD;AAGH,CALD;;AAOA,IAAIC,gBAAgB,CAApB;AACA,IAAIjC,IAAJ;AACA,IAAIC,MAAJ;AACA,IAAIiC,cAAJ;AACA,IAAI7B,MAAJ;AACA,IAAIiB,QAAJ;AACA,MAAMa,eAAe,YAAU;AAC3BF,oBAAgB,CAAhB;AACA5B,WAAO+B,WAAP,CAAmBC,IAAnB,CAAwB,mBAAxB;AACAH;AACH,CAJD;;AA0BC;;AAEDI,kBAAQC,IAAR,CAAa,qBAAb,EAAoC,MAAI;AACpCtC,WAAO,CAAP,EAAU,MAAI;AACV,cAAMuC,UAAU,sBAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC3CR,6BAAiBO,OAAjB;AACH,SAFe,CAAhB;AAGA,YAAG,EAAER,aAAF,IAAiB,CAApB,EACIE;AACJ,eAAOK,OAAP;AACH,KAPD,EAOGG,IAPH,CAOQrB,QAPR;AAQAjB,WAAO+B,WAAP,CAAmBC,IAAnB,CAAwB,kBAAxB,EAA4CrC,IAA5C;;AAGAsC,sBAAQR,EAAR,CAAW,uBAAX,EAAoCc,SAAO;AACvC,YAAG,EAAEX,aAAF,IAAiB,CAApB,EACIE;AACP,KAHD;AAIH,CAhBD","file":"serverRunner.js","sourcesContent":["import {\r\n    app,\r\n    BrowserWindow,\r\n    ipcMain\r\n} from \"electron\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport IPC from \"../../core/communication/IPC\";\r\n\r\nlet readyListeners = [];\r\nlet isReady = false;\r\nconst onReady = (callback)=>{\r\n    if(isReady) callback();\r\n    else readyListeners.push(callback);\r\n};\r\napp.on('ready', function(){\r\n    isReady = true;\r\n    readyListeners.forEach(listener=>{\r\n        listener();\r\n    })\r\n});\r\n\r\nlet phaseAwaiting = 2;\r\nlet file;\r\nlet script;\r\nlet continueServer;\r\nlet window;\r\nlet complete;\r\nconst runNextPhase = function(){\r\n    phaseAwaiting = 2;\r\n    window.webContents.send(\"TESTING.nextPhase\");\r\n    continueServer();\r\n};\r\n\r\nexport default function(inpFile, inpComplete){\r\n    file = inpFile;\r\n    script = require(file).default;\r\n\r\n    onReady(()=>{\r\n        window = new BrowserWindow({width: 1360, height: 800});\r\n        window.loadURL(url.format({\r\n            pathname: path.join(process.cwd(), \"dist\", \"testing\", \"runner\", \"window.html\"),\r\n            protocol: \"file:\",\r\n            slashes: true\r\n        }));\r\n        IPC._registerWindow(window);\r\n        window.openDevTools();\r\n        complete = ()=>{\r\n            window.close();\r\n            IPC._deregisterWindow(window);\r\n            if(inpComplete)\r\n                inpComplete();\r\n        }\r\n    })\r\n};\r\n\r\nipcMain.once('TESTING.windowReady', ()=>{\r\n    script(0, ()=>{\r\n        const promise = new Promise((resolve, reject)=>{\r\n            continueServer = resolve;\r\n        });\r\n        if(--phaseAwaiting==0)\r\n            runNextPhase();\r\n        return promise;\r\n    }).then(complete);\r\n    window.webContents.send(\"TESTING.loadFile\", file);\r\n\r\n\r\n    ipcMain.on(\"TESTING.completePhase\", event=>{\r\n        if(--phaseAwaiting==0)\r\n            runNextPhase();\r\n    });\r\n});\r\n"]}