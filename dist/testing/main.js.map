{"version":3,"sources":["../../src/testing/main.js"],"names":["require","module","console","log","dir","ordered","then","res","map","obj","testFiles","filter","file","match","walk","dirs","fileCallback","complete","Array","path","name","length","Fs","stat","err","stats","isDir","isDirectory","handled","readdir","files","reverse","forEach","p","Path","join","push","pop","callback","process","exit"],"mappings":";;;;;;+CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAGA;;;;AAIA;;;;AACA;;;;AACA;;;;;;AALAA,UAAU,UAASC,MAAT,EAAgB;AACtBC,YAAQC,GAAR,CAAYF,MAAZ;AACH,CAFD;;;AAOA,MAAMG,MAAM,OAAZ;AACA,MAAMC,UAAU,KAAhB,C,CAAuB;AACvB,IAAGA,OAAH,EAAW;AACP;AACA;AACA,yBAAM,OAAN,EAAeC,IAAf,CAAoBC,OAAK;AACrB,cAAMC,MAAMD,IAAIE,GAAJ,EAAZ;AACA,cAAMC,YAAY,oBAAYF,GAAZ,EAAiBG,MAAjB,CAAwBC,QAAM;AAC5C,mBAAOA,KAAKC,KAAL,CAAW,kBAAX,CAAP;AACH,SAFiB,CAAlB;AAGAX,gBAAQC,GAAR,CAAYK,GAAZ,EAAiBE,SAAjB;AACH,KAND;AAOH,CAVD,MAUK;AACD,UAAMI,OAAO,UAASC,IAAT,EAAeC,YAAf,EAA6BC,QAA7B,EAAsC;AAC/C,YAAG,EAAEF,gBAAgBG,KAAlB,CAAH,EAA6BH,OAAO,CAAC,EAACI,MAAKJ,IAAN,EAAYK,MAAKL,IAAjB,EAAD,CAAP;AAC7B,YAAIX,MAAMW,KAAKA,KAAKM,MAAL,GAAY,CAAjB,CAAV;AACA,YAAG,CAACjB,GAAJ,EAAQ;AACJ,gBAAGa,QAAH,EAAaA;AACb;AACH;AACDK,qBAAGC,IAAH,CAAQnB,IAAIe,IAAZ,EAAkB,CAACK,GAAD,EAAMC,KAAN,KAAc;AAC5B,gBAAIC,QAAQD,MAAME,WAAN,EAAZ;AACA,gBAAG,CAACvB,IAAIwB,OAAR,EAAgB;AACZxB,oBAAIwB,OAAJ,GAAc,IAAd;AACA,oBAAGF,KAAH,EAAS;AACLJ,iCAAGO,OAAH,CAAWzB,IAAIe,IAAf,EAAqB,CAACK,GAAD,EAAMM,KAAN,KAAc;AAC/BA,8BAAMC,OAAN,GAAgBC,OAAhB,CAAwBpB,QAAM;AAC1B,gCAAIqB,IAAIC,eAAKC,IAAL,CAAU/B,IAAIe,IAAd,EAAoBP,IAApB,CAAR;AACAG,iCAAKqB,IAAL,CAAU,EAACjB,MAAKc,CAAN,EAASb,MAAKR,IAAd,EAAV;AACH,yBAHD;AAIAE,6BAAKC,IAAL,EAAWC,YAAX;AACH,qBAND;AAOH,iBARD,MAQK;AACDA,iCAAaZ,IAAIe,IAAjB,EAAuB,MAAI;AACvBL,6BAAKC,IAAL,EAAWC,YAAX;AACH,qBAFD;AAGH;AACJ,aAfD,MAeK;AACDD,qBAAKsB,GAAL;AACAvB,qBAAKC,IAAL,EAAWC,YAAX;AACH;AACJ,SArBD;AAsBH,KA7BD;AA8BAF,SAAKV,GAAL,EAAU,CAACQ,IAAD,EAAO0B,QAAP,KAAkB;AACxB,YAAG1B,KAAKC,KAAL,CAAW,wBAAX,CAAH,EAAwC;AACpC,gBAAIM,OAAOe,eAAKC,IAAL,CAAU,IAAV,EAAe,IAAf,EAAoB,IAApB,EAAyBvB,IAAzB,CAAX;AACA,wCAAOO,IAAP,EAAa,MAAI;AACbmB;AACH,aAFD;AAGH,SALD,MAMIA;AACP,KARD,EAQG,MAAI;AACHC,gBAAQC,IAAR;AACH,KAVD;AAWH;;AAED","file":"main.js","sourcesContent":["// import Jasmine from \"jasmine\";\r\n// import ElectronReporter from \"./reporter\";\r\n//\r\n// var jasmine = new Jasmine();\r\n// jasmine.loadConfig({\r\n//     spec_files: [\r\n//         'dist/**/_tests/*.js',\r\n//     ],\r\n//     random: false\r\n// });\r\n// // jasmine.configureDefaultReporter({\r\n// //     showColors: true\r\n// // });\r\n// jasmine.clearReporters();\r\n// jasmine.addReporter(new ElectronReporter({}));\r\n// // jasmine.execute(['dist/core/communication/_tests/extendedJSON.js']);\r\n// // jasmine.execute(['dist/core/communication/_tests/extendedJSON.js']);\r\n// // jasmine.onComplete(function(passed){\r\n// //     process.exit();\r\n// // });\r\n// global.describe = describe;\r\n// import ExtendedJSON from \"../../dist/core/communication/_tests/extendedJSON\";\r\n\r\n\r\nimport runner from \"./runner/serverRunner\";\r\nrequire = function(module){\r\n    console.log(module);\r\n}\r\nimport madge from \"madge\";\r\nimport Fs from \"fs\";\r\nimport Path from \"path\";\r\n\r\nconst dir = \"dist/\";\r\nconst ordered = false; //Whether to order tests on their dependencies\r\nif(ordered){\r\n    //TODO implement version that tries to perform tests of dependencies before own test\r\n    // const madge = require('madge');\r\n    madge(\"dist/\").then(res=>{\r\n        const map = res.obj();\r\n        const testFiles = Object.keys(map).filter(file=>{\r\n            return file.match(/_tests\\/.*\\.jsx?/);\r\n        });\r\n        console.log(map, testFiles);\r\n    });\r\n}else{\r\n    const walk = function(dirs, fileCallback, complete){\r\n        if(!(dirs instanceof Array)) dirs = [{path:dirs, name:dirs}];\r\n        var dir = dirs[dirs.length-1];\r\n        if(!dir){\r\n            if(complete) complete();\r\n            return;\r\n        }\r\n        Fs.stat(dir.path, (err, stats)=>{\r\n            var isDir = stats.isDirectory();\r\n            if(!dir.handled){\r\n                dir.handled = true;\r\n                if(isDir){\r\n                    Fs.readdir(dir.path, (err, files)=>{\r\n                        files.reverse().forEach(file=>{\r\n                            var p = Path.join(dir.path, file);\r\n                            dirs.push({path:p, name:file});\r\n                        });\r\n                        walk(dirs, fileCallback);\r\n                    });\r\n                }else{\r\n                    fileCallback(dir.path, ()=>{\r\n                        walk(dirs, fileCallback);\r\n                    })\r\n                }\r\n            }else{\r\n                dirs.pop();\r\n                walk(dirs, fileCallback);\r\n            }\r\n        });\r\n    };\r\n    walk(dir, (file, callback)=>{\r\n        if(file.match(/_tests(\\/|\\\\).*\\.jsx?$/)){\r\n            var path = Path.join(\"..\",\"..\",\"..\",file);\r\n            runner(path, ()=>{\r\n                callback();\r\n            })\r\n        }else\r\n            callback();\r\n    }, ()=>{\r\n        process.exit();\r\n    });\r\n}\r\n\r\n// runner(\"../../../dist/core/communication/_tests/extendedJSON\");\r\n"]}