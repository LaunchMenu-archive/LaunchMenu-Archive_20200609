{"version":3,"sources":["../../src/babel plugins/registryRequest.js"],"names":["t","types","requestStatement","visitor","Program","path","data","filename","file","opts","match","requireDeclaration","VariableDeclaration","VariableDeclarator","Identifier","MemberExpression","CallExpression","StringLiteral","_blockHoist","firstNode","get","insertBefore","node","name","callee","arg","arguments","type","text","value","substring","varNode","declaration","declarations","requestArgs","init","id","ObjectPattern","ObjectProperty","varName","parentPath","properties","push","remove","replaceWith"],"mappings":"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","file":"registryRequest.js","sourcesContent":["// This is currently broken and not yet fixex because I haven't decided to make use of it in general.\r\nexport default function({types: t}) {\r\n    var requestStatement = null;\r\n    return {\r\n        visitor: {\r\n            Program(path, data) {\r\n                // Reset when the plugin runs on a new file\r\n                requestStatement = null;\r\n\r\n                // Require the registry class once\r\n                // Get the filename of the file we are currently transpiling\r\n                const filename = data.file.opts.filename;\r\n\r\n                // Don't require the registry in any core module\r\n                if (filename.match(/src\\/core\\//)) return;\r\n\r\n                // Create a require statement for the registry\r\n                const requireDeclaration = t.VariableDeclaration(\"var\", [\r\n                    t.VariableDeclarator(\r\n                        t.Identifier(\"Registry\"),\r\n                        t.MemberExpression(\r\n                            t.MemberExpression(\r\n                                t.CallExpression(t.Identifier(\"require\"), [\r\n                                    t.StringLiteral(\"LM\"),\r\n                                ]),\r\n                                t.Identifier(\"default\")\r\n                            ),\r\n                            t.Identifier(\"Registry\")\r\n                        )\r\n                    ),\r\n                ]);\r\n\r\n                // Set _blockHoist which will assure it is appended to the top of the document\r\n                requireDeclaration._blockHoist = 3;\r\n\r\n                // Add the requireDeclaration to the document\r\n                const firstNode = path.get(\"body\")[0];\r\n                if (firstNode) firstNode.insertBefore(requireDeclaration);\r\n            },\r\n            CallExpression(path) {\r\n                const node = path.node;\r\n\r\n                // Check if the call is to a require method\r\n                const name = node.callee.name;\r\n                if (name !== \"require\") return;\r\n\r\n                // Check if argument is a string literal\r\n                const arg = node.arguments[0];\r\n                if (arg.type !== \"StringLiteral\") return;\r\n\r\n                // Check if string has the LM prefix\r\n                const text = arg.value;\r\n                if (!text.match(/^LM\\:/)) return;\r\n\r\n                // Remove LM: from string\r\n                arg.value = text.substring(3);\r\n\r\n                // Replace normal require\r\n                if (requestStatement) {\r\n                    // As a Registry.request already exists in this file, make it a multi request and add this to it\r\n\r\n                    const varNode = requestStatement.node;\r\n                    const declaration = varNode.declarations[0];\r\n                    const requestArgs = declaration.init.arguments;\r\n\r\n                    // Turn the assignment into a multipe variable assignment if it isn't already\r\n                    if (declaration.id.type != \"ObjectPattern\") {\r\n                        declaration.id = t.ObjectPattern([\r\n                            t.ObjectProperty(\r\n                                t.Identifier(requestArgs[0].value),\r\n                                declaration.id\r\n                            ),\r\n                        ]);\r\n                    }\r\n\r\n                    // Add the new data to the assignment\r\n                    let varName = path.parentPath.node.id;\r\n                    if (varName) {\r\n                        varName = varName.name;\r\n\r\n                        // Add field to descturing object\r\n                        declaration.id.properties.push(\r\n                            t.ObjectProperty(\r\n                                t.Identifier(arg.value),\r\n                                t.Identifier(varName)\r\n                            )\r\n                        );\r\n\r\n                        // Add method to request call\r\n                        requestArgs.push(arg);\r\n\r\n                        // Remove the original import request\r\n                        path.parentPath.remove();\r\n                    }\r\n                } else {\r\n                    // Replace require with Registry.request\r\n                    path.replaceWith(\r\n                        t.CallExpression(\r\n                            t.MemberExpression(\r\n                                t.Identifier(\"Registry\"),\r\n                                t.Identifier(\"requestModule\")\r\n                            ),\r\n                            [arg]\r\n                        )\r\n                    );\r\n\r\n                    // Make it so any future requests add to this already existing request\r\n                    requestStatement = path.parentPath.parentPath;\r\n                }\r\n            },\r\n        },\r\n    };\r\n}\r\n"]}